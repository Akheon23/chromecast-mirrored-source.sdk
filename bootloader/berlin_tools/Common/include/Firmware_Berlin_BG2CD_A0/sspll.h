//////
/// don't edit! auto-generated by docc: sspll.h
////////////////////////////////////////////////////////////
#ifndef sspll_h
#define sspll_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE pll                                      (4,4)
///     ###
///     * SSPLL is a wide range, and low power spread-spectrum PLL that is also capable of
///     * adding in a fixed frequency offset in about 1 ppm/step resolution.
///     * Input Frequency: Fref: 8 MHz ~ 1 GHz.
///     * Output Frequency: Fout: 4 MHz ~ 4 GHz.
///     * Fout(CLKOUT) = (Fref *4*N/M) / CLKOUT_SE_DIV_SEL)
///     * Fout(CLKOUTP, CLKOUTN) = (Fref*4*N/M) / CLKOUT_DIFF_DIV_SEL).
///     * M: Reference Divider: 1 to 511.
///     * N: Feedback Divider: 1 to 511.
///     * VCODIV: VCO differential divider is controlled by CLKOUT_DIFF_DIV_SEL
///     * VCO single-ended divider is controlled by CLKOUT_SE_DIV_SEL.
///     * Divider value = 1,2,3,4….511.
///     * Update Rate: Fref / M = 8 to 24 MHz (to maintain PLL stability).
///     * NOTE: Although VCO can be operated between 1 ~ 4 GHz, the 1 ~ 2 GHz range is applicable
///     * only in the low power mode and cannot be used with the SSC function. In order to use the SSC
///     * function VCO must be operated above 2 GHz.
///     * Cycle to Cycle Jitter (max): <30 ps.
///     * Programmable Reference and Feedback Divider.
///     * 1 ppm/step frequency offset resolution. Up to 50,000 ppm without changing the Feedback Divider setting.
///     * SSC frequency range: 30 KHz ~ 100 KHz
///     * SSC amplitude range: up to +/-5%. (SSC function is disabled by default.)
///     * Supporting both down-spread and center-spread modes.
///     * Locking time: < 50 μm
///     * Process Node: 28 nm
///     * Analog Power Supply: 1.8 V (±10%)
///     * Digital Power Supply: 0.9 V (±10%)
///     * Output Duty Cycle: 50% ± 5% for any post divider ratio
///     * Built-in Bandgap circuit.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * PLL Control register
///               ###
///               %unsigned 1  PU                        0x1
///                                    ###
///                                    * PLL Power-Up
///                                    * 1: power up.
///                                    * 0: power down.
///                                    ###
///               %unsigned 1  RESET                     0x1
///                                    ###
///                                    * Power On Reset. Active high, reset PLL and all logic.
///                                    * 1: reset.
///                                    * 0: no reset.
///                                    ###
///               %unsigned 1  AVDD1815_SEL              0x1
///                                    ###
///                                    * AVDD Select.
///                                    * Selects whether AVDD is 1.8V
///                                    * or 1.5V.
///                                    * 1: 1.8V
///                                    * 0: 1.5V
///                                    ###
///               %unsigned 9  REFDIV                    0x2
///                                    ###
///                                    * Reference Clock Divider
///                                    * Select.
///                                    * Divider = REFDIV[8:0]
///                                    * 9’h000 = divide by 1
///                                    * 9’h001 = divide by 1
///                                    * 9’h002 = divide by 2
///                                    * 9’h003 = divide by 3
///                                    * ...
///                                    * 9’h1FF = divide by 511.
///                                    ###
///               %unsigned 9  FBDIV                     0x30
///                                    ###
///                                    * Feedback Clock Divider Select.
///                                    * Divider= FBDIV [8:0]
///                                    * 9’h000 = divide by 1
///                                    * 9’h001 = divide by 1
///                                    * 9’h002 = divide by 2
///                                    * 9’h003 = divide by 3
///                                    * ...
///                                    * 9’h1FF = divide by 511.
///                                    ###
///               %unsigned 2  VDDM                      0x1
///                                    ###
///                                    * VCO Supply Control.
///                                    * 11: 1.5 V
///                                    * 10: 1.45 V
///                                    * 01: 1.4 V
///                                    * 00: 1.35 V.
///                                    ###
///               %unsigned 3  VDDL                      0x4
///                                    ###
///                                    * Internal VDD Supply Control.
///                                    * 000: 0.7V.
///                                    * 001: 0.75V
///                                    * 010: 0.8V
///                                    * 011: 0.85V
///                                    * 100: 0.9V
///                                    * 101: 0.95V
///                                    * 110: 1.0V
///                                    * 111: 1.05V.
///                                    ###
///               %unsigned 4  ICP                       0x5
///                                    ###
///                                    * Charge-pump Current Control Bits.
///                                    * 0000: 3 uA
///                                    * 0001: 3.75 uA
///                                    * 0010: 4.5 uA
///                                    * 0011: 5.25 uA
///                                    * 0100: 6 uA
///                                    * 0101: 7.5 uA
///                                    * 0110: 9 uA
///                                    * 0111: 10.5 uA
///                                    * 1000: 12 uA
///                                    * 1001: 15 uA
///                                    * 1010: 18 uA
///                                    * 1011: 21 uA
///                                    * 1100: 24 uA
///                                    * 1101: 30 uA
///                                    * 1110: 36 uA
///                                    * 1111: 42 uA.
///                                    * Note : ICP[3:0] = (10 MHz / Update Rate) * Default.
///                                    * If PU_BW_SEL = 1, then increase ICP value by 2x
///                                    ###
///               %unsigned 1  PLL_BW_REL                0x0
///                                    ###
///                                    * PLL Bandwidth Select.
///                                    * 1: BW x 2
///                                    * 0: Normal PLL bandwidth.
///                                    * Note: Use bandwidth x 2 only if update rate is between 16 - 24 MHz.
///                                    * NOTE: Bandwidth x 2 is for special cases only. If used, the update rate must be betweeen 16 MHz - 24 MHz.
///                                    ###
///               %%        1          # Stuffing bits...
///     # 0x00004 ctrl1                
///               %unsigned 4  KVCO                      0x9
///                                    ###
///                                    * KVCO Frequency Range
///                                    * Select.
///                                    * 0000: Reserved
///                                    * 0001: 1.0G ~ 1.15G
///                                    * 0010: 1.15G ~ 1.25G
///                                    * 0011: 1.25G ~ 1.40G
///                                    * 0100: 1.40G ~ 1.55G
///                                    * 0101: 1.55G ~ 1.65G
///                                    * 0110: 1.65G ~ 1.80G
///                                    * 0111: 1.80G ~ 1.95G
///                                    * 1000: 1.95G ~ 2.17G
///                                    * 1001: 2.17G ~ 2.50G
///                                    * 1010: 2.50G ~ 2.80G
///                                    * 1011: 2.80G ~ 3.10G
///                                    * 1100: 3.10G ~ 3.45G
///                                    * 1101: 3.45G ~ 3.75G
///                                    * 1110: 3.75G ~ 4.0G
///                                    * 1111: Reserved.
///                                    * Note: SSC mode is only supported for frequency >=2 GHz
///                                    ###
///               %unsigned 2  CTUNE                     0x2
///                                    ###
///                                    * VCO Capacitor Select.
///                                    * 00: No Cap Loading
///                                    * 01: One Unit Cap Loading
///                                    * 10: Two Unit Cap Loading
///                                    * 11: Three Unit Cap Loading.
///                                    ###
///               %unsigned 9  CLKOUT_DIFF_DIV_SEL       0x6
///                                    ###
///                                    * Post Divider For Differential
///                                    * Output Clock.
///                                    * 9’h000 = 1
///                                    * 9’h001 = 1
///                                    * 9’h002 = 2
///                                    * 9’h003 = 3
///                                    * 9’h004 = 4
///                                    * ...
///                                    * 9’h1FF = 511.
///                                    ###
///               %unsigned 9  CLKOUT_SE_DIV_SEL         0x6
///                                    ###
///                                    * Post Divider For Single-ended
///                                    * Output Clock.
///                                    * 9’h000 = 1
///                                    * 9’h001 = 1
///                                    * 9’h002 = 2
///                                    * 9’h003 = 3
///                                    * 9’h004 = 4
///                                    * ...
///                                    * 9’h1FF = 511.
///                                    ###
///               %unsigned 1  CLKOUT_SOURCE_SEL         0x1
///                                    ###
///                                    * Differential Clock And
///                                    * Single-ended Clock Source Control.
///                                    * 0: from the phase interpolator.
///                                    * 1: from VCO directly.
///                                    * Note: This is used in test mode only. Select ‘1’ for normal operation.
///                                    ###
///               %unsigned 1  CLKOUT_DIFF_EN            0x1
///                                    ###
///                                    * Differential Clock Enable.
///                                    * 0:Disable differential clock
///                                    * 1:Enable differential clock
///                                    ###
///               %unsigned 1  BYPASS_EN                 0x0
///                                    ###
///                                    * PLL Clock Bypass Enable.
///                                    * 1: The PLL is bypassed. CLKOUT is derived from REFCLK.
///                                    * 0: CLKOUT is derived from the PLL clock.
///                                    * NOTE: Bypass only works for the single ended clock.
///                                    * The bypass clock is asynchronous and glitch free.
///                                    ###
///               %unsigned 1  CLKOUT_SE_GATING_EN       0x0
///                                    ###
///                                    * Clock Output Gating Control.
///                                    * Selection for using the PLL lock signal to gate the output clock.
///                                    * 0: The PLL_LOCK signal won't affect the output clock, CLKOUT
///                                    * 1: Use PLL_LOCK signal to gate the output clock, CLKOUT.
///                                    ###
///               %unsigned 1  FBCLK_EXT_SEL             0x0
///                                    ###
///                                    * External Or Internal Feedback
///                                    * Clock Select.
///                                    * 0: select internal feedback clock
///                                    * 1: select external feedback clock.
///                                    * Note: For most applications the external feedback clock is not used. In these cases use the default selection "0".
///                                    ###
///               %%        3          # Stuffing bits...
///     # 0x00008 ctrl2                
///               %unsigned 6  FBCDLY                    0x0
///                                    ###
///                                    * Fine Tune Delay Select
///                                    * Between REFCLK And FBCLK_EXT When FBCLK_EXT_SEL = 1.
///                                    * FBCDLY[5] is the sign bit.
///                                    * 1 = FBCLK_EXT will lag REFCLK.
///                                    * 0 = FBCLK_EXT will lead REFCLK.
///                                    * FBCDLY[4:0] decides the actual amount of delay.
///                                    * 00000: No delay.
///                                    * Each additional step has these
///                                    * delays:
///                                    * 00h = No delay
///                                    * 01h = 15 - 50 ps phase difference
///                                    * 02h = 30 - 100 ps phase difference
///                                    * 03h = 45 - 150 ps phase difference
///                                    * ...
///                                    * 3Fh = 945 ps - 3150 ps phase difference.
///                                    * Note: Used in DSPLL application, do not use in regular PLL application.
///                                    ###
///               %unsigned 3  FD                        0x4
///                                    ###
///                                    * Tune Frequency Detector Precision
///                                    ###
///               %unsigned 4  INTPI                     0x2
///                                    ###
///                                    * Phase Interpolator Bias
///                                    * Current Select.
///                                    * 1 ~ 2 GHz NOT SUPPORTED
///                                    * 0001 = 5 uA (2 ~ 2.75 GHz)
///                                    * 0010 = 7.5 uA (2.75 ~ 3.25 GHz).
///                                    * 0011 = 10 uA (3.25 ~ 4 GHz).
///                                    * NOTE: VCO running frequency below 2 GHz not supported.
///                                    ###
///               %unsigned 3  INTPR                     0x6
///                                    ###
///                                    * Phase Interpolator Resistor Select.
///                                    * 1 ~ 2 GHz Not Supported
///                                    * 110 = 8 K (2 ~ 2.75 GHz)
///                                    * 101 = 6 K (2.75 ~ 3.25 GHz)
///                                    * 011 = 4 K (3.25 ~ 4 GHz).
///                                    * NOTE: VCO running frequency below 2 GHz not supported.
///                                    ###
///               %unsigned 1  PI_EN                     0x1
///                                    ###
///                                    * Phase Interpolator Enable.
///                                    * 1: Enable phase interpolator
///                                    * 0: Disable phase interpolator.
///                                    ###
///               %unsigned 1  PI_LOOP_MODE              0x1
///                                    ###
///                                    * Phase Interpolator Loop Control.
///                                    * 1: PI is in the PLL loop.
///                                    * 0: PI is out of the PLL loop
///                                    ###
///               %unsigned 1  SSC_CLK_EN                0x1
///                                    ###
///                                    * SSC Clock Enable.
///                                    * This selection enables the PI output clock for SSC digital logic.
///                                    ###
///               %unsigned 1  CLK_DET_EN                0x1
///                                    ###
///                                    * PI Output Clock Enable. This selection enables the PI output clock for the internal reset circuit
///                                    ###
///               %unsigned 1  RESET_PI                  0x0
///                                    ###
///                                    * External Interpolator Reset.
///                                    * 1: reset.
///                                    * 0: no reset.
///                                    ###
///               %unsigned 1  FREQ_OFFSET_EN            0x0
///                                    ###
///                                    * Frequency Offset Enable.
///                                    * 0: Disable
///                                    * 1: Enable.
///                                    ###
///               %%        10         # Stuffing bits...
///     # 0x0000C ctrl3                
///               %unsigned 17 FREQ_OFFSET               0x0
///                                    ###
///                                    * Frequency Offset Value
///                                    * Control.
///                                    * [16]: Sign-Bit.
///                                    * 0: Frequency down
///                                    * 1: Frequency up
///                                    * [15:0] : 1 LSB 1 ppm, upto 5%
///                                    * 1LSB=10e6/(4*128 *2048) ppm
///                                    * [16]=0--->Sign= 1
///                                    * [16]=1--->Sign= -1
///                                    * Fout = Fvco/ (1 + Sign* FREQ_OFFSET[15:0] *1LSB)
///                                    ###
///               %unsigned 1  FREQ_OFFSET_MODE_SEL      0x0
///                                    ###
///                                    * Frequency Offset Mode Select.
///                                    * 0: FREQ_OFFSET[16:0] is updated by FREQ_OFFSET_VALID
///                                    * 1: FREQ_OFFSET[16:0] is sampled by CK_DIV64_OUT
///                                    * (It has to be valid at the rising edge of CK_DIV64_OUT).
///                                    * Note: For special application only. Use FREQ_OFFSET_VALID to update FREQ_OFFSET[16:0] by default.
///                                    ###
///               %unsigned 1  FREQ_OFFSET_VALID         0x0
///                                    ###
///                                    * Frequency Offset Value Valid.
///                                    * Indicates that frequency offset value (FREQ_OFFSET[16:0]) is valid.
///                                    * Note:
///                                    * 1) A rising edge will trigger the frequency offset generation circuit to read in the FREQ_OFFSET [16:0] value. The pulse width has to be no less than 50 ns.
///                                    * 2) This signal is only needed when FREQ_OFFSET_MODE_SELECTION=0.
///                                    ###
///               %unsigned 1  SSC_MODE                  0x1
///                                    ###
///                                    * SSC Mode Select.
///                                    * 0: center spread
///                                    * 1: down spread.
///                                    ###
///               %%        12         # Stuffing bits...
///     # 0x00010 ctrl4                
///               %unsigned 16 SSC_FREQ_DIV              0x0
///                                    ###
///                                    * SSC Frequency Select.
///                                    ###
///               %unsigned 11 SSC_RNGE                  0x0
///                                    ###
///                                    * SSC Range Select. SSC_RNGE[10:0] = Desired SSC amplitude /(SSC_FREQ_DIV[14:0]*2^(-28)).
///                                    * Rounding to integer required.
///                                    ###
///               %unsigned 1  RESET_SSC                 0x0
///                                    ###
///                                    * SSC reset
///                                    * 0 : No reset
///                                    * 1 : Reset
///                                    ###
///               %unsigned 4  TEST_ANA                  0x0
///                                    ###
///                                    * Analog test point
///                                    ###
///     # 0x00014 ctrl5                
///               %unsigned 8  RESERVE_IN                0x0
///                                    ###
///                                    * Reserved input pins
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00018 status               (R-)
///               ###
///               * PLL status register
///               ###
///               %unsigned 1  PLL_LOCK                  
///                                    ###
///                                    * PLL Lock Detect.
///                                    * 1: PLL locked.
///                                    * 0: PLL not locked.
///                                    * Note:
///                                    * After PLL is powered up, wait for 50 us to check for the lock status.
///                                    * In normal operation, when PLL_LOCK signal is detected low, sample the signal again after 100 us to confirm the status.
///                                    * This signal is for testing purpose only, do not use it for any functional use.
///                                    ###
///               %unsigned 8  RESERVE_OUT               
///                                    ###
///                                    * Reserve Output Register pins.
///                                    ###
///               %%        23         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     151b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_pll
#define h_pll (){}

    #define     RA_pll_ctrl                                    0x0000

    #define     BA_pll_ctrl_PU                                 0x0000
    #define     B16pll_ctrl_PU                                 0x0000
    #define   LSb32pll_ctrl_PU                                    0
    #define   LSb16pll_ctrl_PU                                    0
    #define       bpll_ctrl_PU                                 1
    #define   MSK32pll_ctrl_PU                                    0x00000001

    #define     BA_pll_ctrl_RESET                              0x0000
    #define     B16pll_ctrl_RESET                              0x0000
    #define   LSb32pll_ctrl_RESET                                 1
    #define   LSb16pll_ctrl_RESET                                 1
    #define       bpll_ctrl_RESET                              1
    #define   MSK32pll_ctrl_RESET                                 0x00000002

    #define     BA_pll_ctrl_AVDD1815_SEL                       0x0000
    #define     B16pll_ctrl_AVDD1815_SEL                       0x0000
    #define   LSb32pll_ctrl_AVDD1815_SEL                          2
    #define   LSb16pll_ctrl_AVDD1815_SEL                          2
    #define       bpll_ctrl_AVDD1815_SEL                       1
    #define   MSK32pll_ctrl_AVDD1815_SEL                          0x00000004

    #define     BA_pll_ctrl_REFDIV                             0x0000
    #define     B16pll_ctrl_REFDIV                             0x0000
    #define   LSb32pll_ctrl_REFDIV                                3
    #define   LSb16pll_ctrl_REFDIV                                3
    #define       bpll_ctrl_REFDIV                             9
    #define   MSK32pll_ctrl_REFDIV                                0x00000FF8

    #define     BA_pll_ctrl_FBDIV                              0x0001
    #define     B16pll_ctrl_FBDIV                              0x0000
    #define   LSb32pll_ctrl_FBDIV                                 12
    #define   LSb16pll_ctrl_FBDIV                                 12
    #define       bpll_ctrl_FBDIV                              9
    #define   MSK32pll_ctrl_FBDIV                                 0x001FF000

    #define     BA_pll_ctrl_VDDM                               0x0002
    #define     B16pll_ctrl_VDDM                               0x0002
    #define   LSb32pll_ctrl_VDDM                                  21
    #define   LSb16pll_ctrl_VDDM                                  5
    #define       bpll_ctrl_VDDM                               2
    #define   MSK32pll_ctrl_VDDM                                  0x00600000

    #define     BA_pll_ctrl_VDDL                               0x0002
    #define     B16pll_ctrl_VDDL                               0x0002
    #define   LSb32pll_ctrl_VDDL                                  23
    #define   LSb16pll_ctrl_VDDL                                  7
    #define       bpll_ctrl_VDDL                               3
    #define   MSK32pll_ctrl_VDDL                                  0x03800000

    #define     BA_pll_ctrl_ICP                                0x0003
    #define     B16pll_ctrl_ICP                                0x0002
    #define   LSb32pll_ctrl_ICP                                   26
    #define   LSb16pll_ctrl_ICP                                   10
    #define       bpll_ctrl_ICP                                4
    #define   MSK32pll_ctrl_ICP                                   0x3C000000

    #define     BA_pll_ctrl_PLL_BW_REL                         0x0003
    #define     B16pll_ctrl_PLL_BW_REL                         0x0002
    #define   LSb32pll_ctrl_PLL_BW_REL                            30
    #define   LSb16pll_ctrl_PLL_BW_REL                            14
    #define       bpll_ctrl_PLL_BW_REL                         1
    #define   MSK32pll_ctrl_PLL_BW_REL                            0x40000000

    #define     RA_pll_ctrl1                                   0x0004

    #define     BA_pll_ctrl_KVCO                               0x0004
    #define     B16pll_ctrl_KVCO                               0x0004
    #define   LSb32pll_ctrl_KVCO                                  0
    #define   LSb16pll_ctrl_KVCO                                  0
    #define       bpll_ctrl_KVCO                               4
    #define   MSK32pll_ctrl_KVCO                                  0x0000000F

    #define     BA_pll_ctrl_CTUNE                              0x0004
    #define     B16pll_ctrl_CTUNE                              0x0004
    #define   LSb32pll_ctrl_CTUNE                                 4
    #define   LSb16pll_ctrl_CTUNE                                 4
    #define       bpll_ctrl_CTUNE                              2
    #define   MSK32pll_ctrl_CTUNE                                 0x00000030

    #define     BA_pll_ctrl_CLKOUT_DIFF_DIV_SEL                0x0004
    #define     B16pll_ctrl_CLKOUT_DIFF_DIV_SEL                0x0004
    #define   LSb32pll_ctrl_CLKOUT_DIFF_DIV_SEL                   6
    #define   LSb16pll_ctrl_CLKOUT_DIFF_DIV_SEL                   6
    #define       bpll_ctrl_CLKOUT_DIFF_DIV_SEL                9
    #define   MSK32pll_ctrl_CLKOUT_DIFF_DIV_SEL                   0x00007FC0

    #define     BA_pll_ctrl_CLKOUT_SE_DIV_SEL                  0x0005
    #define     B16pll_ctrl_CLKOUT_SE_DIV_SEL                  0x0004
    #define   LSb32pll_ctrl_CLKOUT_SE_DIV_SEL                     15
    #define   LSb16pll_ctrl_CLKOUT_SE_DIV_SEL                     15
    #define       bpll_ctrl_CLKOUT_SE_DIV_SEL                  9
    #define   MSK32pll_ctrl_CLKOUT_SE_DIV_SEL                     0x00FF8000

    #define     BA_pll_ctrl_CLKOUT_SOURCE_SEL                  0x0007
    #define     B16pll_ctrl_CLKOUT_SOURCE_SEL                  0x0006
    #define   LSb32pll_ctrl_CLKOUT_SOURCE_SEL                     24
    #define   LSb16pll_ctrl_CLKOUT_SOURCE_SEL                     8
    #define       bpll_ctrl_CLKOUT_SOURCE_SEL                  1
    #define   MSK32pll_ctrl_CLKOUT_SOURCE_SEL                     0x01000000

    #define     BA_pll_ctrl_CLKOUT_DIFF_EN                     0x0007
    #define     B16pll_ctrl_CLKOUT_DIFF_EN                     0x0006
    #define   LSb32pll_ctrl_CLKOUT_DIFF_EN                        25
    #define   LSb16pll_ctrl_CLKOUT_DIFF_EN                        9
    #define       bpll_ctrl_CLKOUT_DIFF_EN                     1
    #define   MSK32pll_ctrl_CLKOUT_DIFF_EN                        0x02000000

    #define     BA_pll_ctrl_BYPASS_EN                          0x0007
    #define     B16pll_ctrl_BYPASS_EN                          0x0006
    #define   LSb32pll_ctrl_BYPASS_EN                             26
    #define   LSb16pll_ctrl_BYPASS_EN                             10
    #define       bpll_ctrl_BYPASS_EN                          1
    #define   MSK32pll_ctrl_BYPASS_EN                             0x04000000

    #define     BA_pll_ctrl_CLKOUT_SE_GATING_EN                0x0007
    #define     B16pll_ctrl_CLKOUT_SE_GATING_EN                0x0006
    #define   LSb32pll_ctrl_CLKOUT_SE_GATING_EN                   27
    #define   LSb16pll_ctrl_CLKOUT_SE_GATING_EN                   11
    #define       bpll_ctrl_CLKOUT_SE_GATING_EN                1
    #define   MSK32pll_ctrl_CLKOUT_SE_GATING_EN                   0x08000000

    #define     BA_pll_ctrl_FBCLK_EXT_SEL                      0x0007
    #define     B16pll_ctrl_FBCLK_EXT_SEL                      0x0006
    #define   LSb32pll_ctrl_FBCLK_EXT_SEL                         28
    #define   LSb16pll_ctrl_FBCLK_EXT_SEL                         12
    #define       bpll_ctrl_FBCLK_EXT_SEL                      1
    #define   MSK32pll_ctrl_FBCLK_EXT_SEL                         0x10000000

    #define     RA_pll_ctrl2                                   0x0008

    #define     BA_pll_ctrl_FBCDLY                             0x0008
    #define     B16pll_ctrl_FBCDLY                             0x0008
    #define   LSb32pll_ctrl_FBCDLY                                0
    #define   LSb16pll_ctrl_FBCDLY                                0
    #define       bpll_ctrl_FBCDLY                             6
    #define   MSK32pll_ctrl_FBCDLY                                0x0000003F

    #define     BA_pll_ctrl_FD                                 0x0008
    #define     B16pll_ctrl_FD                                 0x0008
    #define   LSb32pll_ctrl_FD                                    6
    #define   LSb16pll_ctrl_FD                                    6
    #define       bpll_ctrl_FD                                 3
    #define   MSK32pll_ctrl_FD                                    0x000001C0

    #define     BA_pll_ctrl_INTPI                              0x0009
    #define     B16pll_ctrl_INTPI                              0x0008
    #define   LSb32pll_ctrl_INTPI                                 9
    #define   LSb16pll_ctrl_INTPI                                 9
    #define       bpll_ctrl_INTPI                              4
    #define   MSK32pll_ctrl_INTPI                                 0x00001E00

    #define     BA_pll_ctrl_INTPR                              0x0009
    #define     B16pll_ctrl_INTPR                              0x0008
    #define   LSb32pll_ctrl_INTPR                                 13
    #define   LSb16pll_ctrl_INTPR                                 13
    #define       bpll_ctrl_INTPR                              3
    #define   MSK32pll_ctrl_INTPR                                 0x0000E000

    #define     BA_pll_ctrl_PI_EN                              0x000A
    #define     B16pll_ctrl_PI_EN                              0x000A
    #define   LSb32pll_ctrl_PI_EN                                 16
    #define   LSb16pll_ctrl_PI_EN                                 0
    #define       bpll_ctrl_PI_EN                              1
    #define   MSK32pll_ctrl_PI_EN                                 0x00010000

    #define     BA_pll_ctrl_PI_LOOP_MODE                       0x000A
    #define     B16pll_ctrl_PI_LOOP_MODE                       0x000A
    #define   LSb32pll_ctrl_PI_LOOP_MODE                          17
    #define   LSb16pll_ctrl_PI_LOOP_MODE                          1
    #define       bpll_ctrl_PI_LOOP_MODE                       1
    #define   MSK32pll_ctrl_PI_LOOP_MODE                          0x00020000

    #define     BA_pll_ctrl_SSC_CLK_EN                         0x000A
    #define     B16pll_ctrl_SSC_CLK_EN                         0x000A
    #define   LSb32pll_ctrl_SSC_CLK_EN                            18
    #define   LSb16pll_ctrl_SSC_CLK_EN                            2
    #define       bpll_ctrl_SSC_CLK_EN                         1
    #define   MSK32pll_ctrl_SSC_CLK_EN                            0x00040000

    #define     BA_pll_ctrl_CLK_DET_EN                         0x000A
    #define     B16pll_ctrl_CLK_DET_EN                         0x000A
    #define   LSb32pll_ctrl_CLK_DET_EN                            19
    #define   LSb16pll_ctrl_CLK_DET_EN                            3
    #define       bpll_ctrl_CLK_DET_EN                         1
    #define   MSK32pll_ctrl_CLK_DET_EN                            0x00080000

    #define     BA_pll_ctrl_RESET_PI                           0x000A
    #define     B16pll_ctrl_RESET_PI                           0x000A
    #define   LSb32pll_ctrl_RESET_PI                              20
    #define   LSb16pll_ctrl_RESET_PI                              4
    #define       bpll_ctrl_RESET_PI                           1
    #define   MSK32pll_ctrl_RESET_PI                              0x00100000

    #define     BA_pll_ctrl_FREQ_OFFSET_EN                     0x000A
    #define     B16pll_ctrl_FREQ_OFFSET_EN                     0x000A
    #define   LSb32pll_ctrl_FREQ_OFFSET_EN                        21
    #define   LSb16pll_ctrl_FREQ_OFFSET_EN                        5
    #define       bpll_ctrl_FREQ_OFFSET_EN                     1
    #define   MSK32pll_ctrl_FREQ_OFFSET_EN                        0x00200000

    #define     RA_pll_ctrl3                                   0x000C

    #define     BA_pll_ctrl_FREQ_OFFSET                        0x000C
    #define     B16pll_ctrl_FREQ_OFFSET                        0x000C
    #define   LSb32pll_ctrl_FREQ_OFFSET                           0
    #define   LSb16pll_ctrl_FREQ_OFFSET                           0
    #define       bpll_ctrl_FREQ_OFFSET                        17
    #define   MSK32pll_ctrl_FREQ_OFFSET                           0x0001FFFF

    #define     BA_pll_ctrl_FREQ_OFFSET_MODE_SEL               0x000E
    #define     B16pll_ctrl_FREQ_OFFSET_MODE_SEL               0x000E
    #define   LSb32pll_ctrl_FREQ_OFFSET_MODE_SEL                  17
    #define   LSb16pll_ctrl_FREQ_OFFSET_MODE_SEL                  1
    #define       bpll_ctrl_FREQ_OFFSET_MODE_SEL               1
    #define   MSK32pll_ctrl_FREQ_OFFSET_MODE_SEL                  0x00020000

    #define     BA_pll_ctrl_FREQ_OFFSET_VALID                  0x000E
    #define     B16pll_ctrl_FREQ_OFFSET_VALID                  0x000E
    #define   LSb32pll_ctrl_FREQ_OFFSET_VALID                     18
    #define   LSb16pll_ctrl_FREQ_OFFSET_VALID                     2
    #define       bpll_ctrl_FREQ_OFFSET_VALID                  1
    #define   MSK32pll_ctrl_FREQ_OFFSET_VALID                     0x00040000

    #define     BA_pll_ctrl_SSC_MODE                           0x000E
    #define     B16pll_ctrl_SSC_MODE                           0x000E
    #define   LSb32pll_ctrl_SSC_MODE                              19
    #define   LSb16pll_ctrl_SSC_MODE                              3
    #define       bpll_ctrl_SSC_MODE                           1
    #define   MSK32pll_ctrl_SSC_MODE                              0x00080000

    #define     RA_pll_ctrl4                                   0x0010

    #define     BA_pll_ctrl_SSC_FREQ_DIV                       0x0010
    #define     B16pll_ctrl_SSC_FREQ_DIV                       0x0010
    #define   LSb32pll_ctrl_SSC_FREQ_DIV                          0
    #define   LSb16pll_ctrl_SSC_FREQ_DIV                          0
    #define       bpll_ctrl_SSC_FREQ_DIV                       16
    #define   MSK32pll_ctrl_SSC_FREQ_DIV                          0x0000FFFF

    #define     BA_pll_ctrl_SSC_RNGE                           0x0012
    #define     B16pll_ctrl_SSC_RNGE                           0x0012
    #define   LSb32pll_ctrl_SSC_RNGE                              16
    #define   LSb16pll_ctrl_SSC_RNGE                              0
    #define       bpll_ctrl_SSC_RNGE                           11
    #define   MSK32pll_ctrl_SSC_RNGE                              0x07FF0000

    #define     BA_pll_ctrl_RESET_SSC                          0x0013
    #define     B16pll_ctrl_RESET_SSC                          0x0012
    #define   LSb32pll_ctrl_RESET_SSC                             27
    #define   LSb16pll_ctrl_RESET_SSC                             11
    #define       bpll_ctrl_RESET_SSC                          1
    #define   MSK32pll_ctrl_RESET_SSC                             0x08000000

    #define     BA_pll_ctrl_TEST_ANA                           0x0013
    #define     B16pll_ctrl_TEST_ANA                           0x0012
    #define   LSb32pll_ctrl_TEST_ANA                              28
    #define   LSb16pll_ctrl_TEST_ANA                              12
    #define       bpll_ctrl_TEST_ANA                           4
    #define   MSK32pll_ctrl_TEST_ANA                              0xF0000000

    #define     RA_pll_ctrl5                                   0x0014

    #define     BA_pll_ctrl_RESERVE_IN                         0x0014
    #define     B16pll_ctrl_RESERVE_IN                         0x0014
    #define   LSb32pll_ctrl_RESERVE_IN                            0
    #define   LSb16pll_ctrl_RESERVE_IN                            0
    #define       bpll_ctrl_RESERVE_IN                         8
    #define   MSK32pll_ctrl_RESERVE_IN                            0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_pll_status                                  0x0018

    #define     BA_pll_status_PLL_LOCK                         0x0018
    #define     B16pll_status_PLL_LOCK                         0x0018
    #define   LSb32pll_status_PLL_LOCK                            0
    #define   LSb16pll_status_PLL_LOCK                            0
    #define       bpll_status_PLL_LOCK                         1
    #define   MSK32pll_status_PLL_LOCK                            0x00000001

    #define     BA_pll_status_RESERVE_OUT                      0x0018
    #define     B16pll_status_RESERVE_OUT                      0x0018
    #define   LSb32pll_status_RESERVE_OUT                         1
    #define   LSb16pll_status_RESERVE_OUT                         1
    #define       bpll_status_RESERVE_OUT                      8
    #define   MSK32pll_status_RESERVE_OUT                         0x000001FE
    ///////////////////////////////////////////////////////////

    typedef struct SIE_pll {
    ///////////////////////////////////////////////////////////
    #define   GET32pll_ctrl_PU(r32)                            _BFGET_(r32, 0, 0)
    #define   SET32pll_ctrl_PU(r32,v)                          _BFSET_(r32, 0, 0,v)
    #define   GET16pll_ctrl_PU(r16)                            _BFGET_(r16, 0, 0)
    #define   SET16pll_ctrl_PU(r16,v)                          _BFSET_(r16, 0, 0,v)

    #define   GET32pll_ctrl_RESET(r32)                         _BFGET_(r32, 1, 1)
    #define   SET32pll_ctrl_RESET(r32,v)                       _BFSET_(r32, 1, 1,v)
    #define   GET16pll_ctrl_RESET(r16)                         _BFGET_(r16, 1, 1)
    #define   SET16pll_ctrl_RESET(r16,v)                       _BFSET_(r16, 1, 1,v)

    #define   GET32pll_ctrl_AVDD1815_SEL(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32pll_ctrl_AVDD1815_SEL(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16pll_ctrl_AVDD1815_SEL(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16pll_ctrl_AVDD1815_SEL(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32pll_ctrl_REFDIV(r32)                        _BFGET_(r32,11, 3)
    #define   SET32pll_ctrl_REFDIV(r32,v)                      _BFSET_(r32,11, 3,v)
    #define   GET16pll_ctrl_REFDIV(r16)                        _BFGET_(r16,11, 3)
    #define   SET16pll_ctrl_REFDIV(r16,v)                      _BFSET_(r16,11, 3,v)

    #define   GET32pll_ctrl_FBDIV(r32)                         _BFGET_(r32,20,12)
    #define   SET32pll_ctrl_FBDIV(r32,v)                       _BFSET_(r32,20,12,v)

    #define   GET32pll_ctrl_VDDM(r32)                          _BFGET_(r32,22,21)
    #define   SET32pll_ctrl_VDDM(r32,v)                        _BFSET_(r32,22,21,v)
    #define   GET16pll_ctrl_VDDM(r16)                          _BFGET_(r16, 6, 5)
    #define   SET16pll_ctrl_VDDM(r16,v)                        _BFSET_(r16, 6, 5,v)

    #define   GET32pll_ctrl_VDDL(r32)                          _BFGET_(r32,25,23)
    #define   SET32pll_ctrl_VDDL(r32,v)                        _BFSET_(r32,25,23,v)
    #define   GET16pll_ctrl_VDDL(r16)                          _BFGET_(r16, 9, 7)
    #define   SET16pll_ctrl_VDDL(r16,v)                        _BFSET_(r16, 9, 7,v)

    #define   GET32pll_ctrl_ICP(r32)                           _BFGET_(r32,29,26)
    #define   SET32pll_ctrl_ICP(r32,v)                         _BFSET_(r32,29,26,v)
    #define   GET16pll_ctrl_ICP(r16)                           _BFGET_(r16,13,10)
    #define   SET16pll_ctrl_ICP(r16,v)                         _BFSET_(r16,13,10,v)

    #define   GET32pll_ctrl_PLL_BW_REL(r32)                    _BFGET_(r32,30,30)
    #define   SET32pll_ctrl_PLL_BW_REL(r32,v)                  _BFSET_(r32,30,30,v)
    #define   GET16pll_ctrl_PLL_BW_REL(r16)                    _BFGET_(r16,14,14)
    #define   SET16pll_ctrl_PLL_BW_REL(r16,v)                  _BFSET_(r16,14,14,v)

    #define     w32pll_ctrl                                    {\
            UNSG32 uctrl_PU                                    :  1;\
            UNSG32 uctrl_RESET                                 :  1;\
            UNSG32 uctrl_AVDD1815_SEL                          :  1;\
            UNSG32 uctrl_REFDIV                                :  9;\
            UNSG32 uctrl_FBDIV                                 :  9;\
            UNSG32 uctrl_VDDM                                  :  2;\
            UNSG32 uctrl_VDDL                                  :  3;\
            UNSG32 uctrl_ICP                                   :  4;\
            UNSG32 uctrl_PLL_BW_REL                            :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32pll_ctrl;
            struct w32pll_ctrl;
          };
    #define   GET32pll_ctrl_KVCO(r32)                          _BFGET_(r32, 3, 0)
    #define   SET32pll_ctrl_KVCO(r32,v)                        _BFSET_(r32, 3, 0,v)
    #define   GET16pll_ctrl_KVCO(r16)                          _BFGET_(r16, 3, 0)
    #define   SET16pll_ctrl_KVCO(r16,v)                        _BFSET_(r16, 3, 0,v)

    #define   GET32pll_ctrl_CTUNE(r32)                         _BFGET_(r32, 5, 4)
    #define   SET32pll_ctrl_CTUNE(r32,v)                       _BFSET_(r32, 5, 4,v)
    #define   GET16pll_ctrl_CTUNE(r16)                         _BFGET_(r16, 5, 4)
    #define   SET16pll_ctrl_CTUNE(r16,v)                       _BFSET_(r16, 5, 4,v)

    #define   GET32pll_ctrl_CLKOUT_DIFF_DIV_SEL(r32)           _BFGET_(r32,14, 6)
    #define   SET32pll_ctrl_CLKOUT_DIFF_DIV_SEL(r32,v)         _BFSET_(r32,14, 6,v)
    #define   GET16pll_ctrl_CLKOUT_DIFF_DIV_SEL(r16)           _BFGET_(r16,14, 6)
    #define   SET16pll_ctrl_CLKOUT_DIFF_DIV_SEL(r16,v)         _BFSET_(r16,14, 6,v)

    #define   GET32pll_ctrl_CLKOUT_SE_DIV_SEL(r32)             _BFGET_(r32,23,15)
    #define   SET32pll_ctrl_CLKOUT_SE_DIV_SEL(r32,v)           _BFSET_(r32,23,15,v)

    #define   GET32pll_ctrl_CLKOUT_SOURCE_SEL(r32)             _BFGET_(r32,24,24)
    #define   SET32pll_ctrl_CLKOUT_SOURCE_SEL(r32,v)           _BFSET_(r32,24,24,v)
    #define   GET16pll_ctrl_CLKOUT_SOURCE_SEL(r16)             _BFGET_(r16, 8, 8)
    #define   SET16pll_ctrl_CLKOUT_SOURCE_SEL(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32pll_ctrl_CLKOUT_DIFF_EN(r32)                _BFGET_(r32,25,25)
    #define   SET32pll_ctrl_CLKOUT_DIFF_EN(r32,v)              _BFSET_(r32,25,25,v)
    #define   GET16pll_ctrl_CLKOUT_DIFF_EN(r16)                _BFGET_(r16, 9, 9)
    #define   SET16pll_ctrl_CLKOUT_DIFF_EN(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32pll_ctrl_BYPASS_EN(r32)                     _BFGET_(r32,26,26)
    #define   SET32pll_ctrl_BYPASS_EN(r32,v)                   _BFSET_(r32,26,26,v)
    #define   GET16pll_ctrl_BYPASS_EN(r16)                     _BFGET_(r16,10,10)
    #define   SET16pll_ctrl_BYPASS_EN(r16,v)                   _BFSET_(r16,10,10,v)

    #define   GET32pll_ctrl_CLKOUT_SE_GATING_EN(r32)           _BFGET_(r32,27,27)
    #define   SET32pll_ctrl_CLKOUT_SE_GATING_EN(r32,v)         _BFSET_(r32,27,27,v)
    #define   GET16pll_ctrl_CLKOUT_SE_GATING_EN(r16)           _BFGET_(r16,11,11)
    #define   SET16pll_ctrl_CLKOUT_SE_GATING_EN(r16,v)         _BFSET_(r16,11,11,v)

    #define   GET32pll_ctrl_FBCLK_EXT_SEL(r32)                 _BFGET_(r32,28,28)
    #define   SET32pll_ctrl_FBCLK_EXT_SEL(r32,v)               _BFSET_(r32,28,28,v)
    #define   GET16pll_ctrl_FBCLK_EXT_SEL(r16)                 _BFGET_(r16,12,12)
    #define   SET16pll_ctrl_FBCLK_EXT_SEL(r16,v)               _BFSET_(r16,12,12,v)

    #define     w32pll_ctrl1                                   {\
            UNSG32 uctrl_KVCO                                  :  4;\
            UNSG32 uctrl_CTUNE                                 :  2;\
            UNSG32 uctrl_CLKOUT_DIFF_DIV_SEL                   :  9;\
            UNSG32 uctrl_CLKOUT_SE_DIV_SEL                     :  9;\
            UNSG32 uctrl_CLKOUT_SOURCE_SEL                     :  1;\
            UNSG32 uctrl_CLKOUT_DIFF_EN                        :  1;\
            UNSG32 uctrl_BYPASS_EN                             :  1;\
            UNSG32 uctrl_CLKOUT_SE_GATING_EN                   :  1;\
            UNSG32 uctrl_FBCLK_EXT_SEL                         :  1;\
            UNSG32 RSVDx4_b29                                  :  3;\
          }
    union { UNSG32 u32pll_ctrl1;
            struct w32pll_ctrl1;
          };
    #define   GET32pll_ctrl_FBCDLY(r32)                        _BFGET_(r32, 5, 0)
    #define   SET32pll_ctrl_FBCDLY(r32,v)                      _BFSET_(r32, 5, 0,v)
    #define   GET16pll_ctrl_FBCDLY(r16)                        _BFGET_(r16, 5, 0)
    #define   SET16pll_ctrl_FBCDLY(r16,v)                      _BFSET_(r16, 5, 0,v)

    #define   GET32pll_ctrl_FD(r32)                            _BFGET_(r32, 8, 6)
    #define   SET32pll_ctrl_FD(r32,v)                          _BFSET_(r32, 8, 6,v)
    #define   GET16pll_ctrl_FD(r16)                            _BFGET_(r16, 8, 6)
    #define   SET16pll_ctrl_FD(r16,v)                          _BFSET_(r16, 8, 6,v)

    #define   GET32pll_ctrl_INTPI(r32)                         _BFGET_(r32,12, 9)
    #define   SET32pll_ctrl_INTPI(r32,v)                       _BFSET_(r32,12, 9,v)
    #define   GET16pll_ctrl_INTPI(r16)                         _BFGET_(r16,12, 9)
    #define   SET16pll_ctrl_INTPI(r16,v)                       _BFSET_(r16,12, 9,v)

    #define   GET32pll_ctrl_INTPR(r32)                         _BFGET_(r32,15,13)
    #define   SET32pll_ctrl_INTPR(r32,v)                       _BFSET_(r32,15,13,v)
    #define   GET16pll_ctrl_INTPR(r16)                         _BFGET_(r16,15,13)
    #define   SET16pll_ctrl_INTPR(r16,v)                       _BFSET_(r16,15,13,v)

    #define   GET32pll_ctrl_PI_EN(r32)                         _BFGET_(r32,16,16)
    #define   SET32pll_ctrl_PI_EN(r32,v)                       _BFSET_(r32,16,16,v)
    #define   GET16pll_ctrl_PI_EN(r16)                         _BFGET_(r16, 0, 0)
    #define   SET16pll_ctrl_PI_EN(r16,v)                       _BFSET_(r16, 0, 0,v)

    #define   GET32pll_ctrl_PI_LOOP_MODE(r32)                  _BFGET_(r32,17,17)
    #define   SET32pll_ctrl_PI_LOOP_MODE(r32,v)                _BFSET_(r32,17,17,v)
    #define   GET16pll_ctrl_PI_LOOP_MODE(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16pll_ctrl_PI_LOOP_MODE(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32pll_ctrl_SSC_CLK_EN(r32)                    _BFGET_(r32,18,18)
    #define   SET32pll_ctrl_SSC_CLK_EN(r32,v)                  _BFSET_(r32,18,18,v)
    #define   GET16pll_ctrl_SSC_CLK_EN(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16pll_ctrl_SSC_CLK_EN(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32pll_ctrl_CLK_DET_EN(r32)                    _BFGET_(r32,19,19)
    #define   SET32pll_ctrl_CLK_DET_EN(r32,v)                  _BFSET_(r32,19,19,v)
    #define   GET16pll_ctrl_CLK_DET_EN(r16)                    _BFGET_(r16, 3, 3)
    #define   SET16pll_ctrl_CLK_DET_EN(r16,v)                  _BFSET_(r16, 3, 3,v)

    #define   GET32pll_ctrl_RESET_PI(r32)                      _BFGET_(r32,20,20)
    #define   SET32pll_ctrl_RESET_PI(r32,v)                    _BFSET_(r32,20,20,v)
    #define   GET16pll_ctrl_RESET_PI(r16)                      _BFGET_(r16, 4, 4)
    #define   SET16pll_ctrl_RESET_PI(r16,v)                    _BFSET_(r16, 4, 4,v)

    #define   GET32pll_ctrl_FREQ_OFFSET_EN(r32)                _BFGET_(r32,21,21)
    #define   SET32pll_ctrl_FREQ_OFFSET_EN(r32,v)              _BFSET_(r32,21,21,v)
    #define   GET16pll_ctrl_FREQ_OFFSET_EN(r16)                _BFGET_(r16, 5, 5)
    #define   SET16pll_ctrl_FREQ_OFFSET_EN(r16,v)              _BFSET_(r16, 5, 5,v)

    #define     w32pll_ctrl2                                   {\
            UNSG32 uctrl_FBCDLY                                :  6;\
            UNSG32 uctrl_FD                                    :  3;\
            UNSG32 uctrl_INTPI                                 :  4;\
            UNSG32 uctrl_INTPR                                 :  3;\
            UNSG32 uctrl_PI_EN                                 :  1;\
            UNSG32 uctrl_PI_LOOP_MODE                          :  1;\
            UNSG32 uctrl_SSC_CLK_EN                            :  1;\
            UNSG32 uctrl_CLK_DET_EN                            :  1;\
            UNSG32 uctrl_RESET_PI                              :  1;\
            UNSG32 uctrl_FREQ_OFFSET_EN                        :  1;\
            UNSG32 RSVDx8_b22                                  : 10;\
          }
    union { UNSG32 u32pll_ctrl2;
            struct w32pll_ctrl2;
          };
    #define   GET32pll_ctrl_FREQ_OFFSET(r32)                   _BFGET_(r32,16, 0)
    #define   SET32pll_ctrl_FREQ_OFFSET(r32,v)                 _BFSET_(r32,16, 0,v)

    #define   GET32pll_ctrl_FREQ_OFFSET_MODE_SEL(r32)          _BFGET_(r32,17,17)
    #define   SET32pll_ctrl_FREQ_OFFSET_MODE_SEL(r32,v)        _BFSET_(r32,17,17,v)
    #define   GET16pll_ctrl_FREQ_OFFSET_MODE_SEL(r16)          _BFGET_(r16, 1, 1)
    #define   SET16pll_ctrl_FREQ_OFFSET_MODE_SEL(r16,v)        _BFSET_(r16, 1, 1,v)

    #define   GET32pll_ctrl_FREQ_OFFSET_VALID(r32)             _BFGET_(r32,18,18)
    #define   SET32pll_ctrl_FREQ_OFFSET_VALID(r32,v)           _BFSET_(r32,18,18,v)
    #define   GET16pll_ctrl_FREQ_OFFSET_VALID(r16)             _BFGET_(r16, 2, 2)
    #define   SET16pll_ctrl_FREQ_OFFSET_VALID(r16,v)           _BFSET_(r16, 2, 2,v)

    #define   GET32pll_ctrl_SSC_MODE(r32)                      _BFGET_(r32,19,19)
    #define   SET32pll_ctrl_SSC_MODE(r32,v)                    _BFSET_(r32,19,19,v)
    #define   GET16pll_ctrl_SSC_MODE(r16)                      _BFGET_(r16, 3, 3)
    #define   SET16pll_ctrl_SSC_MODE(r16,v)                    _BFSET_(r16, 3, 3,v)

    #define     w32pll_ctrl3                                   {\
            UNSG32 uctrl_FREQ_OFFSET                           : 17;\
            UNSG32 uctrl_FREQ_OFFSET_MODE_SEL                  :  1;\
            UNSG32 uctrl_FREQ_OFFSET_VALID                     :  1;\
            UNSG32 uctrl_SSC_MODE                              :  1;\
            UNSG32 RSVDxC_b20                                  : 12;\
          }
    union { UNSG32 u32pll_ctrl3;
            struct w32pll_ctrl3;
          };
    #define   GET32pll_ctrl_SSC_FREQ_DIV(r32)                  _BFGET_(r32,15, 0)
    #define   SET32pll_ctrl_SSC_FREQ_DIV(r32,v)                _BFSET_(r32,15, 0,v)
    #define   GET16pll_ctrl_SSC_FREQ_DIV(r16)                  _BFGET_(r16,15, 0)
    #define   SET16pll_ctrl_SSC_FREQ_DIV(r16,v)                _BFSET_(r16,15, 0,v)

    #define   GET32pll_ctrl_SSC_RNGE(r32)                      _BFGET_(r32,26,16)
    #define   SET32pll_ctrl_SSC_RNGE(r32,v)                    _BFSET_(r32,26,16,v)
    #define   GET16pll_ctrl_SSC_RNGE(r16)                      _BFGET_(r16,10, 0)
    #define   SET16pll_ctrl_SSC_RNGE(r16,v)                    _BFSET_(r16,10, 0,v)

    #define   GET32pll_ctrl_RESET_SSC(r32)                     _BFGET_(r32,27,27)
    #define   SET32pll_ctrl_RESET_SSC(r32,v)                   _BFSET_(r32,27,27,v)
    #define   GET16pll_ctrl_RESET_SSC(r16)                     _BFGET_(r16,11,11)
    #define   SET16pll_ctrl_RESET_SSC(r16,v)                   _BFSET_(r16,11,11,v)

    #define   GET32pll_ctrl_TEST_ANA(r32)                      _BFGET_(r32,31,28)
    #define   SET32pll_ctrl_TEST_ANA(r32,v)                    _BFSET_(r32,31,28,v)
    #define   GET16pll_ctrl_TEST_ANA(r16)                      _BFGET_(r16,15,12)
    #define   SET16pll_ctrl_TEST_ANA(r16,v)                    _BFSET_(r16,15,12,v)

    #define     w32pll_ctrl4                                   {\
            UNSG32 uctrl_SSC_FREQ_DIV                          : 16;\
            UNSG32 uctrl_SSC_RNGE                              : 11;\
            UNSG32 uctrl_RESET_SSC                             :  1;\
            UNSG32 uctrl_TEST_ANA                              :  4;\
          }
    union { UNSG32 u32pll_ctrl4;
            struct w32pll_ctrl4;
          };
    #define   GET32pll_ctrl_RESERVE_IN(r32)                    _BFGET_(r32, 7, 0)
    #define   SET32pll_ctrl_RESERVE_IN(r32,v)                  _BFSET_(r32, 7, 0,v)
    #define   GET16pll_ctrl_RESERVE_IN(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16pll_ctrl_RESERVE_IN(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define     w32pll_ctrl5                                   {\
            UNSG32 uctrl_RESERVE_IN                            :  8;\
            UNSG32 RSVDx14_b8                                  : 24;\
          }
    union { UNSG32 u32pll_ctrl5;
            struct w32pll_ctrl5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32pll_status_PLL_LOCK(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32pll_status_PLL_LOCK(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16pll_status_PLL_LOCK(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16pll_status_PLL_LOCK(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32pll_status_RESERVE_OUT(r32)                 _BFGET_(r32, 8, 1)
    #define   SET32pll_status_RESERVE_OUT(r32,v)               _BFSET_(r32, 8, 1,v)
    #define   GET16pll_status_RESERVE_OUT(r16)                 _BFGET_(r16, 8, 1)
    #define   SET16pll_status_RESERVE_OUT(r16,v)               _BFSET_(r16, 8, 1,v)

    #define     w32pll_status                                  {\
            UNSG32 ustatus_PLL_LOCK                            :  1;\
            UNSG32 ustatus_RESERVE_OUT                         :  8;\
            UNSG32 RSVDx18_b9                                  : 23;\
          }
    union { UNSG32 u32pll_status;
            struct w32pll_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_pll;

    typedef union  T32pll_ctrl
          { UNSG32 u32;
            struct w32pll_ctrl;
                 } T32pll_ctrl;
    typedef union  T32pll_ctrl1
          { UNSG32 u32;
            struct w32pll_ctrl1;
                 } T32pll_ctrl1;
    typedef union  T32pll_ctrl2
          { UNSG32 u32;
            struct w32pll_ctrl2;
                 } T32pll_ctrl2;
    typedef union  T32pll_ctrl3
          { UNSG32 u32;
            struct w32pll_ctrl3;
                 } T32pll_ctrl3;
    typedef union  T32pll_ctrl4
          { UNSG32 u32;
            struct w32pll_ctrl4;
                 } T32pll_ctrl4;
    typedef union  T32pll_ctrl5
          { UNSG32 u32;
            struct w32pll_ctrl5;
                 } T32pll_ctrl5;
    typedef union  T32pll_status
          { UNSG32 u32;
            struct w32pll_status;
                 } T32pll_status;
    ///////////////////////////////////////////////////////////

    typedef union  Tpll_ctrl
          { UNSG32 u32[6];
            struct {
            struct w32pll_ctrl;
            struct w32pll_ctrl1;
            struct w32pll_ctrl2;
            struct w32pll_ctrl3;
            struct w32pll_ctrl4;
            struct w32pll_ctrl5;
                   };
                 } Tpll_ctrl;
    typedef union  Tpll_status
          { UNSG32 u32[1];
            struct {
            struct w32pll_status;
                   };
                 } Tpll_status;

    ///////////////////////////////////////////////////////////
     SIGN32 pll_drvrd(SIE_pll *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 pll_drvwr(SIE_pll *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void pll_reset(SIE_pll *p);
     SIGN32 pll_cmp  (SIE_pll *p, SIE_pll *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define pll_check(p,pie,pfx,hLOG) pll_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define pll_print(p,    pfx,hLOG) pll_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: pll
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: sspll.h
////////////////////////////////////////////////////////////

