//////
/// don't edit! auto-generated by docc: soc.h
////////////////////////////////////////////////////////////
#ifndef soc_h
#define soc_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE streamCtl               biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               ###
///               * The base address of the frame
///               ###
///               %unsigned 32 baseAddr                  0x0
///     @ 0x00004                      (P)
///               ###
///               * The width of the frame
///               ###
///               %unsigned 16 width                     0x0
///               %%        16         # Stuffing bits...
///     @ 0x00008                      (P)
///               ###
///               * The stride of the DDR image. That is the distance between on pixel and the pixel directly below it.
///               ###
///               %unsigned 16 stride                    0x0
///               %%        16         # Stuffing bits...
///     @ 0x0000C                      (P)
///               ###
///               * The height of the frame
///               ###
///               %unsigned 16 height                    0x0
///               %%        16         # Stuffing bits...
///     @ 0x00010                      (P)
///               ###
///               * The intended value quantization parameters
///               ###
///               %unsigned 8  qp                        0x0
///               %%        24         # Stuffing bits...
///     @ 0x00014                      (P)
///               ###
///               * The target compression ratio
///               * Note that the MTR only supports bandwidth compression, but not memory footprint compression. We may support an optional hard compression ratio cap so we can reduce memory footprint as well.
///               ###
///               %unsigned 8  compressRatio             0x0
///               %%        24         # Stuffing bits...
///     @ 0x00018                      (P)
///               ###
///               * Compression scheme
///               * Note: Scheme C not supported in our current application
///               ###
///               %unsigned 3  scheme                    0x0
///                                    : A                         0x0
///                                    : B                         0x1
///                                    : C                         0x2
///                                    : D                         0x3
///                                    : E                         0x4
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:      99b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_streamCtl
#define h_streamCtl (){}

    #define     BA_streamCtl_baseAddr                          0x0000
    #define     B16streamCtl_baseAddr                          0x0000
    #define   LSb32streamCtl_baseAddr                             0
    #define   LSb16streamCtl_baseAddr                             0
    #define       bstreamCtl_baseAddr                          32
    #define   MSK32streamCtl_baseAddr                             0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    #define     BA_streamCtl_width                             0x0004
    #define     B16streamCtl_width                             0x0004
    #define   LSb32streamCtl_width                                0
    #define   LSb16streamCtl_width                                0
    #define       bstreamCtl_width                             16
    #define   MSK32streamCtl_width                                0x0000FFFF
    ///////////////////////////////////////////////////////////

    #define     BA_streamCtl_stride                            0x0008
    #define     B16streamCtl_stride                            0x0008
    #define   LSb32streamCtl_stride                               0
    #define   LSb16streamCtl_stride                               0
    #define       bstreamCtl_stride                            16
    #define   MSK32streamCtl_stride                               0x0000FFFF
    ///////////////////////////////////////////////////////////

    #define     BA_streamCtl_height                            0x000C
    #define     B16streamCtl_height                            0x000C
    #define   LSb32streamCtl_height                               0
    #define   LSb16streamCtl_height                               0
    #define       bstreamCtl_height                            16
    #define   MSK32streamCtl_height                               0x0000FFFF
    ///////////////////////////////////////////////////////////

    #define     BA_streamCtl_qp                                0x0010
    #define     B16streamCtl_qp                                0x0010
    #define   LSb32streamCtl_qp                                   0
    #define   LSb16streamCtl_qp                                   0
    #define       bstreamCtl_qp                                8
    #define   MSK32streamCtl_qp                                   0x000000FF
    ///////////////////////////////////////////////////////////

    #define     BA_streamCtl_compressRatio                     0x0014
    #define     B16streamCtl_compressRatio                     0x0014
    #define   LSb32streamCtl_compressRatio                        0
    #define   LSb16streamCtl_compressRatio                        0
    #define       bstreamCtl_compressRatio                     8
    #define   MSK32streamCtl_compressRatio                        0x000000FF
    ///////////////////////////////////////////////////////////

    #define     BA_streamCtl_scheme                            0x0018
    #define     B16streamCtl_scheme                            0x0018
    #define   LSb32streamCtl_scheme                               0
    #define   LSb16streamCtl_scheme                               0
    #define       bstreamCtl_scheme                            3
    #define   MSK32streamCtl_scheme                               0x00000007
    #define        streamCtl_scheme_A                                       0x0
    #define        streamCtl_scheme_B                                       0x1
    #define        streamCtl_scheme_C                                       0x2
    #define        streamCtl_scheme_D                                       0x3
    #define        streamCtl_scheme_E                                       0x4
    ///////////////////////////////////////////////////////////

    typedef struct SIE_streamCtl {
    ///////////////////////////////////////////////////////////
    #define   GET32streamCtl_baseAddr(r32)                     _BFGET_(r32,31, 0)
    #define   SET32streamCtl_baseAddr(r32,v)                   _BFSET_(r32,31, 0,v)

            UNSG32 u_baseAddr                                  : 32;
    ///////////////////////////////////////////////////////////
    #define   GET32streamCtl_width(r32)                        _BFGET_(r32,15, 0)
    #define   SET32streamCtl_width(r32,v)                      _BFSET_(r32,15, 0,v)
    #define   GET16streamCtl_width(r16)                        _BFGET_(r16,15, 0)
    #define   SET16streamCtl_width(r16,v)                      _BFSET_(r16,15, 0,v)

            UNSG32 u_width                                     : 16;
            UNSG32 RSVDx4_b16                                  : 16;
    ///////////////////////////////////////////////////////////
    #define   GET32streamCtl_stride(r32)                       _BFGET_(r32,15, 0)
    #define   SET32streamCtl_stride(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16streamCtl_stride(r16)                       _BFGET_(r16,15, 0)
    #define   SET16streamCtl_stride(r16,v)                     _BFSET_(r16,15, 0,v)

            UNSG32 u_stride                                    : 16;
            UNSG32 RSVDx8_b16                                  : 16;
    ///////////////////////////////////////////////////////////
    #define   GET32streamCtl_height(r32)                       _BFGET_(r32,15, 0)
    #define   SET32streamCtl_height(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16streamCtl_height(r16)                       _BFGET_(r16,15, 0)
    #define   SET16streamCtl_height(r16,v)                     _BFSET_(r16,15, 0,v)

            UNSG32 u_height                                    : 16;
            UNSG32 RSVDxC_b16                                  : 16;
    ///////////////////////////////////////////////////////////
    #define   GET32streamCtl_qp(r32)                           _BFGET_(r32, 7, 0)
    #define   SET32streamCtl_qp(r32,v)                         _BFSET_(r32, 7, 0,v)
    #define   GET16streamCtl_qp(r16)                           _BFGET_(r16, 7, 0)
    #define   SET16streamCtl_qp(r16,v)                         _BFSET_(r16, 7, 0,v)

            UNSG32 u_qp                                        :  8;
            UNSG32 RSVDx10_b8                                  : 24;
    ///////////////////////////////////////////////////////////
    #define   GET32streamCtl_compressRatio(r32)                _BFGET_(r32, 7, 0)
    #define   SET32streamCtl_compressRatio(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16streamCtl_compressRatio(r16)                _BFGET_(r16, 7, 0)
    #define   SET16streamCtl_compressRatio(r16,v)              _BFSET_(r16, 7, 0,v)

            UNSG32 u_compressRatio                             :  8;
            UNSG32 RSVDx14_b8                                  : 24;
    ///////////////////////////////////////////////////////////
    #define   GET32streamCtl_scheme(r32)                       _BFGET_(r32, 2, 0)
    #define   SET32streamCtl_scheme(r32,v)                     _BFSET_(r32, 2, 0,v)
    #define   GET16streamCtl_scheme(r16)                       _BFGET_(r16, 2, 0)
    #define   SET16streamCtl_scheme(r16,v)                     _BFSET_(r16, 2, 0,v)

            UNSG32 u_scheme                                    :  3;
            UNSG32 RSVDx18_b3                                  : 29;
    ///////////////////////////////////////////////////////////
    } SIE_streamCtl;

    ///////////////////////////////////////////////////////////
     SIGN32 streamCtl_drvrd(SIE_streamCtl *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 streamCtl_drvwr(SIE_streamCtl *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void streamCtl_reset(SIE_streamCtl *p);
     SIGN32 streamCtl_cmp  (SIE_streamCtl *p, SIE_streamCtl *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define streamCtl_check(p,pie,pfx,hLOG) streamCtl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define streamCtl_print(p,    pfx,hLOG) streamCtl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: streamCtl
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE zOrderCtl               biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 baseAddr             (P)
///               ###
///               * The base address of the Z-order rectangle
///               ###
///               %unsigned 32 val                       0x0
///                                    ###
///                                    * Must be 128-byte (AXI burst x16) aligned. Lower 7-bits will be ignored.
///                                    ###
///     @ 0x00004 width                (P)
///               ###
///               * The width of the Z-order rectangle
///               ###
///               %unsigned 13 val                       0x0
///                                    ###
///                                    * Max supported width is 2048 pixels for 32-bit pixels, 4096 for 16-bit pixels, and 8192 for 8-bit pixels.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00008 stride               (P)
///               ###
///               * The stride of the DDR image. That is the distance between one pixel and the pixel directly below it.
///               ###
///               %unsigned 16 val                       0x0
///                                    ###
///                                    * Must be 128-byte (AXI burst x16) aligned. Lower 7-bits will be ignored. Max supported stride is 16k pixels for 32-bit pixels, 32k pixels for 16-bit pixels, and 64k for 8-bit pixels.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0000C height               (P)
///               ###
///               * The height of the Z-order rectangle
///               ###
///               %unsigned 11 val                       0x0
///                                    ###
///                                    * Max supported height is 2048 pixels.
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00010 active               (P)
///               ###
///               * Bit indicating whether the current rectangle filtering is active
///               ###
///               %unsigned 1  val                       0x0
///               %%        31         # Stuffing bits...
///     @ 0x00014 visible              (P)
///               ###
///               * Bit indicating whether the current region is visible
///               ###
///               %unsigned 1  val                       0x0
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:      74b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_zOrderCtl
#define h_zOrderCtl (){}

    #define     RA_zOrderCtl_baseAddr                          0x0000

    #define     BA_zOrderCtl_baseAddr_val                      0x0000
    #define     B16zOrderCtl_baseAddr_val                      0x0000
    #define   LSb32zOrderCtl_baseAddr_val                         0
    #define   LSb16zOrderCtl_baseAddr_val                         0
    #define       bzOrderCtl_baseAddr_val                      32
    #define   MSK32zOrderCtl_baseAddr_val                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_zOrderCtl_width                             0x0004

    #define     BA_zOrderCtl_width_val                         0x0004
    #define     B16zOrderCtl_width_val                         0x0004
    #define   LSb32zOrderCtl_width_val                            0
    #define   LSb16zOrderCtl_width_val                            0
    #define       bzOrderCtl_width_val                         13
    #define   MSK32zOrderCtl_width_val                            0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_zOrderCtl_stride                            0x0008

    #define     BA_zOrderCtl_stride_val                        0x0008
    #define     B16zOrderCtl_stride_val                        0x0008
    #define   LSb32zOrderCtl_stride_val                           0
    #define   LSb16zOrderCtl_stride_val                           0
    #define       bzOrderCtl_stride_val                        16
    #define   MSK32zOrderCtl_stride_val                           0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_zOrderCtl_height                            0x000C

    #define     BA_zOrderCtl_height_val                        0x000C
    #define     B16zOrderCtl_height_val                        0x000C
    #define   LSb32zOrderCtl_height_val                           0
    #define   LSb16zOrderCtl_height_val                           0
    #define       bzOrderCtl_height_val                        11
    #define   MSK32zOrderCtl_height_val                           0x000007FF
    ///////////////////////////////////////////////////////////
    #define     RA_zOrderCtl_active                            0x0010

    #define     BA_zOrderCtl_active_val                        0x0010
    #define     B16zOrderCtl_active_val                        0x0010
    #define   LSb32zOrderCtl_active_val                           0
    #define   LSb16zOrderCtl_active_val                           0
    #define       bzOrderCtl_active_val                        1
    #define   MSK32zOrderCtl_active_val                           0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_zOrderCtl_visible                           0x0014

    #define     BA_zOrderCtl_visible_val                       0x0014
    #define     B16zOrderCtl_visible_val                       0x0014
    #define   LSb32zOrderCtl_visible_val                          0
    #define   LSb16zOrderCtl_visible_val                          0
    #define       bzOrderCtl_visible_val                       1
    #define   MSK32zOrderCtl_visible_val                          0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_zOrderCtl {
    ///////////////////////////////////////////////////////////
    #define   GET32zOrderCtl_baseAddr_val(r32)                 _BFGET_(r32,31, 0)
    #define   SET32zOrderCtl_baseAddr_val(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32zOrderCtl_baseAddr                          {\
            UNSG32 ubaseAddr_val                               : 32;\
          }
    union { UNSG32 u32zOrderCtl_baseAddr;
            struct w32zOrderCtl_baseAddr;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32zOrderCtl_width_val(r32)                    _BFGET_(r32,12, 0)
    #define   SET32zOrderCtl_width_val(r32,v)                  _BFSET_(r32,12, 0,v)
    #define   GET16zOrderCtl_width_val(r16)                    _BFGET_(r16,12, 0)
    #define   SET16zOrderCtl_width_val(r16,v)                  _BFSET_(r16,12, 0,v)

    #define     w32zOrderCtl_width                             {\
            UNSG32 uwidth_val                                  : 13;\
            UNSG32 RSVDx4_b13                                  : 19;\
          }
    union { UNSG32 u32zOrderCtl_width;
            struct w32zOrderCtl_width;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32zOrderCtl_stride_val(r32)                   _BFGET_(r32,15, 0)
    #define   SET32zOrderCtl_stride_val(r32,v)                 _BFSET_(r32,15, 0,v)
    #define   GET16zOrderCtl_stride_val(r16)                   _BFGET_(r16,15, 0)
    #define   SET16zOrderCtl_stride_val(r16,v)                 _BFSET_(r16,15, 0,v)

    #define     w32zOrderCtl_stride                            {\
            UNSG32 ustride_val                                 : 16;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32zOrderCtl_stride;
            struct w32zOrderCtl_stride;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32zOrderCtl_height_val(r32)                   _BFGET_(r32,10, 0)
    #define   SET32zOrderCtl_height_val(r32,v)                 _BFSET_(r32,10, 0,v)
    #define   GET16zOrderCtl_height_val(r16)                   _BFGET_(r16,10, 0)
    #define   SET16zOrderCtl_height_val(r16,v)                 _BFSET_(r16,10, 0,v)

    #define     w32zOrderCtl_height                            {\
            UNSG32 uheight_val                                 : 11;\
            UNSG32 RSVDxC_b11                                  : 21;\
          }
    union { UNSG32 u32zOrderCtl_height;
            struct w32zOrderCtl_height;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32zOrderCtl_active_val(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32zOrderCtl_active_val(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16zOrderCtl_active_val(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16zOrderCtl_active_val(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define     w32zOrderCtl_active                            {\
            UNSG32 uactive_val                                 :  1;\
            UNSG32 RSVDx10_b1                                  : 31;\
          }
    union { UNSG32 u32zOrderCtl_active;
            struct w32zOrderCtl_active;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32zOrderCtl_visible_val(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32zOrderCtl_visible_val(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16zOrderCtl_visible_val(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16zOrderCtl_visible_val(r16,v)                _BFSET_(r16, 0, 0,v)

    #define     w32zOrderCtl_visible                           {\
            UNSG32 uvisible_val                                :  1;\
            UNSG32 RSVDx14_b1                                  : 31;\
          }
    union { UNSG32 u32zOrderCtl_visible;
            struct w32zOrderCtl_visible;
          };
    ///////////////////////////////////////////////////////////
    } SIE_zOrderCtl;

    typedef union  T32zOrderCtl_baseAddr
          { UNSG32 u32;
            struct w32zOrderCtl_baseAddr;
                 } T32zOrderCtl_baseAddr;
    typedef union  T32zOrderCtl_width
          { UNSG32 u32;
            struct w32zOrderCtl_width;
                 } T32zOrderCtl_width;
    typedef union  T32zOrderCtl_stride
          { UNSG32 u32;
            struct w32zOrderCtl_stride;
                 } T32zOrderCtl_stride;
    typedef union  T32zOrderCtl_height
          { UNSG32 u32;
            struct w32zOrderCtl_height;
                 } T32zOrderCtl_height;
    typedef union  T32zOrderCtl_active
          { UNSG32 u32;
            struct w32zOrderCtl_active;
                 } T32zOrderCtl_active;
    typedef union  T32zOrderCtl_visible
          { UNSG32 u32;
            struct w32zOrderCtl_visible;
                 } T32zOrderCtl_visible;
    ///////////////////////////////////////////////////////////

    typedef union  TzOrderCtl_baseAddr
          { UNSG32 u32[1];
            struct {
            struct w32zOrderCtl_baseAddr;
                   };
                 } TzOrderCtl_baseAddr;
    typedef union  TzOrderCtl_width
          { UNSG32 u32[1];
            struct {
            struct w32zOrderCtl_width;
                   };
                 } TzOrderCtl_width;
    typedef union  TzOrderCtl_stride
          { UNSG32 u32[1];
            struct {
            struct w32zOrderCtl_stride;
                   };
                 } TzOrderCtl_stride;
    typedef union  TzOrderCtl_height
          { UNSG32 u32[1];
            struct {
            struct w32zOrderCtl_height;
                   };
                 } TzOrderCtl_height;
    typedef union  TzOrderCtl_active
          { UNSG32 u32[1];
            struct {
            struct w32zOrderCtl_active;
                   };
                 } TzOrderCtl_active;
    typedef union  TzOrderCtl_visible
          { UNSG32 u32[1];
            struct {
            struct w32zOrderCtl_visible;
                   };
                 } TzOrderCtl_visible;

    ///////////////////////////////////////////////////////////
     SIGN32 zOrderCtl_drvrd(SIE_zOrderCtl *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 zOrderCtl_drvwr(SIE_zOrderCtl *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void zOrderCtl_reset(SIE_zOrderCtl *p);
     SIGN32 zOrderCtl_cmp  (SIE_zOrderCtl *p, SIE_zOrderCtl *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define zOrderCtl_check(p,pie,pfx,hLOG) zOrderCtl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define zOrderCtl_print(p,    pfx,hLOG) zOrderCtl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: zOrderCtl
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE mtr                     biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 zOrderCtl            (P)
///     # 0x00000 zOAry                
///               $zOrderCtl           zOAry             REG       [4]
///                                    ###
///                                    * 4 rectangles are defined
///                                    ###
///     @ 0x00060 zOActive             (P)
///               ###
///               * Bit indicating whether Z-order filtering is active
///               ###
///               %unsigned 1  val                       0x0
///               %%        31         # Stuffing bits...
///     @ 0x00064 zOBypLength          (P)
///               ###
///               * Specifies the upper limit of the transaction burst length that will always be bypassed
///               ###
///               %unsigned 4  val                       0x3
///                                    ###
///                                    * Transactions of burst length < bypLength will be bypassed.
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     104B, bits:     301b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_mtr
#define h_mtr (){}

    #define     RA_mtr_zOrderCtl                               0x0000
    #define     RA_mtr_zOAry                                   0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_mtr_zOActive                                0x0060

    #define     BA_mtr_zOActive_val                            0x0060
    #define     B16mtr_zOActive_val                            0x0060
    #define   LSb32mtr_zOActive_val                               0
    #define   LSb16mtr_zOActive_val                               0
    #define       bmtr_zOActive_val                            1
    #define   MSK32mtr_zOActive_val                               0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_mtr_zOBypLength                             0x0064

    #define     BA_mtr_zOBypLength_val                         0x0064
    #define     B16mtr_zOBypLength_val                         0x0064
    #define   LSb32mtr_zOBypLength_val                            0
    #define   LSb16mtr_zOBypLength_val                            0
    #define       bmtr_zOBypLength_val                         4
    #define   MSK32mtr_zOBypLength_val                            0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_mtr {
    ///////////////////////////////////////////////////////////
              SIE_zOrderCtl                                    ie_zOAry[4];
    ///////////////////////////////////////////////////////////
    #define   GET32mtr_zOActive_val(r32)                       _BFGET_(r32, 0, 0)
    #define   SET32mtr_zOActive_val(r32,v)                     _BFSET_(r32, 0, 0,v)
    #define   GET16mtr_zOActive_val(r16)                       _BFGET_(r16, 0, 0)
    #define   SET16mtr_zOActive_val(r16,v)                     _BFSET_(r16, 0, 0,v)

    #define     w32mtr_zOActive                                {\
            UNSG32 uzOActive_val                               :  1;\
            UNSG32 RSVDx60_b1                                  : 31;\
          }
    union { UNSG32 u32mtr_zOActive;
            struct w32mtr_zOActive;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32mtr_zOBypLength_val(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32mtr_zOBypLength_val(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16mtr_zOBypLength_val(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16mtr_zOBypLength_val(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define     w32mtr_zOBypLength                             {\
            UNSG32 uzOBypLength_val                            :  4;\
            UNSG32 RSVDx64_b4                                  : 28;\
          }
    union { UNSG32 u32mtr_zOBypLength;
            struct w32mtr_zOBypLength;
          };
    ///////////////////////////////////////////////////////////
    } SIE_mtr;

    typedef union  T32mtr_zOActive
          { UNSG32 u32;
            struct w32mtr_zOActive;
                 } T32mtr_zOActive;
    typedef union  T32mtr_zOBypLength
          { UNSG32 u32;
            struct w32mtr_zOBypLength;
                 } T32mtr_zOBypLength;
    ///////////////////////////////////////////////////////////

    typedef union  Tmtr_zOActive
          { UNSG32 u32[1];
            struct {
            struct w32mtr_zOActive;
                   };
                 } Tmtr_zOActive;
    typedef union  Tmtr_zOBypLength
          { UNSG32 u32[1];
            struct {
            struct w32mtr_zOBypLength;
                   };
                 } Tmtr_zOBypLength;

    ///////////////////////////////////////////////////////////
     SIGN32 mtr_drvrd(SIE_mtr *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 mtr_drvwr(SIE_mtr *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void mtr_reset(SIE_mtr *p);
     SIGN32 mtr_cmp  (SIE_mtr *p, SIE_mtr *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define mtr_check(p,pie,pfx,hLOG) mtr_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define mtr_print(p,    pfx,hLOG) mtr_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: mtr
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE seSetting                                (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 setting              (P)
///               ###
///               * Access Control Register
///               ###
///               %unsigned 16 startAddr3116             0x0
///                                    ###
///                                    * The starting address[31:16] of access control region. The address has to be region-size aligned
///                                    ###
///               %unsigned 4  regionSize                0x0
///                                    : size64KB                  0x0
///                                    : size128KB                 0x1
///                                    : size256KB                 0x2
///                                    : size512KB                 0x3
///                                    : size1MB                   0x4
///                                    : size2MB                   0x5
///                                    : size4MB                   0x6
///                                    : size8MB                   0x7
///                                    : size16MB                  0x8
///                                    : size32MB                  0x9
///                                    : size64MB                  0xA
///                                    : size128MB                 0xB
///                                    : size256MB                 0xC
///                                    : size512MB                 0xD
///                                                 ###
///                                                 * size of protection region
///                                                 ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * 1'b1: The access control is enabled as specified by starting address and region size.
///                                    * 1'b0: The access control is disabled
///                                    ###
///               %%        11         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      21b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_seSetting
#define h_seSetting (){}

    #define     RA_seSetting_setting                           0x0000

    #define     BA_seSetting_setting_startAddr3116             0x0000
    #define     B16seSetting_setting_startAddr3116             0x0000
    #define   LSb32seSetting_setting_startAddr3116                0
    #define   LSb16seSetting_setting_startAddr3116                0
    #define       bseSetting_setting_startAddr3116             16
    #define   MSK32seSetting_setting_startAddr3116                0x0000FFFF

    #define     BA_seSetting_setting_regionSize                0x0002
    #define     B16seSetting_setting_regionSize                0x0002
    #define   LSb32seSetting_setting_regionSize                   16
    #define   LSb16seSetting_setting_regionSize                   0
    #define       bseSetting_setting_regionSize                4
    #define   MSK32seSetting_setting_regionSize                   0x000F0000
    #define        seSetting_setting_regionSize_size64KB                    0x0
    #define        seSetting_setting_regionSize_size128KB                   0x1
    #define        seSetting_setting_regionSize_size256KB                   0x2
    #define        seSetting_setting_regionSize_size512KB                   0x3
    #define        seSetting_setting_regionSize_size1MB                     0x4
    #define        seSetting_setting_regionSize_size2MB                     0x5
    #define        seSetting_setting_regionSize_size4MB                     0x6
    #define        seSetting_setting_regionSize_size8MB                     0x7
    #define        seSetting_setting_regionSize_size16MB                    0x8
    #define        seSetting_setting_regionSize_size32MB                    0x9
    #define        seSetting_setting_regionSize_size64MB                    0xA
    #define        seSetting_setting_regionSize_size128MB                   0xB
    #define        seSetting_setting_regionSize_size256MB                   0xC
    #define        seSetting_setting_regionSize_size512MB                   0xD

    #define     BA_seSetting_setting_enable                    0x0002
    #define     B16seSetting_setting_enable                    0x0002
    #define   LSb32seSetting_setting_enable                       20
    #define   LSb16seSetting_setting_enable                       4
    #define       bseSetting_setting_enable                    1
    #define   MSK32seSetting_setting_enable                       0x00100000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_seSetting {
    ///////////////////////////////////////////////////////////
    #define   GET32seSetting_setting_startAddr3116(r32)        _BFGET_(r32,15, 0)
    #define   SET32seSetting_setting_startAddr3116(r32,v)      _BFSET_(r32,15, 0,v)
    #define   GET16seSetting_setting_startAddr3116(r16)        _BFGET_(r16,15, 0)
    #define   SET16seSetting_setting_startAddr3116(r16,v)      _BFSET_(r16,15, 0,v)

    #define   GET32seSetting_setting_regionSize(r32)           _BFGET_(r32,19,16)
    #define   SET32seSetting_setting_regionSize(r32,v)         _BFSET_(r32,19,16,v)
    #define   GET16seSetting_setting_regionSize(r16)           _BFGET_(r16, 3, 0)
    #define   SET16seSetting_setting_regionSize(r16,v)         _BFSET_(r16, 3, 0,v)

    #define   GET32seSetting_setting_enable(r32)               _BFGET_(r32,20,20)
    #define   SET32seSetting_setting_enable(r32,v)             _BFSET_(r32,20,20,v)
    #define   GET16seSetting_setting_enable(r16)               _BFGET_(r16, 4, 4)
    #define   SET16seSetting_setting_enable(r16,v)             _BFSET_(r16, 4, 4,v)

    #define     w32seSetting_setting                           {\
            UNSG32 usetting_startAddr3116                      : 16;\
            UNSG32 usetting_regionSize                         :  4;\
            UNSG32 usetting_enable                             :  1;\
            UNSG32 RSVDx0_b21                                  : 11;\
          }
    union { UNSG32 u32seSetting_setting;
            struct w32seSetting_setting;
          };
    ///////////////////////////////////////////////////////////
    } SIE_seSetting;

    typedef union  T32seSetting_setting
          { UNSG32 u32;
            struct w32seSetting_setting;
                 } T32seSetting_setting;
    ///////////////////////////////////////////////////////////

    typedef union  TseSetting_setting
          { UNSG32 u32[1];
            struct {
            struct w32seSetting_setting;
                   };
                 } TseSetting_setting;

    ///////////////////////////////////////////////////////////
     SIGN32 seSetting_drvrd(SIE_seSetting *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 seSetting_drvwr(SIE_seSetting *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void seSetting_reset(SIE_seSetting *p);
     SIGN32 seSetting_cmp  (SIE_seSetting *p, SIE_seSetting *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define seSetting_check(p,pie,pfx,hLOG) seSetting_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define seSetting_print(p,    pfx,hLOG) seSetting_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: seSetting
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE seRegion                biu              (4,4)
///     ###
///     * Access Control Registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 CTRL0                
///               $seSetting           CTRL0             REG          
///                                    ###
///                                    * Region 0 access control register
///                                    ###
///     @ 0x00004                      (P)
///     # 0x00004 CTRL1                
///               $seSetting           CTRL1             REG          
///                                    ###
///                                    * Region 1 access control register
///                                    ###
///     @ 0x00008                      (P)
///     # 0x00008 CTRL2                
///               $seSetting           CTRL2             REG          
///                                    ###
///                                    * Region 2 access control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C CTRL3                
///               $seSetting           CTRL3             REG          
///                                    ###
///                                    * Region 3 access control register
///                                    ###
///     @ 0x00010                      (P)
///     # 0x00010 CTRL4                
///               $seSetting           CTRL4             REG          
///                                    ###
///                                    * Region 4 access control register
///                                    ###
///     @ 0x00014                      (P)
///     # 0x00014 CTRL5                
///               $seSetting           CTRL5             REG          
///                                    ###
///                                    * Region 5 access control register
///                                    ###
///     @ 0x00018                      (P)
///     # 0x00018 CTRL6                
///               $seSetting           CTRL6             REG          
///                                    ###
///                                    * Region 6 access control register
///                                    ###
///     @ 0x0001C                      (P)
///     # 0x0001C CTRL7                
///               $seSetting           CTRL7             REG          
///                                    ###
///                                    * Region 7 access control register
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     168b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_seRegion
#define h_seRegion (){}

    #define     RA_seRegion_CTRL0                              0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_seRegion_CTRL1                              0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_seRegion_CTRL2                              0x0008
    ///////////////////////////////////////////////////////////
    #define     RA_seRegion_CTRL3                              0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_seRegion_CTRL4                              0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_seRegion_CTRL5                              0x0014
    ///////////////////////////////////////////////////////////
    #define     RA_seRegion_CTRL6                              0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_seRegion_CTRL7                              0x001C
    ///////////////////////////////////////////////////////////

    typedef struct SIE_seRegion {
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL0;
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL1;
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL2;
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL3;
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL4;
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL5;
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL6;
    ///////////////////////////////////////////////////////////
              SIE_seSetting                                    ie_CTRL7;
    ///////////////////////////////////////////////////////////
    } SIE_seRegion;

    ///////////////////////////////////////////////////////////
     SIGN32 seRegion_drvrd(SIE_seRegion *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 seRegion_drvwr(SIE_seRegion *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void seRegion_reset(SIE_seRegion *p);
     SIGN32 seRegion_cmp  (SIE_seRegion *p, SIE_seRegion *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define seRegion_check(p,pie,pfx,hLOG) seRegion_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define seRegion_print(p,    pfx,hLOG) seRegion_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: seRegion
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ACCTX                                    (4,4)
///     ###
///     * Access control setting for Berlin
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 CPU0WMEM             
///               $seRegion            CPU0WMEM          REG          
///                                    ###
///                                    * Access control for CPU0 write accessing system memory
///                                    ###
///     @ 0x00020                      (P)
///     # 0x00020 CPU0RMEM             
///               $seRegion            CPU0RMEM          REG          
///                                    ###
///                                    * Access control for CPU0 read accessing system memory
///                                    ###
///     @ 0x00040                      (P)
///     # 0x00040 PERIFMSTWMEM         
///               $seRegion            PERIFMSTWMEM      REG          
///                                    ###
///                                    * Access control for Peripheral write accessing system memory
///                                    ###
///     @ 0x00060                      (P)
///     # 0x00060 PERIFMSTRMEM         
///               $seRegion            PERIFMSTRMEM      REG          
///                                    ###
///                                    * Access control for Peripheral read accessing system memory
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     128B, bits:     672b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ACCTX
#define h_ACCTX (){}

    #define     RA_ACCTX_CPU0WMEM                              0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_ACCTX_CPU0RMEM                              0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_ACCTX_PERIFMSTWMEM                          0x0040
    ///////////////////////////////////////////////////////////
    #define     RA_ACCTX_PERIFMSTRMEM                          0x0060
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ACCTX {
    ///////////////////////////////////////////////////////////
              SIE_seRegion                                     ie_CPU0WMEM;
    ///////////////////////////////////////////////////////////
              SIE_seRegion                                     ie_CPU0RMEM;
    ///////////////////////////////////////////////////////////
              SIE_seRegion                                     ie_PERIFMSTWMEM;
    ///////////////////////////////////////////////////////////
              SIE_seRegion                                     ie_PERIFMSTRMEM;
    ///////////////////////////////////////////////////////////
    } SIE_ACCTX;

    ///////////////////////////////////////////////////////////
     SIGN32 ACCTX_drvrd(SIE_ACCTX *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ACCTX_drvwr(SIE_ACCTX *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ACCTX_reset(SIE_ACCTX *p);
     SIGN32 ACCTX_cmp  (SIE_ACCTX *p, SIE_ACCTX *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ACCTX_check(p,pie,pfx,hLOG) ACCTX_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ACCTX_print(p,    pfx,hLOG) ACCTX_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ACCTX
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MoltresReg              biu              (4,4)
///     ###
///     * All the controls for Moltres (PJ4-MP) sub-system (moltres_mp_ip).
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (RW-)
///               ###
///               * Clock and reset related controls
///               ###
///               %unsigned 1  cpu0SoftReset             0x0
///                                    ###
///                                    * 1: put CPU0 to reset state (self-cleared by hardware after 16 sysClk cycles)
///                                    * 0: normal operation
///                                    ###
///               %unsigned 1  cpu1SoftReset             0x0
///               %unsigned 2  aclkSel                   0x1
///                                    ###
///                                    * Frequency of CPU's AXI bus interface
///                                    * 00 : Same as CPU clock (not supported by Moltres)
///                                    * 01: divide-by-2 of CPU clock
///                                    * 10: divide-by-3 of CPU clock
///                                    * 11: divide-by-4 of CPU clock
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 CTRL1                (RW-)
///               ###
///               * System controls of CPU. All the bits of this register are only sampled during reset of the CPU. They should only be changed while the CPU is in reset.
///               ###
///               %unsigned 1  vinithi                   0x1
///                                    ###
///                                    * Vector Init HIGH
///                                    * 1: Init vectors start at high address (0xFFFF_0000)
///                                    * 0: Init vectors start at low address (0x0000_0000)
///                                    ###
///               %unsigned 1  bigendinit                0x0
///                                    ###
///                                    * Endian Initialization
///                                    * The bigendinit has no effect in ARMv7 mode.
///                                    * In ARMv6 mode, it has the effect described below.
///                                    * 1 = After reset, the CPU starts in BE-32 mode if ubitinit is 0 or BE-8 mode if ubitinit is 1
///                                    * 0 = After reset, the CPU starts in Little Endian mode
///                                    ###
///               %unsigned 1  v7_mode                   0x1
///                                    ###
///                                    * Core Mode
///                                    * Specifies the targeted ARM core behavior
///                                    * 0 = After reset, the CPU starts in v6 mode
///                                    * 1 = After reset, the CPU starts in v7 mode
///                                    ###
///               %unsigned 1  icache16k_init            0x0
///                                    ###
///                                    * I-Cache Size Configuration
///                                    * v7: 1 = Limit the I-Cache size to 16K by setting the cz bit to 1. Also continuously drives bits 27:13 of the Table 41, Current Cache Size ID Register to h'7F.
///                                    * v6: 1 = Limit the I-Cache size to 16K by setting the cz bit to 1. Also continuously drives bits 9:6 of the Cache Type Register to b'0101.
///                                    * This is a configuration input that is sampled during reset of the processor with respect to its effect on the cz bit. For its use in driving the register bits, it is synchronized by pclk.
///                                    ###
///               %unsigned 1  dcache16k_init            0x0
///               %unsigned 1  sel_mrvl_id               0x1
///                                    ###
///                                    * Marvell ID
///                                    * Selects between MRVL ID and ARM ID for the Main ID and JTAG Device ID registers:
///                                    * 0 = ARM® ID
///                                    * 1 = Marvell® ID
///                                    * NOTE: sel_mrvl_id input of CPU is a static signal and is not synchronized by any clocks. It should be set to 1 and held stable throughout operation of the device.
///                                    ###
///               %unsigned 1  thumb_excpt_init          0x0
///                                    ###
///                                    * Thumb exception generation
///                                    * This static configuration signal is sampled during reset to set the value of the TE bit in the CP15 System Control Register.
///                                    * 0 = Enable ARM exception generation. On exception entry, CPSR T bit is 0 and J bit is 0
///                                    * 1 = Enable Thumb exception generation. On exception entry, CPSR T bit is 1 and J bit is 0
///                                    ###
///               %unsigned 1  nmfi_enable               0x0
///                                    ###
///                                    * Fast Interrupt Enable
///                                    * Configures fast interrupts to be non-maskable:
///                                    * 0 = clears the NMFI bit in the CP15 System Control Regster
///                                    * 1 = sets the NMFI bit in the CP15 System Control Register
///                                    ###
///               %unsigned 1  pbitinit                  0x0
///                                    ###
///                                    * Not used. Always program as 0.
///                                    ###
///               %unsigned 1  excpt_endian_init         0x0
///               %unsigned 1  ubitinit                  0x0
///                                    ###
///                                    * Endian Configuration
///                                    * ubitinit has no effect in ARMv7 mode
///                                    * In ARMv6 mode, it has the effect described below.
///                                    * 0 = Processor starts in legacy fixed instruction and data endianness
///                                    * 1 = Processor starts in ARMv6 separated instruction and data endianness
///                                    * NOTE: v6 Endian behavior is configured on reset using the {ubitinit, bigendinit} pin combination
///                                    ###
///               %unsigned 1  lf_cwf_en                 0x0
///                                    ###
///                                    * Enables critical word first functionality
///                                    * 0 = critical word first functionality disabled
///                                    * 1 = critical word first functionality enabled
///                                    * ONLY FOR FPGA.
///                                    ###
///               %unsigned 1  cp15sdisable              0x0
///               %unsigned 1  debug_ports_MP_UP_select  0x0
///               %unsigned 1  tz_disable                0x1
///                                    ###
///                                    * Trustzone disable
///                                    * 1 = Disable all trustzone logic, meaning all operations are secure by default
///                                    * 0 = Enable trustzone logic, requiring normal secure programming
///                                    ###
///               %unsigned 1  l1_rst_disable            0x0
///                                    ###
///                                    * L1 hardware reset disable input:
///                                    * 0 = the L1 valid RAM contents are reset by hardware
///                                    * 1 = the L1 valid RAM contents are not reset by hardware
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00008 SOC_ID               (RW-)
///               %unsigned 32 id                        0x0
///                                    ###
///                                    * SOC ID
///                                    * (ARMv7 Mode): Defines the reset value of the Implementation Defined Silicon ID Register . This value is only sampled during reset of the CPU.
///                                    * (ARMv6 Mode): Not used
///                                    ###
///     @ 0x0000C CTRL2                (RW-)
///               ###
///               * DFT/Scan related controls
///               ###
///               %unsigned 1  global_cg_bypass          0x0
///                                    ###
///                                    * Global Clock Gating Bypass
///                                    * This bit is intended for debug and analysis and should be set to zero. It is not synchronized to any clocks inside CPU.
///                                    * 0 = Functional mode
///                                    * 1 = Override clock gating for debug
///                                    * NOTE: Set to 0 during normal functional mode for power saving. When set to 0, certain units will shut off the clock when not in use. This bit should be register controlled for enhancing debug capability - reset state should be 1'b0.
///                                    ###
///               %unsigned 1  cg_bypass                 0x0
///               %unsigned 1  sram_bypass               0x0
///               %%        29         # Stuffing bits...
///     @ 0x00010 CTRL3                (RW-)
///               ###
///               * Low power interface controls of CPU
///               ###
///               %unsigned 1  pclk_wfi_en               0x1
///                                    ###
///                                    * Enable Clock During WFI
///                                    * This bit is synchronized to the pclk domain inside CPU. It allows Debug request to wake up CPU from WFI (when no VDD removal) (Active HIGH):
///                                    * 1 = During Wait for Interrupt (WFI), the clock to the JTAG and ICE logic is not gated off, so that a debug request can wake the processor core.
///                                    * 0 = The clock to the JTAG and ICE is gated off during WFI, so that only IRQs and FIQs can wake the processor core.
///                                    ###
///               %unsigned 1  sram_low_leak_dis         0x0
///               %unsigned 1  sram_low_leak_en          0x0
///                                    ###
///                                    * Low Leakage Power Management
///                                    * sram_low_leak_en, sram_low_leak_dis. This is used to control the low leakage mode of the SRAMs (drop VDD by 30%)
///                                    * o sram_low_leak_en: This should be 0 during normal operation. This should only be asserted during BIST test to test the low leakage mode and the state retention capability.
///                                    * o sram_low_leak_dis: This should be 0 during normal operation and the CPU will automatically put the SRAM in low leakage when the CPU is idle from WFI.
///                                    * If the SOC has a power management that will already reduce the VDD coming into the CPU during WFI, then this signal needs to be asserted in order to avoid double drop of the VDD that may bring it to a level below minimum VDD for state retention.
///                                    ###
///               %unsigned 1  l2_sram_low_leak_dis      0x0
///               %unsigned 1  l2_sram_low_leak_en       0x0
///               %unsigned 1  iso_dbgpwr_mode_en_l      0x1
///                                    ###
///                                    * Active low signal which indicates debug power domain is in power-down mode and isolation cells are active.
///                                    * NOTE: This feature is not currently supported; always program as HIGH.
///                                    ###
///               %unsigned 1  dbg_clock_enable          0x1
///                                    ###
///                                    * Enables all debug related clocks. This clock enable will gate off pclkdbg, atclk, and pclk in debug unit (CTI/ETM). This allows the SOC to turn off the debug related clocks when debug logic is not needed.
///                                    ###
///               %unsigned 1  soc_jtag_idle             0x1
///                                    ###
///                                    * JTAG Idle
///                                    * Prevents CPU from going to sleep mode until SOC JTAG is idle (soc_jtag_idle = 1)
///                                    * SOC uses this signal to indicate JTAG daisy chain is in use. Core should wait for its idle before goes to idle or power down mode.
///                                    ###
///               %unsigned 1  biu_idle_req              0x0
///                                    ###
///                                    * Hardware core/bus idle request
///                                    * The {biu_idle_req, biu_idle_ack} interface is used to put the CPU to idle so that the clocks and VDD can be changed dynamically, if needed.
///                                    * In order to put the CPU to idle, biu_idle_req is asserted. This is similar to WFI except it is hardware based and the CPU can be resumed by removing biu_idle_req and the clocks are not gated off. Upon the assertion of biu_idle_req, CPU will stop any further bus requests from going out and will wait until all pending bus transactions to complete. The Write Buffer is drained.
///                                    ###
///               %unsigned 1  iso_mode_udr_en_l_soc_bypass 0x0
///               %unsigned 1  iso_mode_udr_en_l_soc     0x0
///                                    ###
///                                    * These bits are reserved for use in case there are issues with the CPU internal UDR sequencing.
///                                    * Always write 0.
///                                    ###
///               %unsigned 1  cpu_power_on              0x1
///                                    ###
///                                    * CPU Power On
///                                    * The power management responds to the CPU assertion of cpu_power_on_req by asserting cpu_power_on when the VDD has been completely brought back up to the operating level.
///                                    * NOTE: For implementations that do not support
///                                    * VDD removal, this signal should be tied high
///                                    ###
///               %unsigned 1  sram_pdwn_en              0x0
///               %unsigned 1  cpu_pdwn_en               0x0
///                                    ###
///                                    * The {cpu_pdwn_en, sram_pdwn_en, cpu_power_on_req, cpu_power_on, iso_mode_en_l} interface is used to decide whether to remove VDD of the CPU with state retention or not. This interface is invoked only when the WFI is executed.
///                                    * The following defines the use of two of signals of this interface:
///                                    * o {cpu_pdwn_en, sram_pdwn_en} = 00, 01
///                                    * This is the normal WFI without any VDD
///                                    * removal. It will only invoke clock gating.
///                                    * o {cpu_pdwn_en, sram_pdwn_en} = 10.
///                                    * This is the D2 power mode mentioned
///                                    * previously. This will invoke the VDD removal
///                                    * with state retention for both the CPU and the
///                                    * SRAM.
///                                    * o {cpu_pdwn_en, sram_pdwn_en} = 11
///                                    * This is the D2 power mode without SRAM state
///                                    * retention. This will invoke the VDD removal with
///                                    * state retention for the CPU. However, the SRAM
///                                    * is completely powered off and will not retain
///                                    * state. The CPU will automatically clean the
///                                    * caches before it goes to sleep and invalidate the
///                                    * caches when the wake up indication is detected.
///                                    * NOTE: For implementations that do not support
///                                    * VDD removal, these signals should be tied low
///                                    ###
///               %unsigned 1  clock_pwrup_disable_l     0x1
///                                    ###
///                                    * Active low global clock disable signals -
///                                    * used to turn all clocks off in a similar fashion as a WFI event).
///                                    ###
///               %unsigned 1  pdfvssm                   0x0
///               %unsigned 1  pdlvmc                    0x0
///                                    ###
///                                    * pdfvssm and pdlvmc are used to select power-down mode options when npdwn is asserted.
///                                    ###
///               %unsigned 1  pwdn_precond              0x0
///                                    ###
///                                    * Compiled SRAM only input. BIST mode clock enable to disable SRAM in PDWN mode. It's used to enable SRAM clock for a short period (at least a cycle). It allows SRAM logic to latch the de-assertion of NCE to disable SRAM before SRAM receives PDWN.
///                                    ###
///               %unsigned 6  sram_after_pdwn_cycle     0x18
///                                    ###
///                                    * SRAM PDWN deassertion delay
///                                    * In SRAM low-leakage mode, the SRAM cant be accessed for 20ns after PDWN is de-asserted. The SOC should translate 20ns to # of cycle in particular core clock.
///                                    ###
///               %unsigned 1  sram_vddmcvss_ctrl_en     0x0
///                                    ###
///                                    * VDD/VSS Control Enable
///                                    * When 1, Enables external VDDMC if {pdwn,pdlvmc,pdfvss} = 100 or internal VSS if {pdwn,pdlvmc, pdfvss} = 110. When set to 0, the ability
///                                    * to lower VDDMC by SOC or auto raise VSS by itself will be disabled.
///                                    ###
///               %unsigned 1  sram_vddmc_restored       0x1
///                                    ###
///                                    * VDDNC Restored
///                                    * When {pdwn, pdlvmc, pdfvssm} = 110 and SRAM is in low-leakage mode (sram_vddmcvss_ctrl_en is 1), the SOC acknowledges restoration of VDDMC by driving this signal high. It should be always be driven high (1) by the SOC when VDDMC is at a normal level.
///                                    ###
///               %unsigned 1  l2_sram_vddmcvss_ctrl_en  0x0
///                                    ###
///                                    * Reserved for future; always write as 0.
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00014 CTRL4                (RW-)
///               ###
///               * L2 related controls
///               ###
///               %unsigned 1  l2c_errd_init             0x0
///               %unsigned 1  l2c_enable_init           0x0
///               %%        30         # Stuffing bits...
///     @ 0x00018 CTRL5                (RW-)
///               ###
///               * CoreSight related controls
///               ###
///               %unsigned 1  dbgen                     0x1
///                                    ###
///                                    * Invasive Debug Enable.
///                                    ###
///               %unsigned 1  spiden                    0x1
///                                    ###
///                                    * Secure Invasive Debug Enable
///                                    ###
///               %unsigned 1  niden                     0x1
///                                    ###
///                                    * Non Invasive Debug Enable
///                                    ###
///               %unsigned 1  spniden                   0x1
///                                    ###
///                                    * Secure Non Invasive Debug Enable
///                                    ###
///               %unsigned 1  dbgrq                     0x0
///                                    ###
///                                    * Always write as 0.
///                                    ###
///               %unsigned 1  TPCTL                     0x0
///                                    ###
///                                    * report the presence of TRACECTL pin.
///                                    ###
///               %unsigned 5  TPMAXDATASIZE             0x0
///                                    ###
///                                    * indicates the maximum TRACEDATA width.
///                                    ###
///               %unsigned 1  DEVICEEN                  0x1
///                                    ###
///                                    * Enables APB-AP interface
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x0001C ClockEnable          (P)
///               ###
///               * Clock Enable control
///               ###
///               %unsigned 1  CPU0                      0x1
///                                    ###
///                                    * Gate the clock enable to CPU0 (1 – enable, 0 – disable)
///                                    * Controls pclk_en[0] input of moltres_mp_ip
///                                    ###
///               %unsigned 1  CPU1                      0x1
///                                    ###
///                                    * Gate the clock enable to CPU1 (1 – enable, 0 – disable)
///                                    * Controls pclk_en[1] input of moltres_mp_ip
///                                    ###
///               %unsigned 1  CPUAxi                    0x1
///                                    ###
///                                    * Gate the clock enable to CPU AXI bus.
///                                    * aclk_en input to moltres_mp_ip depends on CPUAxi and CTRL0.aClksel fields.
///                                    ###
///               %unsigned 1  Perif                     0x1
///                                    ###
///                                    * Controls the clock enable to peripherals in MP sub-system.
///                                    * Controls PERIPHCLKEN input of moltres_mp_ip
///                                    ###
///               %unsigned 1  Timer                     0x1
///                                    ###
///                                    * Controls the clock enable to Timer in MP sub-system.
///                                    * Controls TIMERCLKEN input of moltres_mp_ip
///                                    ###
///               %unsigned 1  dbgpclk                   0x1
///                                    ###
///                                    * Controls the dbgpclk enable to PJ4-MP and CoreSight.
///                                    ###
///               %unsigned 1  atclk                     0x1
///                                    ###
///                                    * Controls the atclk enable to PJ4-MP and CoreSight.
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x00020 SoftResetn           (P)
///               ###
///               * Controls various reset inputs of moltres_mp_ip
///               ###
///               %unsigned 1  CPU0                      0x1
///                                    ###
///                                    * Active low reset for CPU0. connected to nreset[0] input of moltres_mp_ip
///                                    ###
///               %unsigned 1  CPU1                      0x1
///                                    ###
///                                    * Active low reset for CPU1. connected to nreset[1] input of moltres_mp_ip
///                                    ###
///               %unsigned 1  CPUAxi                    0x1
///                                    ###
///                                    * Active low reset for CPU's AXI bus. Connected to HRESETn input of moltres_mp_ip.
///                                    ###
///               %unsigned 1  Perif                     0x1
///                                    ###
///                                    * Active low reset for peripherals in MP sub-system.
///                                    * Controls PERIPHRESETn input of moltres_mp_ip
///                                    ###
///               %unsigned 1  Timer                     0x1
///                                    ###
///                                    * Active low reset for Timer in MP sub-system.
///                                    * Controls TIMERRESETn input of moltres_mp_ip
///                                    ###
///               %unsigned 1  WatchDog0                 0x1
///                                    ###
///                                    * Active low reset for WatchDog0 Timer in MP sub-system.
///                                    * Controls WDRESETn[0] input of moltres_mp_ip
///                                    ###
///               %unsigned 1  WatchDog1                 0x1
///                                    ###
///                                    * Active low reset for WatchDog1 Timer in MP sub-system.
///                                    * Controls WDRESETn[1] input of moltres_mp_ip
///                                    ###
///               %unsigned 1  MpSubSys                  0x1
///                                    ###
///                                    * Active low reset for MP sub-system (peripherals, timers, watchdogs, AXI, ATB).
///                                    * Controls subsys_awake_nreset input of moltres_mp_ip
///                                    ###
///               %unsigned 1  CoreSight                 0x1
///                                    ###
///                                    * Active low reset for CoreSight module. Resets APB , ATB & CTM interfaces.
///                                    ###
///               %%        23         # Stuffing bits...
///     @ 0x00024 wdResetCtrl          (P)
///               %unsigned 1  cpu0                      0x0
///                                    ###
///                                    * Controls whether WathDog0 (of PJ4B-MP) Reset request asserts reset to CPU0.
///                                    * 1 : wdresetreq[0] asserts nreset[0]
///                                    * 0 : wdresetreq[0] doesn't control nreset[0]
///                                    * Note: nreset[0] is asserted as long as wdresetreq[0] is asserted.
///                                    ###
///               %unsigned 1  cpu1                      0x0
///                                    ###
///                                    * Controls whether WathDog1 (of PJ4B-MP) Reset request asserts reset to CPU1.
///                                    * 1 : wdresetreq[1] asserts nreset[1]
///                                    * 0 : wdresetreq[1] doesn't control nreset[1]
///                                    * Note: nreset[1] is asserted as long as wdresetreq[1] is asserted.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00028 sysIntPol            (P)
///               %unsigned 32 invert                    0x0
///                                    ###
///                                    * one bit per each interrupt source, interrupt position follow IRQ table defined in pic.sxw.txt
///                                    * 0 : Don't invert before sending to GIC inside PJ4-MP
///                                    * 1 : Invert before sending to GIC inside PJ4B-MP
///                                    ###
///     @ 0x0002C csClkCtrl            (P)
///               ###
///               * Frequency of CoreSight clock (PCLKDBG, ATCLK and CTMCLK). CPU clock is divided as per the following settings to generate CoreSight clock. Default is set to 1/3rd of CPU clock.
///               ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 1 : d3
///                                    * 0 : decided by clkSel
///                                    ###
///               %unsigned 3  clkSel                    0x2
///               %%        28         # Stuffing bits...
///     @ 0x00030 perifClkCtrl         (P)
///               ###
///               * Frequency of PERIPHCLK clock for PJ4B-MP. CPU clock is divided as per the following settings to generate PERIPHCLK. Default is set to 1/3rd of CPU clock.
///               ###
///               %unsigned 1  clkD3Switch               0x1
///                                    ###
///                                    * 1 : d3
///                                    * 0 : decided by clkSel
///                                    ###
///               %unsigned 3  clkSel                    0x2
///               %%        28         # Stuffing bits...
///     @ 0x00034 timerClkCtrl         (P)
///               ###
///               * Frequency of TIMERCLK for PJ4B-MP . CPU clock is divided as per the following settings to generate CoreSight clock. Default is set to 1/3rd of CPU clock.
///               ###
///               %unsigned 1  clkD3Switch               0x1
///                                    ###
///                                    * 1 : d3
///                                    * 0 : decided by clkSel
///                                    ###
///               %unsigned 3  clkSel                    0x2
///               %%        28         # Stuffing bits...
///     @ 0x00038 GIC_INT_MASK         (P)
///               ###
///               * Allows the SOC to prevent any GIC interrupt from arriving at CPU pins, which is useful during power-down sequences. When a bit in this vector is asserted (active high), both the nIRQ and nFIQ pins of the corresponding CPU are held inactive. Even if the legacy nIRQ/nFIQ signals of the GIC are
///               * used in order to bypass GIC logic, the interrupts are
///               * masked. So when these signals are asserted, there’s no way for the corresponding CPU(s) to take an interrupt.
///               ###
///               %unsigned 1  core0                     0x0
///                                    ###
///                                    * 1 : nFIQ and nIRQ to core0 is held in-active.
///                                    * 0 : GIC drives nFIQ and nIRQ to core0
///                                    ###
///               %unsigned 1  core1                     0x0
///               %%        30         # Stuffing bits...
///     @ 0x0003C PTM_CTRL             (P)
///               ###
///               * Few controls to PJ4B-MP related to PTM trace.
///               ###
///               %unsigned 2  core_freq_change          0x0
///                                    ###
///                                    * If time stamping is enabled, this signal indicates to the Program Trace Macrocell (PTM) that a change in processor clock frequency has occurred and a timestamp packet should be generated. Notifies user that internal counts/events will now be at a different ratio from external events. This signal is synchronized and edge-detected in the core clock of the receiving processor, so it can be fully
///                                    * asynchronous. The only requirement on the pulse is that it be slower than clock of the particular core.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00040 dummy                (P)
///               %unsigned 32 dummy                     0x0
///                                    ###
///                                    * Not used. May be used for ECO
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      68B, bits:     194b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MoltresReg
#define h_MoltresReg (){}

    #define     RA_MoltresReg_CTRL0                            0x0000

    #define     BA_MoltresReg_CTRL0_cpu0SoftReset              0x0000
    #define     B16MoltresReg_CTRL0_cpu0SoftReset              0x0000
    #define   LSb32MoltresReg_CTRL0_cpu0SoftReset                 0
    #define   LSb16MoltresReg_CTRL0_cpu0SoftReset                 0
    #define       bMoltresReg_CTRL0_cpu0SoftReset              1
    #define   MSK32MoltresReg_CTRL0_cpu0SoftReset                 0x00000001

    #define     BA_MoltresReg_CTRL0_cpu1SoftReset              0x0000
    #define     B16MoltresReg_CTRL0_cpu1SoftReset              0x0000
    #define   LSb32MoltresReg_CTRL0_cpu1SoftReset                 1
    #define   LSb16MoltresReg_CTRL0_cpu1SoftReset                 1
    #define       bMoltresReg_CTRL0_cpu1SoftReset              1
    #define   MSK32MoltresReg_CTRL0_cpu1SoftReset                 0x00000002

    #define     BA_MoltresReg_CTRL0_aclkSel                    0x0000
    #define     B16MoltresReg_CTRL0_aclkSel                    0x0000
    #define   LSb32MoltresReg_CTRL0_aclkSel                       2
    #define   LSb16MoltresReg_CTRL0_aclkSel                       2
    #define       bMoltresReg_CTRL0_aclkSel                    2
    #define   MSK32MoltresReg_CTRL0_aclkSel                       0x0000000C
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_CTRL1                            0x0004

    #define     BA_MoltresReg_CTRL1_vinithi                    0x0004
    #define     B16MoltresReg_CTRL1_vinithi                    0x0004
    #define   LSb32MoltresReg_CTRL1_vinithi                       0
    #define   LSb16MoltresReg_CTRL1_vinithi                       0
    #define       bMoltresReg_CTRL1_vinithi                    1
    #define   MSK32MoltresReg_CTRL1_vinithi                       0x00000001

    #define     BA_MoltresReg_CTRL1_bigendinit                 0x0004
    #define     B16MoltresReg_CTRL1_bigendinit                 0x0004
    #define   LSb32MoltresReg_CTRL1_bigendinit                    1
    #define   LSb16MoltresReg_CTRL1_bigendinit                    1
    #define       bMoltresReg_CTRL1_bigendinit                 1
    #define   MSK32MoltresReg_CTRL1_bigendinit                    0x00000002

    #define     BA_MoltresReg_CTRL1_v7_mode                    0x0004
    #define     B16MoltresReg_CTRL1_v7_mode                    0x0004
    #define   LSb32MoltresReg_CTRL1_v7_mode                       2
    #define   LSb16MoltresReg_CTRL1_v7_mode                       2
    #define       bMoltresReg_CTRL1_v7_mode                    1
    #define   MSK32MoltresReg_CTRL1_v7_mode                       0x00000004

    #define     BA_MoltresReg_CTRL1_icache16k_init             0x0004
    #define     B16MoltresReg_CTRL1_icache16k_init             0x0004
    #define   LSb32MoltresReg_CTRL1_icache16k_init                3
    #define   LSb16MoltresReg_CTRL1_icache16k_init                3
    #define       bMoltresReg_CTRL1_icache16k_init             1
    #define   MSK32MoltresReg_CTRL1_icache16k_init                0x00000008

    #define     BA_MoltresReg_CTRL1_dcache16k_init             0x0004
    #define     B16MoltresReg_CTRL1_dcache16k_init             0x0004
    #define   LSb32MoltresReg_CTRL1_dcache16k_init                4
    #define   LSb16MoltresReg_CTRL1_dcache16k_init                4
    #define       bMoltresReg_CTRL1_dcache16k_init             1
    #define   MSK32MoltresReg_CTRL1_dcache16k_init                0x00000010

    #define     BA_MoltresReg_CTRL1_sel_mrvl_id                0x0004
    #define     B16MoltresReg_CTRL1_sel_mrvl_id                0x0004
    #define   LSb32MoltresReg_CTRL1_sel_mrvl_id                   5
    #define   LSb16MoltresReg_CTRL1_sel_mrvl_id                   5
    #define       bMoltresReg_CTRL1_sel_mrvl_id                1
    #define   MSK32MoltresReg_CTRL1_sel_mrvl_id                   0x00000020

    #define     BA_MoltresReg_CTRL1_thumb_excpt_init           0x0004
    #define     B16MoltresReg_CTRL1_thumb_excpt_init           0x0004
    #define   LSb32MoltresReg_CTRL1_thumb_excpt_init              6
    #define   LSb16MoltresReg_CTRL1_thumb_excpt_init              6
    #define       bMoltresReg_CTRL1_thumb_excpt_init           1
    #define   MSK32MoltresReg_CTRL1_thumb_excpt_init              0x00000040

    #define     BA_MoltresReg_CTRL1_nmfi_enable                0x0004
    #define     B16MoltresReg_CTRL1_nmfi_enable                0x0004
    #define   LSb32MoltresReg_CTRL1_nmfi_enable                   7
    #define   LSb16MoltresReg_CTRL1_nmfi_enable                   7
    #define       bMoltresReg_CTRL1_nmfi_enable                1
    #define   MSK32MoltresReg_CTRL1_nmfi_enable                   0x00000080

    #define     BA_MoltresReg_CTRL1_pbitinit                   0x0005
    #define     B16MoltresReg_CTRL1_pbitinit                   0x0004
    #define   LSb32MoltresReg_CTRL1_pbitinit                      8
    #define   LSb16MoltresReg_CTRL1_pbitinit                      8
    #define       bMoltresReg_CTRL1_pbitinit                   1
    #define   MSK32MoltresReg_CTRL1_pbitinit                      0x00000100

    #define     BA_MoltresReg_CTRL1_excpt_endian_init          0x0005
    #define     B16MoltresReg_CTRL1_excpt_endian_init          0x0004
    #define   LSb32MoltresReg_CTRL1_excpt_endian_init             9
    #define   LSb16MoltresReg_CTRL1_excpt_endian_init             9
    #define       bMoltresReg_CTRL1_excpt_endian_init          1
    #define   MSK32MoltresReg_CTRL1_excpt_endian_init             0x00000200

    #define     BA_MoltresReg_CTRL1_ubitinit                   0x0005
    #define     B16MoltresReg_CTRL1_ubitinit                   0x0004
    #define   LSb32MoltresReg_CTRL1_ubitinit                      10
    #define   LSb16MoltresReg_CTRL1_ubitinit                      10
    #define       bMoltresReg_CTRL1_ubitinit                   1
    #define   MSK32MoltresReg_CTRL1_ubitinit                      0x00000400

    #define     BA_MoltresReg_CTRL1_lf_cwf_en                  0x0005
    #define     B16MoltresReg_CTRL1_lf_cwf_en                  0x0004
    #define   LSb32MoltresReg_CTRL1_lf_cwf_en                     11
    #define   LSb16MoltresReg_CTRL1_lf_cwf_en                     11
    #define       bMoltresReg_CTRL1_lf_cwf_en                  1
    #define   MSK32MoltresReg_CTRL1_lf_cwf_en                     0x00000800

    #define     BA_MoltresReg_CTRL1_cp15sdisable               0x0005
    #define     B16MoltresReg_CTRL1_cp15sdisable               0x0004
    #define   LSb32MoltresReg_CTRL1_cp15sdisable                  12
    #define   LSb16MoltresReg_CTRL1_cp15sdisable                  12
    #define       bMoltresReg_CTRL1_cp15sdisable               1
    #define   MSK32MoltresReg_CTRL1_cp15sdisable                  0x00001000

    #define     BA_MoltresReg_CTRL1_debug_ports_MP_UP_select   0x0005
    #define     B16MoltresReg_CTRL1_debug_ports_MP_UP_select   0x0004
    #define   LSb32MoltresReg_CTRL1_debug_ports_MP_UP_select      13
    #define   LSb16MoltresReg_CTRL1_debug_ports_MP_UP_select      13
    #define       bMoltresReg_CTRL1_debug_ports_MP_UP_select   1
    #define   MSK32MoltresReg_CTRL1_debug_ports_MP_UP_select      0x00002000

    #define     BA_MoltresReg_CTRL1_tz_disable                 0x0005
    #define     B16MoltresReg_CTRL1_tz_disable                 0x0004
    #define   LSb32MoltresReg_CTRL1_tz_disable                    14
    #define   LSb16MoltresReg_CTRL1_tz_disable                    14
    #define       bMoltresReg_CTRL1_tz_disable                 1
    #define   MSK32MoltresReg_CTRL1_tz_disable                    0x00004000

    #define     BA_MoltresReg_CTRL1_l1_rst_disable             0x0005
    #define     B16MoltresReg_CTRL1_l1_rst_disable             0x0004
    #define   LSb32MoltresReg_CTRL1_l1_rst_disable                15
    #define   LSb16MoltresReg_CTRL1_l1_rst_disable                15
    #define       bMoltresReg_CTRL1_l1_rst_disable             1
    #define   MSK32MoltresReg_CTRL1_l1_rst_disable                0x00008000
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_SOC_ID                           0x0008

    #define     BA_MoltresReg_SOC_ID_id                        0x0008
    #define     B16MoltresReg_SOC_ID_id                        0x0008
    #define   LSb32MoltresReg_SOC_ID_id                           0
    #define   LSb16MoltresReg_SOC_ID_id                           0
    #define       bMoltresReg_SOC_ID_id                        32
    #define   MSK32MoltresReg_SOC_ID_id                           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_CTRL2                            0x000C

    #define     BA_MoltresReg_CTRL2_global_cg_bypass           0x000C
    #define     B16MoltresReg_CTRL2_global_cg_bypass           0x000C
    #define   LSb32MoltresReg_CTRL2_global_cg_bypass              0
    #define   LSb16MoltresReg_CTRL2_global_cg_bypass              0
    #define       bMoltresReg_CTRL2_global_cg_bypass           1
    #define   MSK32MoltresReg_CTRL2_global_cg_bypass              0x00000001

    #define     BA_MoltresReg_CTRL2_cg_bypass                  0x000C
    #define     B16MoltresReg_CTRL2_cg_bypass                  0x000C
    #define   LSb32MoltresReg_CTRL2_cg_bypass                     1
    #define   LSb16MoltresReg_CTRL2_cg_bypass                     1
    #define       bMoltresReg_CTRL2_cg_bypass                  1
    #define   MSK32MoltresReg_CTRL2_cg_bypass                     0x00000002

    #define     BA_MoltresReg_CTRL2_sram_bypass                0x000C
    #define     B16MoltresReg_CTRL2_sram_bypass                0x000C
    #define   LSb32MoltresReg_CTRL2_sram_bypass                   2
    #define   LSb16MoltresReg_CTRL2_sram_bypass                   2
    #define       bMoltresReg_CTRL2_sram_bypass                1
    #define   MSK32MoltresReg_CTRL2_sram_bypass                   0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_CTRL3                            0x0010

    #define     BA_MoltresReg_CTRL3_pclk_wfi_en                0x0010
    #define     B16MoltresReg_CTRL3_pclk_wfi_en                0x0010
    #define   LSb32MoltresReg_CTRL3_pclk_wfi_en                   0
    #define   LSb16MoltresReg_CTRL3_pclk_wfi_en                   0
    #define       bMoltresReg_CTRL3_pclk_wfi_en                1
    #define   MSK32MoltresReg_CTRL3_pclk_wfi_en                   0x00000001

    #define     BA_MoltresReg_CTRL3_sram_low_leak_dis          0x0010
    #define     B16MoltresReg_CTRL3_sram_low_leak_dis          0x0010
    #define   LSb32MoltresReg_CTRL3_sram_low_leak_dis             1
    #define   LSb16MoltresReg_CTRL3_sram_low_leak_dis             1
    #define       bMoltresReg_CTRL3_sram_low_leak_dis          1
    #define   MSK32MoltresReg_CTRL3_sram_low_leak_dis             0x00000002

    #define     BA_MoltresReg_CTRL3_sram_low_leak_en           0x0010
    #define     B16MoltresReg_CTRL3_sram_low_leak_en           0x0010
    #define   LSb32MoltresReg_CTRL3_sram_low_leak_en              2
    #define   LSb16MoltresReg_CTRL3_sram_low_leak_en              2
    #define       bMoltresReg_CTRL3_sram_low_leak_en           1
    #define   MSK32MoltresReg_CTRL3_sram_low_leak_en              0x00000004

    #define     BA_MoltresReg_CTRL3_l2_sram_low_leak_dis       0x0010
    #define     B16MoltresReg_CTRL3_l2_sram_low_leak_dis       0x0010
    #define   LSb32MoltresReg_CTRL3_l2_sram_low_leak_dis          3
    #define   LSb16MoltresReg_CTRL3_l2_sram_low_leak_dis          3
    #define       bMoltresReg_CTRL3_l2_sram_low_leak_dis       1
    #define   MSK32MoltresReg_CTRL3_l2_sram_low_leak_dis          0x00000008

    #define     BA_MoltresReg_CTRL3_l2_sram_low_leak_en        0x0010
    #define     B16MoltresReg_CTRL3_l2_sram_low_leak_en        0x0010
    #define   LSb32MoltresReg_CTRL3_l2_sram_low_leak_en           4
    #define   LSb16MoltresReg_CTRL3_l2_sram_low_leak_en           4
    #define       bMoltresReg_CTRL3_l2_sram_low_leak_en        1
    #define   MSK32MoltresReg_CTRL3_l2_sram_low_leak_en           0x00000010

    #define     BA_MoltresReg_CTRL3_iso_dbgpwr_mode_en_l       0x0010
    #define     B16MoltresReg_CTRL3_iso_dbgpwr_mode_en_l       0x0010
    #define   LSb32MoltresReg_CTRL3_iso_dbgpwr_mode_en_l          5
    #define   LSb16MoltresReg_CTRL3_iso_dbgpwr_mode_en_l          5
    #define       bMoltresReg_CTRL3_iso_dbgpwr_mode_en_l       1
    #define   MSK32MoltresReg_CTRL3_iso_dbgpwr_mode_en_l          0x00000020

    #define     BA_MoltresReg_CTRL3_dbg_clock_enable           0x0010
    #define     B16MoltresReg_CTRL3_dbg_clock_enable           0x0010
    #define   LSb32MoltresReg_CTRL3_dbg_clock_enable              6
    #define   LSb16MoltresReg_CTRL3_dbg_clock_enable              6
    #define       bMoltresReg_CTRL3_dbg_clock_enable           1
    #define   MSK32MoltresReg_CTRL3_dbg_clock_enable              0x00000040

    #define     BA_MoltresReg_CTRL3_soc_jtag_idle              0x0010
    #define     B16MoltresReg_CTRL3_soc_jtag_idle              0x0010
    #define   LSb32MoltresReg_CTRL3_soc_jtag_idle                 7
    #define   LSb16MoltresReg_CTRL3_soc_jtag_idle                 7
    #define       bMoltresReg_CTRL3_soc_jtag_idle              1
    #define   MSK32MoltresReg_CTRL3_soc_jtag_idle                 0x00000080

    #define     BA_MoltresReg_CTRL3_biu_idle_req               0x0011
    #define     B16MoltresReg_CTRL3_biu_idle_req               0x0010
    #define   LSb32MoltresReg_CTRL3_biu_idle_req                  8
    #define   LSb16MoltresReg_CTRL3_biu_idle_req                  8
    #define       bMoltresReg_CTRL3_biu_idle_req               1
    #define   MSK32MoltresReg_CTRL3_biu_idle_req                  0x00000100

    #define     BA_MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass 0x0011
    #define     B16MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass 0x0010
    #define   LSb32MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass    9
    #define   LSb16MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass    9
    #define       bMoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass 1
    #define   MSK32MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass    0x00000200

    #define     BA_MoltresReg_CTRL3_iso_mode_udr_en_l_soc      0x0011
    #define     B16MoltresReg_CTRL3_iso_mode_udr_en_l_soc      0x0010
    #define   LSb32MoltresReg_CTRL3_iso_mode_udr_en_l_soc         10
    #define   LSb16MoltresReg_CTRL3_iso_mode_udr_en_l_soc         10
    #define       bMoltresReg_CTRL3_iso_mode_udr_en_l_soc      1
    #define   MSK32MoltresReg_CTRL3_iso_mode_udr_en_l_soc         0x00000400

    #define     BA_MoltresReg_CTRL3_cpu_power_on               0x0011
    #define     B16MoltresReg_CTRL3_cpu_power_on               0x0010
    #define   LSb32MoltresReg_CTRL3_cpu_power_on                  11
    #define   LSb16MoltresReg_CTRL3_cpu_power_on                  11
    #define       bMoltresReg_CTRL3_cpu_power_on               1
    #define   MSK32MoltresReg_CTRL3_cpu_power_on                  0x00000800

    #define     BA_MoltresReg_CTRL3_sram_pdwn_en               0x0011
    #define     B16MoltresReg_CTRL3_sram_pdwn_en               0x0010
    #define   LSb32MoltresReg_CTRL3_sram_pdwn_en                  12
    #define   LSb16MoltresReg_CTRL3_sram_pdwn_en                  12
    #define       bMoltresReg_CTRL3_sram_pdwn_en               1
    #define   MSK32MoltresReg_CTRL3_sram_pdwn_en                  0x00001000

    #define     BA_MoltresReg_CTRL3_cpu_pdwn_en                0x0011
    #define     B16MoltresReg_CTRL3_cpu_pdwn_en                0x0010
    #define   LSb32MoltresReg_CTRL3_cpu_pdwn_en                   13
    #define   LSb16MoltresReg_CTRL3_cpu_pdwn_en                   13
    #define       bMoltresReg_CTRL3_cpu_pdwn_en                1
    #define   MSK32MoltresReg_CTRL3_cpu_pdwn_en                   0x00002000

    #define     BA_MoltresReg_CTRL3_clock_pwrup_disable_l      0x0011
    #define     B16MoltresReg_CTRL3_clock_pwrup_disable_l      0x0010
    #define   LSb32MoltresReg_CTRL3_clock_pwrup_disable_l         14
    #define   LSb16MoltresReg_CTRL3_clock_pwrup_disable_l         14
    #define       bMoltresReg_CTRL3_clock_pwrup_disable_l      1
    #define   MSK32MoltresReg_CTRL3_clock_pwrup_disable_l         0x00004000

    #define     BA_MoltresReg_CTRL3_pdfvssm                    0x0011
    #define     B16MoltresReg_CTRL3_pdfvssm                    0x0010
    #define   LSb32MoltresReg_CTRL3_pdfvssm                       15
    #define   LSb16MoltresReg_CTRL3_pdfvssm                       15
    #define       bMoltresReg_CTRL3_pdfvssm                    1
    #define   MSK32MoltresReg_CTRL3_pdfvssm                       0x00008000

    #define     BA_MoltresReg_CTRL3_pdlvmc                     0x0012
    #define     B16MoltresReg_CTRL3_pdlvmc                     0x0012
    #define   LSb32MoltresReg_CTRL3_pdlvmc                        16
    #define   LSb16MoltresReg_CTRL3_pdlvmc                        0
    #define       bMoltresReg_CTRL3_pdlvmc                     1
    #define   MSK32MoltresReg_CTRL3_pdlvmc                        0x00010000

    #define     BA_MoltresReg_CTRL3_pwdn_precond               0x0012
    #define     B16MoltresReg_CTRL3_pwdn_precond               0x0012
    #define   LSb32MoltresReg_CTRL3_pwdn_precond                  17
    #define   LSb16MoltresReg_CTRL3_pwdn_precond                  1
    #define       bMoltresReg_CTRL3_pwdn_precond               1
    #define   MSK32MoltresReg_CTRL3_pwdn_precond                  0x00020000

    #define     BA_MoltresReg_CTRL3_sram_after_pdwn_cycle      0x0012
    #define     B16MoltresReg_CTRL3_sram_after_pdwn_cycle      0x0012
    #define   LSb32MoltresReg_CTRL3_sram_after_pdwn_cycle         18
    #define   LSb16MoltresReg_CTRL3_sram_after_pdwn_cycle         2
    #define       bMoltresReg_CTRL3_sram_after_pdwn_cycle      6
    #define   MSK32MoltresReg_CTRL3_sram_after_pdwn_cycle         0x00FC0000

    #define     BA_MoltresReg_CTRL3_sram_vddmcvss_ctrl_en      0x0013
    #define     B16MoltresReg_CTRL3_sram_vddmcvss_ctrl_en      0x0012
    #define   LSb32MoltresReg_CTRL3_sram_vddmcvss_ctrl_en         24
    #define   LSb16MoltresReg_CTRL3_sram_vddmcvss_ctrl_en         8
    #define       bMoltresReg_CTRL3_sram_vddmcvss_ctrl_en      1
    #define   MSK32MoltresReg_CTRL3_sram_vddmcvss_ctrl_en         0x01000000

    #define     BA_MoltresReg_CTRL3_sram_vddmc_restored        0x0013
    #define     B16MoltresReg_CTRL3_sram_vddmc_restored        0x0012
    #define   LSb32MoltresReg_CTRL3_sram_vddmc_restored           25
    #define   LSb16MoltresReg_CTRL3_sram_vddmc_restored           9
    #define       bMoltresReg_CTRL3_sram_vddmc_restored        1
    #define   MSK32MoltresReg_CTRL3_sram_vddmc_restored           0x02000000

    #define     BA_MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en   0x0013
    #define     B16MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en   0x0012
    #define   LSb32MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en      26
    #define   LSb16MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en      10
    #define       bMoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en   1
    #define   MSK32MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en      0x04000000
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_CTRL4                            0x0014

    #define     BA_MoltresReg_CTRL4_l2c_errd_init              0x0014
    #define     B16MoltresReg_CTRL4_l2c_errd_init              0x0014
    #define   LSb32MoltresReg_CTRL4_l2c_errd_init                 0
    #define   LSb16MoltresReg_CTRL4_l2c_errd_init                 0
    #define       bMoltresReg_CTRL4_l2c_errd_init              1
    #define   MSK32MoltresReg_CTRL4_l2c_errd_init                 0x00000001

    #define     BA_MoltresReg_CTRL4_l2c_enable_init            0x0014
    #define     B16MoltresReg_CTRL4_l2c_enable_init            0x0014
    #define   LSb32MoltresReg_CTRL4_l2c_enable_init               1
    #define   LSb16MoltresReg_CTRL4_l2c_enable_init               1
    #define       bMoltresReg_CTRL4_l2c_enable_init            1
    #define   MSK32MoltresReg_CTRL4_l2c_enable_init               0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_CTRL5                            0x0018

    #define     BA_MoltresReg_CTRL5_dbgen                      0x0018
    #define     B16MoltresReg_CTRL5_dbgen                      0x0018
    #define   LSb32MoltresReg_CTRL5_dbgen                         0
    #define   LSb16MoltresReg_CTRL5_dbgen                         0
    #define       bMoltresReg_CTRL5_dbgen                      1
    #define   MSK32MoltresReg_CTRL5_dbgen                         0x00000001

    #define     BA_MoltresReg_CTRL5_spiden                     0x0018
    #define     B16MoltresReg_CTRL5_spiden                     0x0018
    #define   LSb32MoltresReg_CTRL5_spiden                        1
    #define   LSb16MoltresReg_CTRL5_spiden                        1
    #define       bMoltresReg_CTRL5_spiden                     1
    #define   MSK32MoltresReg_CTRL5_spiden                        0x00000002

    #define     BA_MoltresReg_CTRL5_niden                      0x0018
    #define     B16MoltresReg_CTRL5_niden                      0x0018
    #define   LSb32MoltresReg_CTRL5_niden                         2
    #define   LSb16MoltresReg_CTRL5_niden                         2
    #define       bMoltresReg_CTRL5_niden                      1
    #define   MSK32MoltresReg_CTRL5_niden                         0x00000004

    #define     BA_MoltresReg_CTRL5_spniden                    0x0018
    #define     B16MoltresReg_CTRL5_spniden                    0x0018
    #define   LSb32MoltresReg_CTRL5_spniden                       3
    #define   LSb16MoltresReg_CTRL5_spniden                       3
    #define       bMoltresReg_CTRL5_spniden                    1
    #define   MSK32MoltresReg_CTRL5_spniden                       0x00000008

    #define     BA_MoltresReg_CTRL5_dbgrq                      0x0018
    #define     B16MoltresReg_CTRL5_dbgrq                      0x0018
    #define   LSb32MoltresReg_CTRL5_dbgrq                         4
    #define   LSb16MoltresReg_CTRL5_dbgrq                         4
    #define       bMoltresReg_CTRL5_dbgrq                      1
    #define   MSK32MoltresReg_CTRL5_dbgrq                         0x00000010

    #define     BA_MoltresReg_CTRL5_TPCTL                      0x0018
    #define     B16MoltresReg_CTRL5_TPCTL                      0x0018
    #define   LSb32MoltresReg_CTRL5_TPCTL                         5
    #define   LSb16MoltresReg_CTRL5_TPCTL                         5
    #define       bMoltresReg_CTRL5_TPCTL                      1
    #define   MSK32MoltresReg_CTRL5_TPCTL                         0x00000020

    #define     BA_MoltresReg_CTRL5_TPMAXDATASIZE              0x0018
    #define     B16MoltresReg_CTRL5_TPMAXDATASIZE              0x0018
    #define   LSb32MoltresReg_CTRL5_TPMAXDATASIZE                 6
    #define   LSb16MoltresReg_CTRL5_TPMAXDATASIZE                 6
    #define       bMoltresReg_CTRL5_TPMAXDATASIZE              5
    #define   MSK32MoltresReg_CTRL5_TPMAXDATASIZE                 0x000007C0

    #define     BA_MoltresReg_CTRL5_DEVICEEN                   0x0019
    #define     B16MoltresReg_CTRL5_DEVICEEN                   0x0018
    #define   LSb32MoltresReg_CTRL5_DEVICEEN                      11
    #define   LSb16MoltresReg_CTRL5_DEVICEEN                      11
    #define       bMoltresReg_CTRL5_DEVICEEN                   1
    #define   MSK32MoltresReg_CTRL5_DEVICEEN                      0x00000800
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_ClockEnable                      0x001C

    #define     BA_MoltresReg_ClockEnable_CPU0                 0x001C
    #define     B16MoltresReg_ClockEnable_CPU0                 0x001C
    #define   LSb32MoltresReg_ClockEnable_CPU0                    0
    #define   LSb16MoltresReg_ClockEnable_CPU0                    0
    #define       bMoltresReg_ClockEnable_CPU0                 1
    #define   MSK32MoltresReg_ClockEnable_CPU0                    0x00000001

    #define     BA_MoltresReg_ClockEnable_CPU1                 0x001C
    #define     B16MoltresReg_ClockEnable_CPU1                 0x001C
    #define   LSb32MoltresReg_ClockEnable_CPU1                    1
    #define   LSb16MoltresReg_ClockEnable_CPU1                    1
    #define       bMoltresReg_ClockEnable_CPU1                 1
    #define   MSK32MoltresReg_ClockEnable_CPU1                    0x00000002

    #define     BA_MoltresReg_ClockEnable_CPUAxi               0x001C
    #define     B16MoltresReg_ClockEnable_CPUAxi               0x001C
    #define   LSb32MoltresReg_ClockEnable_CPUAxi                  2
    #define   LSb16MoltresReg_ClockEnable_CPUAxi                  2
    #define       bMoltresReg_ClockEnable_CPUAxi               1
    #define   MSK32MoltresReg_ClockEnable_CPUAxi                  0x00000004

    #define     BA_MoltresReg_ClockEnable_Perif                0x001C
    #define     B16MoltresReg_ClockEnable_Perif                0x001C
    #define   LSb32MoltresReg_ClockEnable_Perif                   3
    #define   LSb16MoltresReg_ClockEnable_Perif                   3
    #define       bMoltresReg_ClockEnable_Perif                1
    #define   MSK32MoltresReg_ClockEnable_Perif                   0x00000008

    #define     BA_MoltresReg_ClockEnable_Timer                0x001C
    #define     B16MoltresReg_ClockEnable_Timer                0x001C
    #define   LSb32MoltresReg_ClockEnable_Timer                   4
    #define   LSb16MoltresReg_ClockEnable_Timer                   4
    #define       bMoltresReg_ClockEnable_Timer                1
    #define   MSK32MoltresReg_ClockEnable_Timer                   0x00000010

    #define     BA_MoltresReg_ClockEnable_dbgpclk              0x001C
    #define     B16MoltresReg_ClockEnable_dbgpclk              0x001C
    #define   LSb32MoltresReg_ClockEnable_dbgpclk                 5
    #define   LSb16MoltresReg_ClockEnable_dbgpclk                 5
    #define       bMoltresReg_ClockEnable_dbgpclk              1
    #define   MSK32MoltresReg_ClockEnable_dbgpclk                 0x00000020

    #define     BA_MoltresReg_ClockEnable_atclk                0x001C
    #define     B16MoltresReg_ClockEnable_atclk                0x001C
    #define   LSb32MoltresReg_ClockEnable_atclk                   6
    #define   LSb16MoltresReg_ClockEnable_atclk                   6
    #define       bMoltresReg_ClockEnable_atclk                1
    #define   MSK32MoltresReg_ClockEnable_atclk                   0x00000040
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_SoftResetn                       0x0020

    #define     BA_MoltresReg_SoftResetn_CPU0                  0x0020
    #define     B16MoltresReg_SoftResetn_CPU0                  0x0020
    #define   LSb32MoltresReg_SoftResetn_CPU0                     0
    #define   LSb16MoltresReg_SoftResetn_CPU0                     0
    #define       bMoltresReg_SoftResetn_CPU0                  1
    #define   MSK32MoltresReg_SoftResetn_CPU0                     0x00000001

    #define     BA_MoltresReg_SoftResetn_CPU1                  0x0020
    #define     B16MoltresReg_SoftResetn_CPU1                  0x0020
    #define   LSb32MoltresReg_SoftResetn_CPU1                     1
    #define   LSb16MoltresReg_SoftResetn_CPU1                     1
    #define       bMoltresReg_SoftResetn_CPU1                  1
    #define   MSK32MoltresReg_SoftResetn_CPU1                     0x00000002

    #define     BA_MoltresReg_SoftResetn_CPUAxi                0x0020
    #define     B16MoltresReg_SoftResetn_CPUAxi                0x0020
    #define   LSb32MoltresReg_SoftResetn_CPUAxi                   2
    #define   LSb16MoltresReg_SoftResetn_CPUAxi                   2
    #define       bMoltresReg_SoftResetn_CPUAxi                1
    #define   MSK32MoltresReg_SoftResetn_CPUAxi                   0x00000004

    #define     BA_MoltresReg_SoftResetn_Perif                 0x0020
    #define     B16MoltresReg_SoftResetn_Perif                 0x0020
    #define   LSb32MoltresReg_SoftResetn_Perif                    3
    #define   LSb16MoltresReg_SoftResetn_Perif                    3
    #define       bMoltresReg_SoftResetn_Perif                 1
    #define   MSK32MoltresReg_SoftResetn_Perif                    0x00000008

    #define     BA_MoltresReg_SoftResetn_Timer                 0x0020
    #define     B16MoltresReg_SoftResetn_Timer                 0x0020
    #define   LSb32MoltresReg_SoftResetn_Timer                    4
    #define   LSb16MoltresReg_SoftResetn_Timer                    4
    #define       bMoltresReg_SoftResetn_Timer                 1
    #define   MSK32MoltresReg_SoftResetn_Timer                    0x00000010

    #define     BA_MoltresReg_SoftResetn_WatchDog0             0x0020
    #define     B16MoltresReg_SoftResetn_WatchDog0             0x0020
    #define   LSb32MoltresReg_SoftResetn_WatchDog0                5
    #define   LSb16MoltresReg_SoftResetn_WatchDog0                5
    #define       bMoltresReg_SoftResetn_WatchDog0             1
    #define   MSK32MoltresReg_SoftResetn_WatchDog0                0x00000020

    #define     BA_MoltresReg_SoftResetn_WatchDog1             0x0020
    #define     B16MoltresReg_SoftResetn_WatchDog1             0x0020
    #define   LSb32MoltresReg_SoftResetn_WatchDog1                6
    #define   LSb16MoltresReg_SoftResetn_WatchDog1                6
    #define       bMoltresReg_SoftResetn_WatchDog1             1
    #define   MSK32MoltresReg_SoftResetn_WatchDog1                0x00000040

    #define     BA_MoltresReg_SoftResetn_MpSubSys              0x0020
    #define     B16MoltresReg_SoftResetn_MpSubSys              0x0020
    #define   LSb32MoltresReg_SoftResetn_MpSubSys                 7
    #define   LSb16MoltresReg_SoftResetn_MpSubSys                 7
    #define       bMoltresReg_SoftResetn_MpSubSys              1
    #define   MSK32MoltresReg_SoftResetn_MpSubSys                 0x00000080

    #define     BA_MoltresReg_SoftResetn_CoreSight             0x0021
    #define     B16MoltresReg_SoftResetn_CoreSight             0x0020
    #define   LSb32MoltresReg_SoftResetn_CoreSight                8
    #define   LSb16MoltresReg_SoftResetn_CoreSight                8
    #define       bMoltresReg_SoftResetn_CoreSight             1
    #define   MSK32MoltresReg_SoftResetn_CoreSight                0x00000100
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_wdResetCtrl                      0x0024

    #define     BA_MoltresReg_wdResetCtrl_cpu0                 0x0024
    #define     B16MoltresReg_wdResetCtrl_cpu0                 0x0024
    #define   LSb32MoltresReg_wdResetCtrl_cpu0                    0
    #define   LSb16MoltresReg_wdResetCtrl_cpu0                    0
    #define       bMoltresReg_wdResetCtrl_cpu0                 1
    #define   MSK32MoltresReg_wdResetCtrl_cpu0                    0x00000001

    #define     BA_MoltresReg_wdResetCtrl_cpu1                 0x0024
    #define     B16MoltresReg_wdResetCtrl_cpu1                 0x0024
    #define   LSb32MoltresReg_wdResetCtrl_cpu1                    1
    #define   LSb16MoltresReg_wdResetCtrl_cpu1                    1
    #define       bMoltresReg_wdResetCtrl_cpu1                 1
    #define   MSK32MoltresReg_wdResetCtrl_cpu1                    0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_sysIntPol                        0x0028

    #define     BA_MoltresReg_sysIntPol_invert                 0x0028
    #define     B16MoltresReg_sysIntPol_invert                 0x0028
    #define   LSb32MoltresReg_sysIntPol_invert                    0
    #define   LSb16MoltresReg_sysIntPol_invert                    0
    #define       bMoltresReg_sysIntPol_invert                 32
    #define   MSK32MoltresReg_sysIntPol_invert                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_csClkCtrl                        0x002C

    #define     BA_MoltresReg_csClkCtrl_clkD3Switch            0x002C
    #define     B16MoltresReg_csClkCtrl_clkD3Switch            0x002C
    #define   LSb32MoltresReg_csClkCtrl_clkD3Switch               0
    #define   LSb16MoltresReg_csClkCtrl_clkD3Switch               0
    #define       bMoltresReg_csClkCtrl_clkD3Switch            1
    #define   MSK32MoltresReg_csClkCtrl_clkD3Switch               0x00000001

    #define     BA_MoltresReg_csClkCtrl_clkSel                 0x002C
    #define     B16MoltresReg_csClkCtrl_clkSel                 0x002C
    #define   LSb32MoltresReg_csClkCtrl_clkSel                    1
    #define   LSb16MoltresReg_csClkCtrl_clkSel                    1
    #define       bMoltresReg_csClkCtrl_clkSel                 3
    #define   MSK32MoltresReg_csClkCtrl_clkSel                    0x0000000E
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_perifClkCtrl                     0x0030

    #define     BA_MoltresReg_perifClkCtrl_clkD3Switch         0x0030
    #define     B16MoltresReg_perifClkCtrl_clkD3Switch         0x0030
    #define   LSb32MoltresReg_perifClkCtrl_clkD3Switch            0
    #define   LSb16MoltresReg_perifClkCtrl_clkD3Switch            0
    #define       bMoltresReg_perifClkCtrl_clkD3Switch         1
    #define   MSK32MoltresReg_perifClkCtrl_clkD3Switch            0x00000001

    #define     BA_MoltresReg_perifClkCtrl_clkSel              0x0030
    #define     B16MoltresReg_perifClkCtrl_clkSel              0x0030
    #define   LSb32MoltresReg_perifClkCtrl_clkSel                 1
    #define   LSb16MoltresReg_perifClkCtrl_clkSel                 1
    #define       bMoltresReg_perifClkCtrl_clkSel              3
    #define   MSK32MoltresReg_perifClkCtrl_clkSel                 0x0000000E
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_timerClkCtrl                     0x0034

    #define     BA_MoltresReg_timerClkCtrl_clkD3Switch         0x0034
    #define     B16MoltresReg_timerClkCtrl_clkD3Switch         0x0034
    #define   LSb32MoltresReg_timerClkCtrl_clkD3Switch            0
    #define   LSb16MoltresReg_timerClkCtrl_clkD3Switch            0
    #define       bMoltresReg_timerClkCtrl_clkD3Switch         1
    #define   MSK32MoltresReg_timerClkCtrl_clkD3Switch            0x00000001

    #define     BA_MoltresReg_timerClkCtrl_clkSel              0x0034
    #define     B16MoltresReg_timerClkCtrl_clkSel              0x0034
    #define   LSb32MoltresReg_timerClkCtrl_clkSel                 1
    #define   LSb16MoltresReg_timerClkCtrl_clkSel                 1
    #define       bMoltresReg_timerClkCtrl_clkSel              3
    #define   MSK32MoltresReg_timerClkCtrl_clkSel                 0x0000000E
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_GIC_INT_MASK                     0x0038

    #define     BA_MoltresReg_GIC_INT_MASK_core0               0x0038
    #define     B16MoltresReg_GIC_INT_MASK_core0               0x0038
    #define   LSb32MoltresReg_GIC_INT_MASK_core0                  0
    #define   LSb16MoltresReg_GIC_INT_MASK_core0                  0
    #define       bMoltresReg_GIC_INT_MASK_core0               1
    #define   MSK32MoltresReg_GIC_INT_MASK_core0                  0x00000001

    #define     BA_MoltresReg_GIC_INT_MASK_core1               0x0038
    #define     B16MoltresReg_GIC_INT_MASK_core1               0x0038
    #define   LSb32MoltresReg_GIC_INT_MASK_core1                  1
    #define   LSb16MoltresReg_GIC_INT_MASK_core1                  1
    #define       bMoltresReg_GIC_INT_MASK_core1               1
    #define   MSK32MoltresReg_GIC_INT_MASK_core1                  0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_PTM_CTRL                         0x003C

    #define     BA_MoltresReg_PTM_CTRL_core_freq_change        0x003C
    #define     B16MoltresReg_PTM_CTRL_core_freq_change        0x003C
    #define   LSb32MoltresReg_PTM_CTRL_core_freq_change           0
    #define   LSb16MoltresReg_PTM_CTRL_core_freq_change           0
    #define       bMoltresReg_PTM_CTRL_core_freq_change        2
    #define   MSK32MoltresReg_PTM_CTRL_core_freq_change           0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_MoltresReg_dummy                            0x0040

    #define     BA_MoltresReg_dummy_dummy                      0x0040
    #define     B16MoltresReg_dummy_dummy                      0x0040
    #define   LSb32MoltresReg_dummy_dummy                         0
    #define   LSb16MoltresReg_dummy_dummy                         0
    #define       bMoltresReg_dummy_dummy                      32
    #define   MSK32MoltresReg_dummy_dummy                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MoltresReg {
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_CTRL0_cpu0SoftReset(r32)         _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_CTRL0_cpu0SoftReset(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_CTRL0_cpu0SoftReset(r16)         _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_CTRL0_cpu0SoftReset(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_CTRL0_cpu1SoftReset(r32)         _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_CTRL0_cpu1SoftReset(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_CTRL0_cpu1SoftReset(r16)         _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_CTRL0_cpu1SoftReset(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_CTRL0_aclkSel(r32)               _BFGET_(r32, 3, 2)
    #define   SET32MoltresReg_CTRL0_aclkSel(r32,v)             _BFSET_(r32, 3, 2,v)
    #define   GET16MoltresReg_CTRL0_aclkSel(r16)               _BFGET_(r16, 3, 2)
    #define   SET16MoltresReg_CTRL0_aclkSel(r16,v)             _BFSET_(r16, 3, 2,v)

    #define     w32MoltresReg_CTRL0                            {\
            UNSG32 uCTRL0_cpu0SoftReset                        :  1;\
            UNSG32 uCTRL0_cpu1SoftReset                        :  1;\
            UNSG32 uCTRL0_aclkSel                              :  2;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32MoltresReg_CTRL0;
            struct w32MoltresReg_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_CTRL1_vinithi(r32)               _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_CTRL1_vinithi(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_CTRL1_vinithi(r16)               _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_CTRL1_vinithi(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_CTRL1_bigendinit(r32)            _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_CTRL1_bigendinit(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_CTRL1_bigendinit(r16)            _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_CTRL1_bigendinit(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_CTRL1_v7_mode(r32)               _BFGET_(r32, 2, 2)
    #define   SET32MoltresReg_CTRL1_v7_mode(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16MoltresReg_CTRL1_v7_mode(r16)               _BFGET_(r16, 2, 2)
    #define   SET16MoltresReg_CTRL1_v7_mode(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32MoltresReg_CTRL1_icache16k_init(r32)        _BFGET_(r32, 3, 3)
    #define   SET32MoltresReg_CTRL1_icache16k_init(r32,v)      _BFSET_(r32, 3, 3,v)
    #define   GET16MoltresReg_CTRL1_icache16k_init(r16)        _BFGET_(r16, 3, 3)
    #define   SET16MoltresReg_CTRL1_icache16k_init(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32MoltresReg_CTRL1_dcache16k_init(r32)        _BFGET_(r32, 4, 4)
    #define   SET32MoltresReg_CTRL1_dcache16k_init(r32,v)      _BFSET_(r32, 4, 4,v)
    #define   GET16MoltresReg_CTRL1_dcache16k_init(r16)        _BFGET_(r16, 4, 4)
    #define   SET16MoltresReg_CTRL1_dcache16k_init(r16,v)      _BFSET_(r16, 4, 4,v)

    #define   GET32MoltresReg_CTRL1_sel_mrvl_id(r32)           _BFGET_(r32, 5, 5)
    #define   SET32MoltresReg_CTRL1_sel_mrvl_id(r32,v)         _BFSET_(r32, 5, 5,v)
    #define   GET16MoltresReg_CTRL1_sel_mrvl_id(r16)           _BFGET_(r16, 5, 5)
    #define   SET16MoltresReg_CTRL1_sel_mrvl_id(r16,v)         _BFSET_(r16, 5, 5,v)

    #define   GET32MoltresReg_CTRL1_thumb_excpt_init(r32)      _BFGET_(r32, 6, 6)
    #define   SET32MoltresReg_CTRL1_thumb_excpt_init(r32,v)    _BFSET_(r32, 6, 6,v)
    #define   GET16MoltresReg_CTRL1_thumb_excpt_init(r16)      _BFGET_(r16, 6, 6)
    #define   SET16MoltresReg_CTRL1_thumb_excpt_init(r16,v)    _BFSET_(r16, 6, 6,v)

    #define   GET32MoltresReg_CTRL1_nmfi_enable(r32)           _BFGET_(r32, 7, 7)
    #define   SET32MoltresReg_CTRL1_nmfi_enable(r32,v)         _BFSET_(r32, 7, 7,v)
    #define   GET16MoltresReg_CTRL1_nmfi_enable(r16)           _BFGET_(r16, 7, 7)
    #define   SET16MoltresReg_CTRL1_nmfi_enable(r16,v)         _BFSET_(r16, 7, 7,v)

    #define   GET32MoltresReg_CTRL1_pbitinit(r32)              _BFGET_(r32, 8, 8)
    #define   SET32MoltresReg_CTRL1_pbitinit(r32,v)            _BFSET_(r32, 8, 8,v)
    #define   GET16MoltresReg_CTRL1_pbitinit(r16)              _BFGET_(r16, 8, 8)
    #define   SET16MoltresReg_CTRL1_pbitinit(r16,v)            _BFSET_(r16, 8, 8,v)

    #define   GET32MoltresReg_CTRL1_excpt_endian_init(r32)     _BFGET_(r32, 9, 9)
    #define   SET32MoltresReg_CTRL1_excpt_endian_init(r32,v)   _BFSET_(r32, 9, 9,v)
    #define   GET16MoltresReg_CTRL1_excpt_endian_init(r16)     _BFGET_(r16, 9, 9)
    #define   SET16MoltresReg_CTRL1_excpt_endian_init(r16,v)   _BFSET_(r16, 9, 9,v)

    #define   GET32MoltresReg_CTRL1_ubitinit(r32)              _BFGET_(r32,10,10)
    #define   SET32MoltresReg_CTRL1_ubitinit(r32,v)            _BFSET_(r32,10,10,v)
    #define   GET16MoltresReg_CTRL1_ubitinit(r16)              _BFGET_(r16,10,10)
    #define   SET16MoltresReg_CTRL1_ubitinit(r16,v)            _BFSET_(r16,10,10,v)

    #define   GET32MoltresReg_CTRL1_lf_cwf_en(r32)             _BFGET_(r32,11,11)
    #define   SET32MoltresReg_CTRL1_lf_cwf_en(r32,v)           _BFSET_(r32,11,11,v)
    #define   GET16MoltresReg_CTRL1_lf_cwf_en(r16)             _BFGET_(r16,11,11)
    #define   SET16MoltresReg_CTRL1_lf_cwf_en(r16,v)           _BFSET_(r16,11,11,v)

    #define   GET32MoltresReg_CTRL1_cp15sdisable(r32)          _BFGET_(r32,12,12)
    #define   SET32MoltresReg_CTRL1_cp15sdisable(r32,v)        _BFSET_(r32,12,12,v)
    #define   GET16MoltresReg_CTRL1_cp15sdisable(r16)          _BFGET_(r16,12,12)
    #define   SET16MoltresReg_CTRL1_cp15sdisable(r16,v)        _BFSET_(r16,12,12,v)

    #define   GET32MoltresReg_CTRL1_debug_ports_MP_UP_select(r32) _BFGET_(r32,13,13)
    #define   SET32MoltresReg_CTRL1_debug_ports_MP_UP_select(r32,v) _BFSET_(r32,13,13,v)
    #define   GET16MoltresReg_CTRL1_debug_ports_MP_UP_select(r16) _BFGET_(r16,13,13)
    #define   SET16MoltresReg_CTRL1_debug_ports_MP_UP_select(r16,v) _BFSET_(r16,13,13,v)

    #define   GET32MoltresReg_CTRL1_tz_disable(r32)            _BFGET_(r32,14,14)
    #define   SET32MoltresReg_CTRL1_tz_disable(r32,v)          _BFSET_(r32,14,14,v)
    #define   GET16MoltresReg_CTRL1_tz_disable(r16)            _BFGET_(r16,14,14)
    #define   SET16MoltresReg_CTRL1_tz_disable(r16,v)          _BFSET_(r16,14,14,v)

    #define   GET32MoltresReg_CTRL1_l1_rst_disable(r32)        _BFGET_(r32,15,15)
    #define   SET32MoltresReg_CTRL1_l1_rst_disable(r32,v)      _BFSET_(r32,15,15,v)
    #define   GET16MoltresReg_CTRL1_l1_rst_disable(r16)        _BFGET_(r16,15,15)
    #define   SET16MoltresReg_CTRL1_l1_rst_disable(r16,v)      _BFSET_(r16,15,15,v)

    #define     w32MoltresReg_CTRL1                            {\
            UNSG32 uCTRL1_vinithi                              :  1;\
            UNSG32 uCTRL1_bigendinit                           :  1;\
            UNSG32 uCTRL1_v7_mode                              :  1;\
            UNSG32 uCTRL1_icache16k_init                       :  1;\
            UNSG32 uCTRL1_dcache16k_init                       :  1;\
            UNSG32 uCTRL1_sel_mrvl_id                          :  1;\
            UNSG32 uCTRL1_thumb_excpt_init                     :  1;\
            UNSG32 uCTRL1_nmfi_enable                          :  1;\
            UNSG32 uCTRL1_pbitinit                             :  1;\
            UNSG32 uCTRL1_excpt_endian_init                    :  1;\
            UNSG32 uCTRL1_ubitinit                             :  1;\
            UNSG32 uCTRL1_lf_cwf_en                            :  1;\
            UNSG32 uCTRL1_cp15sdisable                         :  1;\
            UNSG32 uCTRL1_debug_ports_MP_UP_select             :  1;\
            UNSG32 uCTRL1_tz_disable                           :  1;\
            UNSG32 uCTRL1_l1_rst_disable                       :  1;\
            UNSG32 RSVDx4_b16                                  : 16;\
          }
    union { UNSG32 u32MoltresReg_CTRL1;
            struct w32MoltresReg_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_SOC_ID_id(r32)                   _BFGET_(r32,31, 0)
    #define   SET32MoltresReg_SOC_ID_id(r32,v)                 _BFSET_(r32,31, 0,v)

    #define     w32MoltresReg_SOC_ID                           {\
            UNSG32 uSOC_ID_id                                  : 32;\
          }
    union { UNSG32 u32MoltresReg_SOC_ID;
            struct w32MoltresReg_SOC_ID;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_CTRL2_global_cg_bypass(r32)      _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_CTRL2_global_cg_bypass(r32,v)    _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_CTRL2_global_cg_bypass(r16)      _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_CTRL2_global_cg_bypass(r16,v)    _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_CTRL2_cg_bypass(r32)             _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_CTRL2_cg_bypass(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_CTRL2_cg_bypass(r16)             _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_CTRL2_cg_bypass(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_CTRL2_sram_bypass(r32)           _BFGET_(r32, 2, 2)
    #define   SET32MoltresReg_CTRL2_sram_bypass(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16MoltresReg_CTRL2_sram_bypass(r16)           _BFGET_(r16, 2, 2)
    #define   SET16MoltresReg_CTRL2_sram_bypass(r16,v)         _BFSET_(r16, 2, 2,v)

    #define     w32MoltresReg_CTRL2                            {\
            UNSG32 uCTRL2_global_cg_bypass                     :  1;\
            UNSG32 uCTRL2_cg_bypass                            :  1;\
            UNSG32 uCTRL2_sram_bypass                          :  1;\
            UNSG32 RSVDxC_b3                                   : 29;\
          }
    union { UNSG32 u32MoltresReg_CTRL2;
            struct w32MoltresReg_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_CTRL3_pclk_wfi_en(r32)           _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_CTRL3_pclk_wfi_en(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_CTRL3_pclk_wfi_en(r16)           _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_CTRL3_pclk_wfi_en(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_CTRL3_sram_low_leak_dis(r32)     _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_CTRL3_sram_low_leak_dis(r32,v)   _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_CTRL3_sram_low_leak_dis(r16)     _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_CTRL3_sram_low_leak_dis(r16,v)   _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_CTRL3_sram_low_leak_en(r32)      _BFGET_(r32, 2, 2)
    #define   SET32MoltresReg_CTRL3_sram_low_leak_en(r32,v)    _BFSET_(r32, 2, 2,v)
    #define   GET16MoltresReg_CTRL3_sram_low_leak_en(r16)      _BFGET_(r16, 2, 2)
    #define   SET16MoltresReg_CTRL3_sram_low_leak_en(r16,v)    _BFSET_(r16, 2, 2,v)

    #define   GET32MoltresReg_CTRL3_l2_sram_low_leak_dis(r32)  _BFGET_(r32, 3, 3)
    #define   SET32MoltresReg_CTRL3_l2_sram_low_leak_dis(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16MoltresReg_CTRL3_l2_sram_low_leak_dis(r16)  _BFGET_(r16, 3, 3)
    #define   SET16MoltresReg_CTRL3_l2_sram_low_leak_dis(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32MoltresReg_CTRL3_l2_sram_low_leak_en(r32)   _BFGET_(r32, 4, 4)
    #define   SET32MoltresReg_CTRL3_l2_sram_low_leak_en(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16MoltresReg_CTRL3_l2_sram_low_leak_en(r16)   _BFGET_(r16, 4, 4)
    #define   SET16MoltresReg_CTRL3_l2_sram_low_leak_en(r16,v) _BFSET_(r16, 4, 4,v)

    #define   GET32MoltresReg_CTRL3_iso_dbgpwr_mode_en_l(r32)  _BFGET_(r32, 5, 5)
    #define   SET32MoltresReg_CTRL3_iso_dbgpwr_mode_en_l(r32,v) _BFSET_(r32, 5, 5,v)
    #define   GET16MoltresReg_CTRL3_iso_dbgpwr_mode_en_l(r16)  _BFGET_(r16, 5, 5)
    #define   SET16MoltresReg_CTRL3_iso_dbgpwr_mode_en_l(r16,v) _BFSET_(r16, 5, 5,v)

    #define   GET32MoltresReg_CTRL3_dbg_clock_enable(r32)      _BFGET_(r32, 6, 6)
    #define   SET32MoltresReg_CTRL3_dbg_clock_enable(r32,v)    _BFSET_(r32, 6, 6,v)
    #define   GET16MoltresReg_CTRL3_dbg_clock_enable(r16)      _BFGET_(r16, 6, 6)
    #define   SET16MoltresReg_CTRL3_dbg_clock_enable(r16,v)    _BFSET_(r16, 6, 6,v)

    #define   GET32MoltresReg_CTRL3_soc_jtag_idle(r32)         _BFGET_(r32, 7, 7)
    #define   SET32MoltresReg_CTRL3_soc_jtag_idle(r32,v)       _BFSET_(r32, 7, 7,v)
    #define   GET16MoltresReg_CTRL3_soc_jtag_idle(r16)         _BFGET_(r16, 7, 7)
    #define   SET16MoltresReg_CTRL3_soc_jtag_idle(r16,v)       _BFSET_(r16, 7, 7,v)

    #define   GET32MoltresReg_CTRL3_biu_idle_req(r32)          _BFGET_(r32, 8, 8)
    #define   SET32MoltresReg_CTRL3_biu_idle_req(r32,v)        _BFSET_(r32, 8, 8,v)
    #define   GET16MoltresReg_CTRL3_biu_idle_req(r16)          _BFGET_(r16, 8, 8)
    #define   SET16MoltresReg_CTRL3_biu_idle_req(r16,v)        _BFSET_(r16, 8, 8,v)

    #define   GET32MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass(r32) _BFGET_(r32, 9, 9)
    #define   SET32MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass(r32,v) _BFSET_(r32, 9, 9,v)
    #define   GET16MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass(r16) _BFGET_(r16, 9, 9)
    #define   SET16MoltresReg_CTRL3_iso_mode_udr_en_l_soc_bypass(r16,v) _BFSET_(r16, 9, 9,v)

    #define   GET32MoltresReg_CTRL3_iso_mode_udr_en_l_soc(r32) _BFGET_(r32,10,10)
    #define   SET32MoltresReg_CTRL3_iso_mode_udr_en_l_soc(r32,v) _BFSET_(r32,10,10,v)
    #define   GET16MoltresReg_CTRL3_iso_mode_udr_en_l_soc(r16) _BFGET_(r16,10,10)
    #define   SET16MoltresReg_CTRL3_iso_mode_udr_en_l_soc(r16,v) _BFSET_(r16,10,10,v)

    #define   GET32MoltresReg_CTRL3_cpu_power_on(r32)          _BFGET_(r32,11,11)
    #define   SET32MoltresReg_CTRL3_cpu_power_on(r32,v)        _BFSET_(r32,11,11,v)
    #define   GET16MoltresReg_CTRL3_cpu_power_on(r16)          _BFGET_(r16,11,11)
    #define   SET16MoltresReg_CTRL3_cpu_power_on(r16,v)        _BFSET_(r16,11,11,v)

    #define   GET32MoltresReg_CTRL3_sram_pdwn_en(r32)          _BFGET_(r32,12,12)
    #define   SET32MoltresReg_CTRL3_sram_pdwn_en(r32,v)        _BFSET_(r32,12,12,v)
    #define   GET16MoltresReg_CTRL3_sram_pdwn_en(r16)          _BFGET_(r16,12,12)
    #define   SET16MoltresReg_CTRL3_sram_pdwn_en(r16,v)        _BFSET_(r16,12,12,v)

    #define   GET32MoltresReg_CTRL3_cpu_pdwn_en(r32)           _BFGET_(r32,13,13)
    #define   SET32MoltresReg_CTRL3_cpu_pdwn_en(r32,v)         _BFSET_(r32,13,13,v)
    #define   GET16MoltresReg_CTRL3_cpu_pdwn_en(r16)           _BFGET_(r16,13,13)
    #define   SET16MoltresReg_CTRL3_cpu_pdwn_en(r16,v)         _BFSET_(r16,13,13,v)

    #define   GET32MoltresReg_CTRL3_clock_pwrup_disable_l(r32) _BFGET_(r32,14,14)
    #define   SET32MoltresReg_CTRL3_clock_pwrup_disable_l(r32,v) _BFSET_(r32,14,14,v)
    #define   GET16MoltresReg_CTRL3_clock_pwrup_disable_l(r16) _BFGET_(r16,14,14)
    #define   SET16MoltresReg_CTRL3_clock_pwrup_disable_l(r16,v) _BFSET_(r16,14,14,v)

    #define   GET32MoltresReg_CTRL3_pdfvssm(r32)               _BFGET_(r32,15,15)
    #define   SET32MoltresReg_CTRL3_pdfvssm(r32,v)             _BFSET_(r32,15,15,v)
    #define   GET16MoltresReg_CTRL3_pdfvssm(r16)               _BFGET_(r16,15,15)
    #define   SET16MoltresReg_CTRL3_pdfvssm(r16,v)             _BFSET_(r16,15,15,v)

    #define   GET32MoltresReg_CTRL3_pdlvmc(r32)                _BFGET_(r32,16,16)
    #define   SET32MoltresReg_CTRL3_pdlvmc(r32,v)              _BFSET_(r32,16,16,v)
    #define   GET16MoltresReg_CTRL3_pdlvmc(r16)                _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_CTRL3_pdlvmc(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_CTRL3_pwdn_precond(r32)          _BFGET_(r32,17,17)
    #define   SET32MoltresReg_CTRL3_pwdn_precond(r32,v)        _BFSET_(r32,17,17,v)
    #define   GET16MoltresReg_CTRL3_pwdn_precond(r16)          _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_CTRL3_pwdn_precond(r16,v)        _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_CTRL3_sram_after_pdwn_cycle(r32) _BFGET_(r32,23,18)
    #define   SET32MoltresReg_CTRL3_sram_after_pdwn_cycle(r32,v) _BFSET_(r32,23,18,v)
    #define   GET16MoltresReg_CTRL3_sram_after_pdwn_cycle(r16) _BFGET_(r16, 7, 2)
    #define   SET16MoltresReg_CTRL3_sram_after_pdwn_cycle(r16,v) _BFSET_(r16, 7, 2,v)

    #define   GET32MoltresReg_CTRL3_sram_vddmcvss_ctrl_en(r32) _BFGET_(r32,24,24)
    #define   SET32MoltresReg_CTRL3_sram_vddmcvss_ctrl_en(r32,v) _BFSET_(r32,24,24,v)
    #define   GET16MoltresReg_CTRL3_sram_vddmcvss_ctrl_en(r16) _BFGET_(r16, 8, 8)
    #define   SET16MoltresReg_CTRL3_sram_vddmcvss_ctrl_en(r16,v) _BFSET_(r16, 8, 8,v)

    #define   GET32MoltresReg_CTRL3_sram_vddmc_restored(r32)   _BFGET_(r32,25,25)
    #define   SET32MoltresReg_CTRL3_sram_vddmc_restored(r32,v) _BFSET_(r32,25,25,v)
    #define   GET16MoltresReg_CTRL3_sram_vddmc_restored(r16)   _BFGET_(r16, 9, 9)
    #define   SET16MoltresReg_CTRL3_sram_vddmc_restored(r16,v) _BFSET_(r16, 9, 9,v)

    #define   GET32MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en(r32) _BFGET_(r32,26,26)
    #define   SET32MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en(r32,v) _BFSET_(r32,26,26,v)
    #define   GET16MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en(r16) _BFGET_(r16,10,10)
    #define   SET16MoltresReg_CTRL3_l2_sram_vddmcvss_ctrl_en(r16,v) _BFSET_(r16,10,10,v)

    #define     w32MoltresReg_CTRL3                            {\
            UNSG32 uCTRL3_pclk_wfi_en                          :  1;\
            UNSG32 uCTRL3_sram_low_leak_dis                    :  1;\
            UNSG32 uCTRL3_sram_low_leak_en                     :  1;\
            UNSG32 uCTRL3_l2_sram_low_leak_dis                 :  1;\
            UNSG32 uCTRL3_l2_sram_low_leak_en                  :  1;\
            UNSG32 uCTRL3_iso_dbgpwr_mode_en_l                 :  1;\
            UNSG32 uCTRL3_dbg_clock_enable                     :  1;\
            UNSG32 uCTRL3_soc_jtag_idle                        :  1;\
            UNSG32 uCTRL3_biu_idle_req                         :  1;\
            UNSG32 uCTRL3_iso_mode_udr_en_l_soc_bypass         :  1;\
            UNSG32 uCTRL3_iso_mode_udr_en_l_soc                :  1;\
            UNSG32 uCTRL3_cpu_power_on                         :  1;\
            UNSG32 uCTRL3_sram_pdwn_en                         :  1;\
            UNSG32 uCTRL3_cpu_pdwn_en                          :  1;\
            UNSG32 uCTRL3_clock_pwrup_disable_l                :  1;\
            UNSG32 uCTRL3_pdfvssm                              :  1;\
            UNSG32 uCTRL3_pdlvmc                               :  1;\
            UNSG32 uCTRL3_pwdn_precond                         :  1;\
            UNSG32 uCTRL3_sram_after_pdwn_cycle                :  6;\
            UNSG32 uCTRL3_sram_vddmcvss_ctrl_en                :  1;\
            UNSG32 uCTRL3_sram_vddmc_restored                  :  1;\
            UNSG32 uCTRL3_l2_sram_vddmcvss_ctrl_en             :  1;\
            UNSG32 RSVDx10_b27                                 :  5;\
          }
    union { UNSG32 u32MoltresReg_CTRL3;
            struct w32MoltresReg_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_CTRL4_l2c_errd_init(r32)         _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_CTRL4_l2c_errd_init(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_CTRL4_l2c_errd_init(r16)         _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_CTRL4_l2c_errd_init(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_CTRL4_l2c_enable_init(r32)       _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_CTRL4_l2c_enable_init(r32,v)     _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_CTRL4_l2c_enable_init(r16)       _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_CTRL4_l2c_enable_init(r16,v)     _BFSET_(r16, 1, 1,v)

    #define     w32MoltresReg_CTRL4                            {\
            UNSG32 uCTRL4_l2c_errd_init                        :  1;\
            UNSG32 uCTRL4_l2c_enable_init                      :  1;\
            UNSG32 RSVDx14_b2                                  : 30;\
          }
    union { UNSG32 u32MoltresReg_CTRL4;
            struct w32MoltresReg_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_CTRL5_dbgen(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_CTRL5_dbgen(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_CTRL5_dbgen(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_CTRL5_dbgen(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_CTRL5_spiden(r32)                _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_CTRL5_spiden(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_CTRL5_spiden(r16)                _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_CTRL5_spiden(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_CTRL5_niden(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32MoltresReg_CTRL5_niden(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16MoltresReg_CTRL5_niden(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16MoltresReg_CTRL5_niden(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32MoltresReg_CTRL5_spniden(r32)               _BFGET_(r32, 3, 3)
    #define   SET32MoltresReg_CTRL5_spniden(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16MoltresReg_CTRL5_spniden(r16)               _BFGET_(r16, 3, 3)
    #define   SET16MoltresReg_CTRL5_spniden(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32MoltresReg_CTRL5_dbgrq(r32)                 _BFGET_(r32, 4, 4)
    #define   SET32MoltresReg_CTRL5_dbgrq(r32,v)               _BFSET_(r32, 4, 4,v)
    #define   GET16MoltresReg_CTRL5_dbgrq(r16)                 _BFGET_(r16, 4, 4)
    #define   SET16MoltresReg_CTRL5_dbgrq(r16,v)               _BFSET_(r16, 4, 4,v)

    #define   GET32MoltresReg_CTRL5_TPCTL(r32)                 _BFGET_(r32, 5, 5)
    #define   SET32MoltresReg_CTRL5_TPCTL(r32,v)               _BFSET_(r32, 5, 5,v)
    #define   GET16MoltresReg_CTRL5_TPCTL(r16)                 _BFGET_(r16, 5, 5)
    #define   SET16MoltresReg_CTRL5_TPCTL(r16,v)               _BFSET_(r16, 5, 5,v)

    #define   GET32MoltresReg_CTRL5_TPMAXDATASIZE(r32)         _BFGET_(r32,10, 6)
    #define   SET32MoltresReg_CTRL5_TPMAXDATASIZE(r32,v)       _BFSET_(r32,10, 6,v)
    #define   GET16MoltresReg_CTRL5_TPMAXDATASIZE(r16)         _BFGET_(r16,10, 6)
    #define   SET16MoltresReg_CTRL5_TPMAXDATASIZE(r16,v)       _BFSET_(r16,10, 6,v)

    #define   GET32MoltresReg_CTRL5_DEVICEEN(r32)              _BFGET_(r32,11,11)
    #define   SET32MoltresReg_CTRL5_DEVICEEN(r32,v)            _BFSET_(r32,11,11,v)
    #define   GET16MoltresReg_CTRL5_DEVICEEN(r16)              _BFGET_(r16,11,11)
    #define   SET16MoltresReg_CTRL5_DEVICEEN(r16,v)            _BFSET_(r16,11,11,v)

    #define     w32MoltresReg_CTRL5                            {\
            UNSG32 uCTRL5_dbgen                                :  1;\
            UNSG32 uCTRL5_spiden                               :  1;\
            UNSG32 uCTRL5_niden                                :  1;\
            UNSG32 uCTRL5_spniden                              :  1;\
            UNSG32 uCTRL5_dbgrq                                :  1;\
            UNSG32 uCTRL5_TPCTL                                :  1;\
            UNSG32 uCTRL5_TPMAXDATASIZE                        :  5;\
            UNSG32 uCTRL5_DEVICEEN                             :  1;\
            UNSG32 RSVDx18_b12                                 : 20;\
          }
    union { UNSG32 u32MoltresReg_CTRL5;
            struct w32MoltresReg_CTRL5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_ClockEnable_CPU0(r32)            _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_ClockEnable_CPU0(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_ClockEnable_CPU0(r16)            _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_ClockEnable_CPU0(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_ClockEnable_CPU1(r32)            _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_ClockEnable_CPU1(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_ClockEnable_CPU1(r16)            _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_ClockEnable_CPU1(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_ClockEnable_CPUAxi(r32)          _BFGET_(r32, 2, 2)
    #define   SET32MoltresReg_ClockEnable_CPUAxi(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16MoltresReg_ClockEnable_CPUAxi(r16)          _BFGET_(r16, 2, 2)
    #define   SET16MoltresReg_ClockEnable_CPUAxi(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32MoltresReg_ClockEnable_Perif(r32)           _BFGET_(r32, 3, 3)
    #define   SET32MoltresReg_ClockEnable_Perif(r32,v)         _BFSET_(r32, 3, 3,v)
    #define   GET16MoltresReg_ClockEnable_Perif(r16)           _BFGET_(r16, 3, 3)
    #define   SET16MoltresReg_ClockEnable_Perif(r16,v)         _BFSET_(r16, 3, 3,v)

    #define   GET32MoltresReg_ClockEnable_Timer(r32)           _BFGET_(r32, 4, 4)
    #define   SET32MoltresReg_ClockEnable_Timer(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16MoltresReg_ClockEnable_Timer(r16)           _BFGET_(r16, 4, 4)
    #define   SET16MoltresReg_ClockEnable_Timer(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32MoltresReg_ClockEnable_dbgpclk(r32)         _BFGET_(r32, 5, 5)
    #define   SET32MoltresReg_ClockEnable_dbgpclk(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16MoltresReg_ClockEnable_dbgpclk(r16)         _BFGET_(r16, 5, 5)
    #define   SET16MoltresReg_ClockEnable_dbgpclk(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32MoltresReg_ClockEnable_atclk(r32)           _BFGET_(r32, 6, 6)
    #define   SET32MoltresReg_ClockEnable_atclk(r32,v)         _BFSET_(r32, 6, 6,v)
    #define   GET16MoltresReg_ClockEnable_atclk(r16)           _BFGET_(r16, 6, 6)
    #define   SET16MoltresReg_ClockEnable_atclk(r16,v)         _BFSET_(r16, 6, 6,v)

    #define     w32MoltresReg_ClockEnable                      {\
            UNSG32 uClockEnable_CPU0                           :  1;\
            UNSG32 uClockEnable_CPU1                           :  1;\
            UNSG32 uClockEnable_CPUAxi                         :  1;\
            UNSG32 uClockEnable_Perif                          :  1;\
            UNSG32 uClockEnable_Timer                          :  1;\
            UNSG32 uClockEnable_dbgpclk                        :  1;\
            UNSG32 uClockEnable_atclk                          :  1;\
            UNSG32 RSVDx1C_b7                                  : 25;\
          }
    union { UNSG32 u32MoltresReg_ClockEnable;
            struct w32MoltresReg_ClockEnable;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_SoftResetn_CPU0(r32)             _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_SoftResetn_CPU0(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_SoftResetn_CPU0(r16)             _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_SoftResetn_CPU0(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_SoftResetn_CPU1(r32)             _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_SoftResetn_CPU1(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_SoftResetn_CPU1(r16)             _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_SoftResetn_CPU1(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32MoltresReg_SoftResetn_CPUAxi(r32)           _BFGET_(r32, 2, 2)
    #define   SET32MoltresReg_SoftResetn_CPUAxi(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16MoltresReg_SoftResetn_CPUAxi(r16)           _BFGET_(r16, 2, 2)
    #define   SET16MoltresReg_SoftResetn_CPUAxi(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32MoltresReg_SoftResetn_Perif(r32)            _BFGET_(r32, 3, 3)
    #define   SET32MoltresReg_SoftResetn_Perif(r32,v)          _BFSET_(r32, 3, 3,v)
    #define   GET16MoltresReg_SoftResetn_Perif(r16)            _BFGET_(r16, 3, 3)
    #define   SET16MoltresReg_SoftResetn_Perif(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32MoltresReg_SoftResetn_Timer(r32)            _BFGET_(r32, 4, 4)
    #define   SET32MoltresReg_SoftResetn_Timer(r32,v)          _BFSET_(r32, 4, 4,v)
    #define   GET16MoltresReg_SoftResetn_Timer(r16)            _BFGET_(r16, 4, 4)
    #define   SET16MoltresReg_SoftResetn_Timer(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32MoltresReg_SoftResetn_WatchDog0(r32)        _BFGET_(r32, 5, 5)
    #define   SET32MoltresReg_SoftResetn_WatchDog0(r32,v)      _BFSET_(r32, 5, 5,v)
    #define   GET16MoltresReg_SoftResetn_WatchDog0(r16)        _BFGET_(r16, 5, 5)
    #define   SET16MoltresReg_SoftResetn_WatchDog0(r16,v)      _BFSET_(r16, 5, 5,v)

    #define   GET32MoltresReg_SoftResetn_WatchDog1(r32)        _BFGET_(r32, 6, 6)
    #define   SET32MoltresReg_SoftResetn_WatchDog1(r32,v)      _BFSET_(r32, 6, 6,v)
    #define   GET16MoltresReg_SoftResetn_WatchDog1(r16)        _BFGET_(r16, 6, 6)
    #define   SET16MoltresReg_SoftResetn_WatchDog1(r16,v)      _BFSET_(r16, 6, 6,v)

    #define   GET32MoltresReg_SoftResetn_MpSubSys(r32)         _BFGET_(r32, 7, 7)
    #define   SET32MoltresReg_SoftResetn_MpSubSys(r32,v)       _BFSET_(r32, 7, 7,v)
    #define   GET16MoltresReg_SoftResetn_MpSubSys(r16)         _BFGET_(r16, 7, 7)
    #define   SET16MoltresReg_SoftResetn_MpSubSys(r16,v)       _BFSET_(r16, 7, 7,v)

    #define   GET32MoltresReg_SoftResetn_CoreSight(r32)        _BFGET_(r32, 8, 8)
    #define   SET32MoltresReg_SoftResetn_CoreSight(r32,v)      _BFSET_(r32, 8, 8,v)
    #define   GET16MoltresReg_SoftResetn_CoreSight(r16)        _BFGET_(r16, 8, 8)
    #define   SET16MoltresReg_SoftResetn_CoreSight(r16,v)      _BFSET_(r16, 8, 8,v)

    #define     w32MoltresReg_SoftResetn                       {\
            UNSG32 uSoftResetn_CPU0                            :  1;\
            UNSG32 uSoftResetn_CPU1                            :  1;\
            UNSG32 uSoftResetn_CPUAxi                          :  1;\
            UNSG32 uSoftResetn_Perif                           :  1;\
            UNSG32 uSoftResetn_Timer                           :  1;\
            UNSG32 uSoftResetn_WatchDog0                       :  1;\
            UNSG32 uSoftResetn_WatchDog1                       :  1;\
            UNSG32 uSoftResetn_MpSubSys                        :  1;\
            UNSG32 uSoftResetn_CoreSight                       :  1;\
            UNSG32 RSVDx20_b9                                  : 23;\
          }
    union { UNSG32 u32MoltresReg_SoftResetn;
            struct w32MoltresReg_SoftResetn;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_wdResetCtrl_cpu0(r32)            _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_wdResetCtrl_cpu0(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_wdResetCtrl_cpu0(r16)            _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_wdResetCtrl_cpu0(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_wdResetCtrl_cpu1(r32)            _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_wdResetCtrl_cpu1(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_wdResetCtrl_cpu1(r16)            _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_wdResetCtrl_cpu1(r16,v)          _BFSET_(r16, 1, 1,v)

    #define     w32MoltresReg_wdResetCtrl                      {\
            UNSG32 uwdResetCtrl_cpu0                           :  1;\
            UNSG32 uwdResetCtrl_cpu1                           :  1;\
            UNSG32 RSVDx24_b2                                  : 30;\
          }
    union { UNSG32 u32MoltresReg_wdResetCtrl;
            struct w32MoltresReg_wdResetCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_sysIntPol_invert(r32)            _BFGET_(r32,31, 0)
    #define   SET32MoltresReg_sysIntPol_invert(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32MoltresReg_sysIntPol                        {\
            UNSG32 usysIntPol_invert                           : 32;\
          }
    union { UNSG32 u32MoltresReg_sysIntPol;
            struct w32MoltresReg_sysIntPol;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_csClkCtrl_clkD3Switch(r32)       _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_csClkCtrl_clkD3Switch(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_csClkCtrl_clkD3Switch(r16)       _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_csClkCtrl_clkD3Switch(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_csClkCtrl_clkSel(r32)            _BFGET_(r32, 3, 1)
    #define   SET32MoltresReg_csClkCtrl_clkSel(r32,v)          _BFSET_(r32, 3, 1,v)
    #define   GET16MoltresReg_csClkCtrl_clkSel(r16)            _BFGET_(r16, 3, 1)
    #define   SET16MoltresReg_csClkCtrl_clkSel(r16,v)          _BFSET_(r16, 3, 1,v)

    #define     w32MoltresReg_csClkCtrl                        {\
            UNSG32 ucsClkCtrl_clkD3Switch                      :  1;\
            UNSG32 ucsClkCtrl_clkSel                           :  3;\
            UNSG32 RSVDx2C_b4                                  : 28;\
          }
    union { UNSG32 u32MoltresReg_csClkCtrl;
            struct w32MoltresReg_csClkCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_perifClkCtrl_clkD3Switch(r32)    _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_perifClkCtrl_clkD3Switch(r32,v)  _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_perifClkCtrl_clkD3Switch(r16)    _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_perifClkCtrl_clkD3Switch(r16,v)  _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_perifClkCtrl_clkSel(r32)         _BFGET_(r32, 3, 1)
    #define   SET32MoltresReg_perifClkCtrl_clkSel(r32,v)       _BFSET_(r32, 3, 1,v)
    #define   GET16MoltresReg_perifClkCtrl_clkSel(r16)         _BFGET_(r16, 3, 1)
    #define   SET16MoltresReg_perifClkCtrl_clkSel(r16,v)       _BFSET_(r16, 3, 1,v)

    #define     w32MoltresReg_perifClkCtrl                     {\
            UNSG32 uperifClkCtrl_clkD3Switch                   :  1;\
            UNSG32 uperifClkCtrl_clkSel                        :  3;\
            UNSG32 RSVDx30_b4                                  : 28;\
          }
    union { UNSG32 u32MoltresReg_perifClkCtrl;
            struct w32MoltresReg_perifClkCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_timerClkCtrl_clkD3Switch(r32)    _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_timerClkCtrl_clkD3Switch(r32,v)  _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_timerClkCtrl_clkD3Switch(r16)    _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_timerClkCtrl_clkD3Switch(r16,v)  _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_timerClkCtrl_clkSel(r32)         _BFGET_(r32, 3, 1)
    #define   SET32MoltresReg_timerClkCtrl_clkSel(r32,v)       _BFSET_(r32, 3, 1,v)
    #define   GET16MoltresReg_timerClkCtrl_clkSel(r16)         _BFGET_(r16, 3, 1)
    #define   SET16MoltresReg_timerClkCtrl_clkSel(r16,v)       _BFSET_(r16, 3, 1,v)

    #define     w32MoltresReg_timerClkCtrl                     {\
            UNSG32 utimerClkCtrl_clkD3Switch                   :  1;\
            UNSG32 utimerClkCtrl_clkSel                        :  3;\
            UNSG32 RSVDx34_b4                                  : 28;\
          }
    union { UNSG32 u32MoltresReg_timerClkCtrl;
            struct w32MoltresReg_timerClkCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_GIC_INT_MASK_core0(r32)          _BFGET_(r32, 0, 0)
    #define   SET32MoltresReg_GIC_INT_MASK_core0(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16MoltresReg_GIC_INT_MASK_core0(r16)          _BFGET_(r16, 0, 0)
    #define   SET16MoltresReg_GIC_INT_MASK_core0(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32MoltresReg_GIC_INT_MASK_core1(r32)          _BFGET_(r32, 1, 1)
    #define   SET32MoltresReg_GIC_INT_MASK_core1(r32,v)        _BFSET_(r32, 1, 1,v)
    #define   GET16MoltresReg_GIC_INT_MASK_core1(r16)          _BFGET_(r16, 1, 1)
    #define   SET16MoltresReg_GIC_INT_MASK_core1(r16,v)        _BFSET_(r16, 1, 1,v)

    #define     w32MoltresReg_GIC_INT_MASK                     {\
            UNSG32 uGIC_INT_MASK_core0                         :  1;\
            UNSG32 uGIC_INT_MASK_core1                         :  1;\
            UNSG32 RSVDx38_b2                                  : 30;\
          }
    union { UNSG32 u32MoltresReg_GIC_INT_MASK;
            struct w32MoltresReg_GIC_INT_MASK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_PTM_CTRL_core_freq_change(r32)   _BFGET_(r32, 1, 0)
    #define   SET32MoltresReg_PTM_CTRL_core_freq_change(r32,v) _BFSET_(r32, 1, 0,v)
    #define   GET16MoltresReg_PTM_CTRL_core_freq_change(r16)   _BFGET_(r16, 1, 0)
    #define   SET16MoltresReg_PTM_CTRL_core_freq_change(r16,v) _BFSET_(r16, 1, 0,v)

    #define     w32MoltresReg_PTM_CTRL                         {\
            UNSG32 uPTM_CTRL_core_freq_change                  :  2;\
            UNSG32 RSVDx3C_b2                                  : 30;\
          }
    union { UNSG32 u32MoltresReg_PTM_CTRL;
            struct w32MoltresReg_PTM_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MoltresReg_dummy_dummy(r32)                 _BFGET_(r32,31, 0)
    #define   SET32MoltresReg_dummy_dummy(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32MoltresReg_dummy                            {\
            UNSG32 udummy_dummy                                : 32;\
          }
    union { UNSG32 u32MoltresReg_dummy;
            struct w32MoltresReg_dummy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MoltresReg;

    typedef union  T32MoltresReg_CTRL0
          { UNSG32 u32;
            struct w32MoltresReg_CTRL0;
                 } T32MoltresReg_CTRL0;
    typedef union  T32MoltresReg_CTRL1
          { UNSG32 u32;
            struct w32MoltresReg_CTRL1;
                 } T32MoltresReg_CTRL1;
    typedef union  T32MoltresReg_SOC_ID
          { UNSG32 u32;
            struct w32MoltresReg_SOC_ID;
                 } T32MoltresReg_SOC_ID;
    typedef union  T32MoltresReg_CTRL2
          { UNSG32 u32;
            struct w32MoltresReg_CTRL2;
                 } T32MoltresReg_CTRL2;
    typedef union  T32MoltresReg_CTRL3
          { UNSG32 u32;
            struct w32MoltresReg_CTRL3;
                 } T32MoltresReg_CTRL3;
    typedef union  T32MoltresReg_CTRL4
          { UNSG32 u32;
            struct w32MoltresReg_CTRL4;
                 } T32MoltresReg_CTRL4;
    typedef union  T32MoltresReg_CTRL5
          { UNSG32 u32;
            struct w32MoltresReg_CTRL5;
                 } T32MoltresReg_CTRL5;
    typedef union  T32MoltresReg_ClockEnable
          { UNSG32 u32;
            struct w32MoltresReg_ClockEnable;
                 } T32MoltresReg_ClockEnable;
    typedef union  T32MoltresReg_SoftResetn
          { UNSG32 u32;
            struct w32MoltresReg_SoftResetn;
                 } T32MoltresReg_SoftResetn;
    typedef union  T32MoltresReg_wdResetCtrl
          { UNSG32 u32;
            struct w32MoltresReg_wdResetCtrl;
                 } T32MoltresReg_wdResetCtrl;
    typedef union  T32MoltresReg_sysIntPol
          { UNSG32 u32;
            struct w32MoltresReg_sysIntPol;
                 } T32MoltresReg_sysIntPol;
    typedef union  T32MoltresReg_csClkCtrl
          { UNSG32 u32;
            struct w32MoltresReg_csClkCtrl;
                 } T32MoltresReg_csClkCtrl;
    typedef union  T32MoltresReg_perifClkCtrl
          { UNSG32 u32;
            struct w32MoltresReg_perifClkCtrl;
                 } T32MoltresReg_perifClkCtrl;
    typedef union  T32MoltresReg_timerClkCtrl
          { UNSG32 u32;
            struct w32MoltresReg_timerClkCtrl;
                 } T32MoltresReg_timerClkCtrl;
    typedef union  T32MoltresReg_GIC_INT_MASK
          { UNSG32 u32;
            struct w32MoltresReg_GIC_INT_MASK;
                 } T32MoltresReg_GIC_INT_MASK;
    typedef union  T32MoltresReg_PTM_CTRL
          { UNSG32 u32;
            struct w32MoltresReg_PTM_CTRL;
                 } T32MoltresReg_PTM_CTRL;
    typedef union  T32MoltresReg_dummy
          { UNSG32 u32;
            struct w32MoltresReg_dummy;
                 } T32MoltresReg_dummy;
    ///////////////////////////////////////////////////////////

    typedef union  TMoltresReg_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_CTRL0;
                   };
                 } TMoltresReg_CTRL0;
    typedef union  TMoltresReg_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_CTRL1;
                   };
                 } TMoltresReg_CTRL1;
    typedef union  TMoltresReg_SOC_ID
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_SOC_ID;
                   };
                 } TMoltresReg_SOC_ID;
    typedef union  TMoltresReg_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_CTRL2;
                   };
                 } TMoltresReg_CTRL2;
    typedef union  TMoltresReg_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_CTRL3;
                   };
                 } TMoltresReg_CTRL3;
    typedef union  TMoltresReg_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_CTRL4;
                   };
                 } TMoltresReg_CTRL4;
    typedef union  TMoltresReg_CTRL5
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_CTRL5;
                   };
                 } TMoltresReg_CTRL5;
    typedef union  TMoltresReg_ClockEnable
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_ClockEnable;
                   };
                 } TMoltresReg_ClockEnable;
    typedef union  TMoltresReg_SoftResetn
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_SoftResetn;
                   };
                 } TMoltresReg_SoftResetn;
    typedef union  TMoltresReg_wdResetCtrl
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_wdResetCtrl;
                   };
                 } TMoltresReg_wdResetCtrl;
    typedef union  TMoltresReg_sysIntPol
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_sysIntPol;
                   };
                 } TMoltresReg_sysIntPol;
    typedef union  TMoltresReg_csClkCtrl
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_csClkCtrl;
                   };
                 } TMoltresReg_csClkCtrl;
    typedef union  TMoltresReg_perifClkCtrl
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_perifClkCtrl;
                   };
                 } TMoltresReg_perifClkCtrl;
    typedef union  TMoltresReg_timerClkCtrl
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_timerClkCtrl;
                   };
                 } TMoltresReg_timerClkCtrl;
    typedef union  TMoltresReg_GIC_INT_MASK
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_GIC_INT_MASK;
                   };
                 } TMoltresReg_GIC_INT_MASK;
    typedef union  TMoltresReg_PTM_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_PTM_CTRL;
                   };
                 } TMoltresReg_PTM_CTRL;
    typedef union  TMoltresReg_dummy
          { UNSG32 u32[1];
            struct {
            struct w32MoltresReg_dummy;
                   };
                 } TMoltresReg_dummy;

    ///////////////////////////////////////////////////////////
     SIGN32 MoltresReg_drvrd(SIE_MoltresReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MoltresReg_drvwr(SIE_MoltresReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MoltresReg_reset(SIE_MoltresReg *p);
     SIGN32 MoltresReg_cmp  (SIE_MoltresReg *p, SIE_MoltresReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MoltresReg_check(p,pie,pfx,hLOG) MoltresReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MoltresReg_print(p,    pfx,hLOG) MoltresReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MoltresReg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE IDReg                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               ###
///               * ID to {AxUSER, AxCACHE} mapping. Transaction is routed to IOB if (AxUSER | AxCACHE[1]) is true.
///               ###
///               %unsigned 4  AWCAHE                    0x0
///                                    ###
///                                    * AWCAHE corresponding to this ID.
///                                    ###
///               %unsigned 1  AWUSER                    0x0
///                                    ###
///                                    * AWUSER corresponding to this ID.
///                                    ###
///               %unsigned 4  ARCAHE                    0x0
///                                    ###
///                                    * ARCAHE corresponding to this ID.
///                                    ###
///               %unsigned 1  ARUSER                    0x0
///                                    ###
///                                    * ARUSER corresponding to this ID.
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      10b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IDReg
#define h_IDReg (){}

    #define     RA_IDReg_CTRL                                  0x0000

    #define     BA_IDReg_CTRL_AWCAHE                           0x0000
    #define     B16IDReg_CTRL_AWCAHE                           0x0000
    #define   LSb32IDReg_CTRL_AWCAHE                              0
    #define   LSb16IDReg_CTRL_AWCAHE                              0
    #define       bIDReg_CTRL_AWCAHE                           4
    #define   MSK32IDReg_CTRL_AWCAHE                              0x0000000F

    #define     BA_IDReg_CTRL_AWUSER                           0x0000
    #define     B16IDReg_CTRL_AWUSER                           0x0000
    #define   LSb32IDReg_CTRL_AWUSER                              4
    #define   LSb16IDReg_CTRL_AWUSER                              4
    #define       bIDReg_CTRL_AWUSER                           1
    #define   MSK32IDReg_CTRL_AWUSER                              0x00000010

    #define     BA_IDReg_CTRL_ARCAHE                           0x0000
    #define     B16IDReg_CTRL_ARCAHE                           0x0000
    #define   LSb32IDReg_CTRL_ARCAHE                              5
    #define   LSb16IDReg_CTRL_ARCAHE                              5
    #define       bIDReg_CTRL_ARCAHE                           4
    #define   MSK32IDReg_CTRL_ARCAHE                              0x000001E0

    #define     BA_IDReg_CTRL_ARUSER                           0x0001
    #define     B16IDReg_CTRL_ARUSER                           0x0000
    #define   LSb32IDReg_CTRL_ARUSER                              9
    #define   LSb16IDReg_CTRL_ARUSER                              9
    #define       bIDReg_CTRL_ARUSER                           1
    #define   MSK32IDReg_CTRL_ARUSER                              0x00000200
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IDReg {
    ///////////////////////////////////////////////////////////
    #define   GET32IDReg_CTRL_AWCAHE(r32)                      _BFGET_(r32, 3, 0)
    #define   SET32IDReg_CTRL_AWCAHE(r32,v)                    _BFSET_(r32, 3, 0,v)
    #define   GET16IDReg_CTRL_AWCAHE(r16)                      _BFGET_(r16, 3, 0)
    #define   SET16IDReg_CTRL_AWCAHE(r16,v)                    _BFSET_(r16, 3, 0,v)

    #define   GET32IDReg_CTRL_AWUSER(r32)                      _BFGET_(r32, 4, 4)
    #define   SET32IDReg_CTRL_AWUSER(r32,v)                    _BFSET_(r32, 4, 4,v)
    #define   GET16IDReg_CTRL_AWUSER(r16)                      _BFGET_(r16, 4, 4)
    #define   SET16IDReg_CTRL_AWUSER(r16,v)                    _BFSET_(r16, 4, 4,v)

    #define   GET32IDReg_CTRL_ARCAHE(r32)                      _BFGET_(r32, 8, 5)
    #define   SET32IDReg_CTRL_ARCAHE(r32,v)                    _BFSET_(r32, 8, 5,v)
    #define   GET16IDReg_CTRL_ARCAHE(r16)                      _BFGET_(r16, 8, 5)
    #define   SET16IDReg_CTRL_ARCAHE(r16,v)                    _BFSET_(r16, 8, 5,v)

    #define   GET32IDReg_CTRL_ARUSER(r32)                      _BFGET_(r32, 9, 9)
    #define   SET32IDReg_CTRL_ARUSER(r32,v)                    _BFSET_(r32, 9, 9,v)
    #define   GET16IDReg_CTRL_ARUSER(r16)                      _BFGET_(r16, 9, 9)
    #define   SET16IDReg_CTRL_ARUSER(r16,v)                    _BFSET_(r16, 9, 9,v)

    #define     w32IDReg_CTRL                                  {\
            UNSG32 uCTRL_AWCAHE                                :  4;\
            UNSG32 uCTRL_AWUSER                                :  1;\
            UNSG32 uCTRL_ARCAHE                                :  4;\
            UNSG32 uCTRL_ARUSER                                :  1;\
            UNSG32 RSVDx0_b10                                  : 22;\
          }
    union { UNSG32 u32IDReg_CTRL;
            struct w32IDReg_CTRL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_IDReg;

    typedef union  T32IDReg_CTRL
          { UNSG32 u32;
            struct w32IDReg_CTRL;
                 } T32IDReg_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TIDReg_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32IDReg_CTRL;
                   };
                 } TIDReg_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 IDReg_drvrd(SIE_IDReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IDReg_drvwr(SIE_IDReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IDReg_reset(SIE_IDReg *p);
     SIGN32 IDReg_cmp  (SIE_IDReg *p, SIE_IDReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IDReg_check(p,pie,pfx,hLOG) IDReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IDReg_print(p,    pfx,hLOG) IDReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IDReg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CA9Reg                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SoftResetn           (P)
///               ###
///               * .
///               ###
///               %unsigned 1  DBG0                      0x1
///                                    ###
///                                    * Active low reset for CPU0's debug logic. Connected to nDBGRESET[0]
///                                    ###
///               %unsigned 1  DBG1                      0x1
///                                    ###
///                                    * Active low reset for CPU1's debug logic. Connected to nDBGRESET[1]
///                                    ###
///               %unsigned 1  NEON0                     0x1
///                                    ###
///                                    * Active low reset connected to nNEONRESET[0] of CortexA9MP
///                                    ###
///               %unsigned 1  NEON1                     0x1
///                                    ###
///                                    * Active low reset connected to nNEONERESET[1] of CortexA9MP
///                                    ###
///               %unsigned 1  L2C                       0x1
///                                    ###
///                                    * Active low reset for L2Cache Controller
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00004 CTRL0                (P)
///               ###
///               * Additional CortexA9MP Controls . CTRL4 in BG3.
///               ###
///               %unsigned 3  maxclklatency             0x2
///                                    ###
///                                    * Implementation specific value indicating the number of clock cycles between the enable of a dynamic clock gate to the arrival of the clock at the DFFs of the design.
///                                    * In CortexA9, there is one DFF on the enable and targetted to have < 1 clock cycle of clock insertion delay. Hence the default value of 2.
///                                    * Software should never need to change this value.
///                                    ###
///               %unsigned 1  cfgsdisable               0x0
///                                    ###
///                                    * Disables write access to some system control processor registers:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 4  clusterid                 0x0
///                                    ###
///                                    * Value read in Cluster ID register field, bits [11:8] of the MPIDR
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00008 CTRL1                (P)
///               ###
///               * SCU Master Ports Address Filtering. CTRL5 in BG3
///               ###
///               %unsigned 1  filter_en                 0x0
///                                    ###
///                                    * Enables filtering of address ranges at reset, when nSCURESET deasserts.
///                                    ###
///               %unsigned 12 filter_start              0x800
///                                    ###
///                                    * Specifies the start address of address filtering at reset, when nSCURESET deasserts.
///                                    ###
///               %unsigned 12 filter_end                0xFFF
///                                    ###
///                                    * Specifies the end address of address filtering at reset, when nSCURESET deasserts.
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x0000C L2CTRL0              (P)
///               ###
///               * L2 Cache Controller Controls .Values are latched on reset by controller.
///               * Name preserved from BG3.
///               ###
///               %unsigned 6  cache_id                  0x0
///                                    ###
///                                    * Cache Controller Cache ID. Defines bits [15:10] of Cache ID Register
///                                    ###
///               %unsigned 1  associativity             0x1
///                                    ###
///                                    * L2 Cache Associativity. This value is implementation specific. Software should never need to change the default value.
///                                    * 0: 8-way
///                                    * 1: 16-way
///                                    ###
///               %unsigned 3  waysize                   0x2
///                                    ###
///                                    * L2 Cache Way Size. This value is implementation specific. Software should never need to change the default value.
///                                    * 0: Reserved
///                                    * 1: 16KB
///                                    * 2: 32KB
///                                    * 3: 64KB
///                                    * 4: 128KB
///                                    * 5: 256KB
///                                    * 6: 512KB
///                                    * 7: Reserved
///                                    ###
///               %unsigned 1  cfgbigend                 0x0
///                                    ###
///                                    * Sets endian mode for configuration register access at reset
///                                    * 0: Little-endian
///                                    * 1: Big-endian
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00010 L2CTRL1              (P)
///               ###
///               * L2 Cache AXI Master Ports Address Filtering
///               ###
///               %unsigned 1  filter_en                 0x1
///                                    ###
///                                    * Enables filtering of address ranges at reset
///                                    ###
///               %unsigned 12 filter_start              0x0
///                                    ###
///                                    * Specifies the start address of address filtering at reset
///                                    ###
///               %unsigned 12 filter_end                0x800
///                                    ###
///                                    * Specifies the end address of address filtering at reset. Default 2 GB
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00014 L2CLK                (P)
///               ###
///               * L2 Cache CLOCK select
///               ###
///               %unsigned 1  sel                       0x0
///                                    ###
///                                    * 0 : L2C CLK ratio 1:2
///                                    * 1 : L2C CLK ratio 1:1
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00018 STATUS0              (R-)
///               ###
///               * Output signals from CA9
///               ###
///               %unsigned 2  standbywfi                0x0
///                                    ###
///                                    * If only CPU0 present, ignore MSB
///                                    ###
///               %unsigned 2  standbywfe                0x0
///                                    ###
///                                    * If only CPU0 present, ignore MSB
///                                    ###
///               %unsigned 2  pmupriv                   0x0
///                                    ###
///                                    * If only CPU0 present, ignore MSB
///                                    ###
///               %unsigned 2  pmusecure                 0x0
///                                    ###
///                                    * If only CPU0 present, ignore MSB
///                                    ###
///               %unsigned 8  parityfail0               0x0
///               %unsigned 8  parityfail1               0x0
///               %unsigned 2  parityfailscu             0x0
///                                    ###
///                                    * If only CPU0 present, ignore MSB
///                                    ###
///               %unsigned 1  scuevabort                0x0
///               %unsigned 1  scuidle                   0x0
///               %unsigned 2  smpnamp                   0x0
///                                    ###
///                                    * If only CPU0 present, ignore MSB
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x0001C STATUS1              (R-)
///               ###
///               * Output signals from CA9
///               ###
///               %unsigned 2  nirqout                   0x0
///                                    ###
///                                    * If only CPU0 present, ignore MSB
///                                    ###
///               %unsigned 2  nfiqout                   0x0
///               %unsigned 7  deflags0                  0x0
///               %unsigned 7  deflags1                  0x0
///               %unsigned 1  idle_pl310                0x0
///               %unsigned 1  clkstopped_pl310          0x0
///               %unsigned 1  ptmidlenack0              0x0
///               %unsigned 1  ptmidlenack1              0x0
///               %%        10         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     127b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CA9Reg
#define h_CA9Reg (){}

    #define     RA_CA9Reg_SoftResetn                           0x0000

    #define     BA_CA9Reg_SoftResetn_DBG0                      0x0000
    #define     B16CA9Reg_SoftResetn_DBG0                      0x0000
    #define   LSb32CA9Reg_SoftResetn_DBG0                         0
    #define   LSb16CA9Reg_SoftResetn_DBG0                         0
    #define       bCA9Reg_SoftResetn_DBG0                      1
    #define   MSK32CA9Reg_SoftResetn_DBG0                         0x00000001

    #define     BA_CA9Reg_SoftResetn_DBG1                      0x0000
    #define     B16CA9Reg_SoftResetn_DBG1                      0x0000
    #define   LSb32CA9Reg_SoftResetn_DBG1                         1
    #define   LSb16CA9Reg_SoftResetn_DBG1                         1
    #define       bCA9Reg_SoftResetn_DBG1                      1
    #define   MSK32CA9Reg_SoftResetn_DBG1                         0x00000002

    #define     BA_CA9Reg_SoftResetn_NEON0                     0x0000
    #define     B16CA9Reg_SoftResetn_NEON0                     0x0000
    #define   LSb32CA9Reg_SoftResetn_NEON0                        2
    #define   LSb16CA9Reg_SoftResetn_NEON0                        2
    #define       bCA9Reg_SoftResetn_NEON0                     1
    #define   MSK32CA9Reg_SoftResetn_NEON0                        0x00000004

    #define     BA_CA9Reg_SoftResetn_NEON1                     0x0000
    #define     B16CA9Reg_SoftResetn_NEON1                     0x0000
    #define   LSb32CA9Reg_SoftResetn_NEON1                        3
    #define   LSb16CA9Reg_SoftResetn_NEON1                        3
    #define       bCA9Reg_SoftResetn_NEON1                     1
    #define   MSK32CA9Reg_SoftResetn_NEON1                        0x00000008

    #define     BA_CA9Reg_SoftResetn_L2C                       0x0000
    #define     B16CA9Reg_SoftResetn_L2C                       0x0000
    #define   LSb32CA9Reg_SoftResetn_L2C                          4
    #define   LSb16CA9Reg_SoftResetn_L2C                          4
    #define       bCA9Reg_SoftResetn_L2C                       1
    #define   MSK32CA9Reg_SoftResetn_L2C                          0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_CA9Reg_CTRL0                                0x0004

    #define     BA_CA9Reg_CTRL0_maxclklatency                  0x0004
    #define     B16CA9Reg_CTRL0_maxclklatency                  0x0004
    #define   LSb32CA9Reg_CTRL0_maxclklatency                     0
    #define   LSb16CA9Reg_CTRL0_maxclklatency                     0
    #define       bCA9Reg_CTRL0_maxclklatency                  3
    #define   MSK32CA9Reg_CTRL0_maxclklatency                     0x00000007

    #define     BA_CA9Reg_CTRL0_cfgsdisable                    0x0004
    #define     B16CA9Reg_CTRL0_cfgsdisable                    0x0004
    #define   LSb32CA9Reg_CTRL0_cfgsdisable                       3
    #define   LSb16CA9Reg_CTRL0_cfgsdisable                       3
    #define       bCA9Reg_CTRL0_cfgsdisable                    1
    #define   MSK32CA9Reg_CTRL0_cfgsdisable                       0x00000008

    #define     BA_CA9Reg_CTRL0_clusterid                      0x0004
    #define     B16CA9Reg_CTRL0_clusterid                      0x0004
    #define   LSb32CA9Reg_CTRL0_clusterid                         4
    #define   LSb16CA9Reg_CTRL0_clusterid                         4
    #define       bCA9Reg_CTRL0_clusterid                      4
    #define   MSK32CA9Reg_CTRL0_clusterid                         0x000000F0
    ///////////////////////////////////////////////////////////
    #define     RA_CA9Reg_CTRL1                                0x0008

    #define     BA_CA9Reg_CTRL1_filter_en                      0x0008
    #define     B16CA9Reg_CTRL1_filter_en                      0x0008
    #define   LSb32CA9Reg_CTRL1_filter_en                         0
    #define   LSb16CA9Reg_CTRL1_filter_en                         0
    #define       bCA9Reg_CTRL1_filter_en                      1
    #define   MSK32CA9Reg_CTRL1_filter_en                         0x00000001

    #define     BA_CA9Reg_CTRL1_filter_start                   0x0008
    #define     B16CA9Reg_CTRL1_filter_start                   0x0008
    #define   LSb32CA9Reg_CTRL1_filter_start                      1
    #define   LSb16CA9Reg_CTRL1_filter_start                      1
    #define       bCA9Reg_CTRL1_filter_start                   12
    #define   MSK32CA9Reg_CTRL1_filter_start                      0x00001FFE

    #define     BA_CA9Reg_CTRL1_filter_end                     0x0009
    #define     B16CA9Reg_CTRL1_filter_end                     0x0008
    #define   LSb32CA9Reg_CTRL1_filter_end                        13
    #define   LSb16CA9Reg_CTRL1_filter_end                        13
    #define       bCA9Reg_CTRL1_filter_end                     12
    #define   MSK32CA9Reg_CTRL1_filter_end                        0x01FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_CA9Reg_L2CTRL0                              0x000C

    #define     BA_CA9Reg_L2CTRL0_cache_id                     0x000C
    #define     B16CA9Reg_L2CTRL0_cache_id                     0x000C
    #define   LSb32CA9Reg_L2CTRL0_cache_id                        0
    #define   LSb16CA9Reg_L2CTRL0_cache_id                        0
    #define       bCA9Reg_L2CTRL0_cache_id                     6
    #define   MSK32CA9Reg_L2CTRL0_cache_id                        0x0000003F

    #define     BA_CA9Reg_L2CTRL0_associativity                0x000C
    #define     B16CA9Reg_L2CTRL0_associativity                0x000C
    #define   LSb32CA9Reg_L2CTRL0_associativity                   6
    #define   LSb16CA9Reg_L2CTRL0_associativity                   6
    #define       bCA9Reg_L2CTRL0_associativity                1
    #define   MSK32CA9Reg_L2CTRL0_associativity                   0x00000040

    #define     BA_CA9Reg_L2CTRL0_waysize                      0x000C
    #define     B16CA9Reg_L2CTRL0_waysize                      0x000C
    #define   LSb32CA9Reg_L2CTRL0_waysize                         7
    #define   LSb16CA9Reg_L2CTRL0_waysize                         7
    #define       bCA9Reg_L2CTRL0_waysize                      3
    #define   MSK32CA9Reg_L2CTRL0_waysize                         0x00000380

    #define     BA_CA9Reg_L2CTRL0_cfgbigend                    0x000D
    #define     B16CA9Reg_L2CTRL0_cfgbigend                    0x000C
    #define   LSb32CA9Reg_L2CTRL0_cfgbigend                       10
    #define   LSb16CA9Reg_L2CTRL0_cfgbigend                       10
    #define       bCA9Reg_L2CTRL0_cfgbigend                    1
    #define   MSK32CA9Reg_L2CTRL0_cfgbigend                       0x00000400
    ///////////////////////////////////////////////////////////
    #define     RA_CA9Reg_L2CTRL1                              0x0010

    #define     BA_CA9Reg_L2CTRL1_filter_en                    0x0010
    #define     B16CA9Reg_L2CTRL1_filter_en                    0x0010
    #define   LSb32CA9Reg_L2CTRL1_filter_en                       0
    #define   LSb16CA9Reg_L2CTRL1_filter_en                       0
    #define       bCA9Reg_L2CTRL1_filter_en                    1
    #define   MSK32CA9Reg_L2CTRL1_filter_en                       0x00000001

    #define     BA_CA9Reg_L2CTRL1_filter_start                 0x0010
    #define     B16CA9Reg_L2CTRL1_filter_start                 0x0010
    #define   LSb32CA9Reg_L2CTRL1_filter_start                    1
    #define   LSb16CA9Reg_L2CTRL1_filter_start                    1
    #define       bCA9Reg_L2CTRL1_filter_start                 12
    #define   MSK32CA9Reg_L2CTRL1_filter_start                    0x00001FFE

    #define     BA_CA9Reg_L2CTRL1_filter_end                   0x0011
    #define     B16CA9Reg_L2CTRL1_filter_end                   0x0010
    #define   LSb32CA9Reg_L2CTRL1_filter_end                      13
    #define   LSb16CA9Reg_L2CTRL1_filter_end                      13
    #define       bCA9Reg_L2CTRL1_filter_end                   12
    #define   MSK32CA9Reg_L2CTRL1_filter_end                      0x01FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_CA9Reg_L2CLK                                0x0014

    #define     BA_CA9Reg_L2CLK_sel                            0x0014
    #define     B16CA9Reg_L2CLK_sel                            0x0014
    #define   LSb32CA9Reg_L2CLK_sel                               0
    #define   LSb16CA9Reg_L2CLK_sel                               0
    #define       bCA9Reg_L2CLK_sel                            1
    #define   MSK32CA9Reg_L2CLK_sel                               0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_CA9Reg_STATUS0                              0x0018

    #define     BA_CA9Reg_STATUS0_standbywfi                   0x0018
    #define     B16CA9Reg_STATUS0_standbywfi                   0x0018
    #define   LSb32CA9Reg_STATUS0_standbywfi                      0
    #define   LSb16CA9Reg_STATUS0_standbywfi                      0
    #define       bCA9Reg_STATUS0_standbywfi                   2
    #define   MSK32CA9Reg_STATUS0_standbywfi                      0x00000003

    #define     BA_CA9Reg_STATUS0_standbywfe                   0x0018
    #define     B16CA9Reg_STATUS0_standbywfe                   0x0018
    #define   LSb32CA9Reg_STATUS0_standbywfe                      2
    #define   LSb16CA9Reg_STATUS0_standbywfe                      2
    #define       bCA9Reg_STATUS0_standbywfe                   2
    #define   MSK32CA9Reg_STATUS0_standbywfe                      0x0000000C

    #define     BA_CA9Reg_STATUS0_pmupriv                      0x0018
    #define     B16CA9Reg_STATUS0_pmupriv                      0x0018
    #define   LSb32CA9Reg_STATUS0_pmupriv                         4
    #define   LSb16CA9Reg_STATUS0_pmupriv                         4
    #define       bCA9Reg_STATUS0_pmupriv                      2
    #define   MSK32CA9Reg_STATUS0_pmupriv                         0x00000030

    #define     BA_CA9Reg_STATUS0_pmusecure                    0x0018
    #define     B16CA9Reg_STATUS0_pmusecure                    0x0018
    #define   LSb32CA9Reg_STATUS0_pmusecure                       6
    #define   LSb16CA9Reg_STATUS0_pmusecure                       6
    #define       bCA9Reg_STATUS0_pmusecure                    2
    #define   MSK32CA9Reg_STATUS0_pmusecure                       0x000000C0

    #define     BA_CA9Reg_STATUS0_parityfail0                  0x0019
    #define     B16CA9Reg_STATUS0_parityfail0                  0x0018
    #define   LSb32CA9Reg_STATUS0_parityfail0                     8
    #define   LSb16CA9Reg_STATUS0_parityfail0                     8
    #define       bCA9Reg_STATUS0_parityfail0                  8
    #define   MSK32CA9Reg_STATUS0_parityfail0                     0x0000FF00

    #define     BA_CA9Reg_STATUS0_parityfail1                  0x001A
    #define     B16CA9Reg_STATUS0_parityfail1                  0x001A
    #define   LSb32CA9Reg_STATUS0_parityfail1                     16
    #define   LSb16CA9Reg_STATUS0_parityfail1                     0
    #define       bCA9Reg_STATUS0_parityfail1                  8
    #define   MSK32CA9Reg_STATUS0_parityfail1                     0x00FF0000

    #define     BA_CA9Reg_STATUS0_parityfailscu                0x001B
    #define     B16CA9Reg_STATUS0_parityfailscu                0x001A
    #define   LSb32CA9Reg_STATUS0_parityfailscu                   24
    #define   LSb16CA9Reg_STATUS0_parityfailscu                   8
    #define       bCA9Reg_STATUS0_parityfailscu                2
    #define   MSK32CA9Reg_STATUS0_parityfailscu                   0x03000000

    #define     BA_CA9Reg_STATUS0_scuevabort                   0x001B
    #define     B16CA9Reg_STATUS0_scuevabort                   0x001A
    #define   LSb32CA9Reg_STATUS0_scuevabort                      26
    #define   LSb16CA9Reg_STATUS0_scuevabort                      10
    #define       bCA9Reg_STATUS0_scuevabort                   1
    #define   MSK32CA9Reg_STATUS0_scuevabort                      0x04000000

    #define     BA_CA9Reg_STATUS0_scuidle                      0x001B
    #define     B16CA9Reg_STATUS0_scuidle                      0x001A
    #define   LSb32CA9Reg_STATUS0_scuidle                         27
    #define   LSb16CA9Reg_STATUS0_scuidle                         11
    #define       bCA9Reg_STATUS0_scuidle                      1
    #define   MSK32CA9Reg_STATUS0_scuidle                         0x08000000

    #define     BA_CA9Reg_STATUS0_smpnamp                      0x001B
    #define     B16CA9Reg_STATUS0_smpnamp                      0x001A
    #define   LSb32CA9Reg_STATUS0_smpnamp                         28
    #define   LSb16CA9Reg_STATUS0_smpnamp                         12
    #define       bCA9Reg_STATUS0_smpnamp                      2
    #define   MSK32CA9Reg_STATUS0_smpnamp                         0x30000000
    ///////////////////////////////////////////////////////////
    #define     RA_CA9Reg_STATUS1                              0x001C

    #define     BA_CA9Reg_STATUS1_nirqout                      0x001C
    #define     B16CA9Reg_STATUS1_nirqout                      0x001C
    #define   LSb32CA9Reg_STATUS1_nirqout                         0
    #define   LSb16CA9Reg_STATUS1_nirqout                         0
    #define       bCA9Reg_STATUS1_nirqout                      2
    #define   MSK32CA9Reg_STATUS1_nirqout                         0x00000003

    #define     BA_CA9Reg_STATUS1_nfiqout                      0x001C
    #define     B16CA9Reg_STATUS1_nfiqout                      0x001C
    #define   LSb32CA9Reg_STATUS1_nfiqout                         2
    #define   LSb16CA9Reg_STATUS1_nfiqout                         2
    #define       bCA9Reg_STATUS1_nfiqout                      2
    #define   MSK32CA9Reg_STATUS1_nfiqout                         0x0000000C

    #define     BA_CA9Reg_STATUS1_deflags0                     0x001C
    #define     B16CA9Reg_STATUS1_deflags0                     0x001C
    #define   LSb32CA9Reg_STATUS1_deflags0                        4
    #define   LSb16CA9Reg_STATUS1_deflags0                        4
    #define       bCA9Reg_STATUS1_deflags0                     7
    #define   MSK32CA9Reg_STATUS1_deflags0                        0x000007F0

    #define     BA_CA9Reg_STATUS1_deflags1                     0x001D
    #define     B16CA9Reg_STATUS1_deflags1                     0x001C
    #define   LSb32CA9Reg_STATUS1_deflags1                        11
    #define   LSb16CA9Reg_STATUS1_deflags1                        11
    #define       bCA9Reg_STATUS1_deflags1                     7
    #define   MSK32CA9Reg_STATUS1_deflags1                        0x0003F800

    #define     BA_CA9Reg_STATUS1_idle_pl310                   0x001E
    #define     B16CA9Reg_STATUS1_idle_pl310                   0x001E
    #define   LSb32CA9Reg_STATUS1_idle_pl310                      18
    #define   LSb16CA9Reg_STATUS1_idle_pl310                      2
    #define       bCA9Reg_STATUS1_idle_pl310                   1
    #define   MSK32CA9Reg_STATUS1_idle_pl310                      0x00040000

    #define     BA_CA9Reg_STATUS1_clkstopped_pl310             0x001E
    #define     B16CA9Reg_STATUS1_clkstopped_pl310             0x001E
    #define   LSb32CA9Reg_STATUS1_clkstopped_pl310                19
    #define   LSb16CA9Reg_STATUS1_clkstopped_pl310                3
    #define       bCA9Reg_STATUS1_clkstopped_pl310             1
    #define   MSK32CA9Reg_STATUS1_clkstopped_pl310                0x00080000

    #define     BA_CA9Reg_STATUS1_ptmidlenack0                 0x001E
    #define     B16CA9Reg_STATUS1_ptmidlenack0                 0x001E
    #define   LSb32CA9Reg_STATUS1_ptmidlenack0                    20
    #define   LSb16CA9Reg_STATUS1_ptmidlenack0                    4
    #define       bCA9Reg_STATUS1_ptmidlenack0                 1
    #define   MSK32CA9Reg_STATUS1_ptmidlenack0                    0x00100000

    #define     BA_CA9Reg_STATUS1_ptmidlenack1                 0x001E
    #define     B16CA9Reg_STATUS1_ptmidlenack1                 0x001E
    #define   LSb32CA9Reg_STATUS1_ptmidlenack1                    21
    #define   LSb16CA9Reg_STATUS1_ptmidlenack1                    5
    #define       bCA9Reg_STATUS1_ptmidlenack1                 1
    #define   MSK32CA9Reg_STATUS1_ptmidlenack1                    0x00200000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CA9Reg {
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_SoftResetn_DBG0(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32CA9Reg_SoftResetn_DBG0(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16CA9Reg_SoftResetn_DBG0(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16CA9Reg_SoftResetn_DBG0(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32CA9Reg_SoftResetn_DBG1(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32CA9Reg_SoftResetn_DBG1(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16CA9Reg_SoftResetn_DBG1(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16CA9Reg_SoftResetn_DBG1(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32CA9Reg_SoftResetn_NEON0(r32)                _BFGET_(r32, 2, 2)
    #define   SET32CA9Reg_SoftResetn_NEON0(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16CA9Reg_SoftResetn_NEON0(r16)                _BFGET_(r16, 2, 2)
    #define   SET16CA9Reg_SoftResetn_NEON0(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32CA9Reg_SoftResetn_NEON1(r32)                _BFGET_(r32, 3, 3)
    #define   SET32CA9Reg_SoftResetn_NEON1(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16CA9Reg_SoftResetn_NEON1(r16)                _BFGET_(r16, 3, 3)
    #define   SET16CA9Reg_SoftResetn_NEON1(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32CA9Reg_SoftResetn_L2C(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32CA9Reg_SoftResetn_L2C(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16CA9Reg_SoftResetn_L2C(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16CA9Reg_SoftResetn_L2C(r16,v)                _BFSET_(r16, 4, 4,v)

    #define     w32CA9Reg_SoftResetn                           {\
            UNSG32 uSoftResetn_DBG0                            :  1;\
            UNSG32 uSoftResetn_DBG1                            :  1;\
            UNSG32 uSoftResetn_NEON0                           :  1;\
            UNSG32 uSoftResetn_NEON1                           :  1;\
            UNSG32 uSoftResetn_L2C                             :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32CA9Reg_SoftResetn;
            struct w32CA9Reg_SoftResetn;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_CTRL0_maxclklatency(r32)             _BFGET_(r32, 2, 0)
    #define   SET32CA9Reg_CTRL0_maxclklatency(r32,v)           _BFSET_(r32, 2, 0,v)
    #define   GET16CA9Reg_CTRL0_maxclklatency(r16)             _BFGET_(r16, 2, 0)
    #define   SET16CA9Reg_CTRL0_maxclklatency(r16,v)           _BFSET_(r16, 2, 0,v)

    #define   GET32CA9Reg_CTRL0_cfgsdisable(r32)               _BFGET_(r32, 3, 3)
    #define   SET32CA9Reg_CTRL0_cfgsdisable(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16CA9Reg_CTRL0_cfgsdisable(r16)               _BFGET_(r16, 3, 3)
    #define   SET16CA9Reg_CTRL0_cfgsdisable(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32CA9Reg_CTRL0_clusterid(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32CA9Reg_CTRL0_clusterid(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16CA9Reg_CTRL0_clusterid(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16CA9Reg_CTRL0_clusterid(r16,v)               _BFSET_(r16, 7, 4,v)

    #define     w32CA9Reg_CTRL0                                {\
            UNSG32 uCTRL0_maxclklatency                        :  3;\
            UNSG32 uCTRL0_cfgsdisable                          :  1;\
            UNSG32 uCTRL0_clusterid                            :  4;\
            UNSG32 RSVDx4_b8                                   : 24;\
          }
    union { UNSG32 u32CA9Reg_CTRL0;
            struct w32CA9Reg_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_CTRL1_filter_en(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32CA9Reg_CTRL1_filter_en(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16CA9Reg_CTRL1_filter_en(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16CA9Reg_CTRL1_filter_en(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32CA9Reg_CTRL1_filter_start(r32)              _BFGET_(r32,12, 1)
    #define   SET32CA9Reg_CTRL1_filter_start(r32,v)            _BFSET_(r32,12, 1,v)
    #define   GET16CA9Reg_CTRL1_filter_start(r16)              _BFGET_(r16,12, 1)
    #define   SET16CA9Reg_CTRL1_filter_start(r16,v)            _BFSET_(r16,12, 1,v)

    #define   GET32CA9Reg_CTRL1_filter_end(r32)                _BFGET_(r32,24,13)
    #define   SET32CA9Reg_CTRL1_filter_end(r32,v)              _BFSET_(r32,24,13,v)

    #define     w32CA9Reg_CTRL1                                {\
            UNSG32 uCTRL1_filter_en                            :  1;\
            UNSG32 uCTRL1_filter_start                         : 12;\
            UNSG32 uCTRL1_filter_end                           : 12;\
            UNSG32 RSVDx8_b25                                  :  7;\
          }
    union { UNSG32 u32CA9Reg_CTRL1;
            struct w32CA9Reg_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_L2CTRL0_cache_id(r32)                _BFGET_(r32, 5, 0)
    #define   SET32CA9Reg_L2CTRL0_cache_id(r32,v)              _BFSET_(r32, 5, 0,v)
    #define   GET16CA9Reg_L2CTRL0_cache_id(r16)                _BFGET_(r16, 5, 0)
    #define   SET16CA9Reg_L2CTRL0_cache_id(r16,v)              _BFSET_(r16, 5, 0,v)

    #define   GET32CA9Reg_L2CTRL0_associativity(r32)           _BFGET_(r32, 6, 6)
    #define   SET32CA9Reg_L2CTRL0_associativity(r32,v)         _BFSET_(r32, 6, 6,v)
    #define   GET16CA9Reg_L2CTRL0_associativity(r16)           _BFGET_(r16, 6, 6)
    #define   SET16CA9Reg_L2CTRL0_associativity(r16,v)         _BFSET_(r16, 6, 6,v)

    #define   GET32CA9Reg_L2CTRL0_waysize(r32)                 _BFGET_(r32, 9, 7)
    #define   SET32CA9Reg_L2CTRL0_waysize(r32,v)               _BFSET_(r32, 9, 7,v)
    #define   GET16CA9Reg_L2CTRL0_waysize(r16)                 _BFGET_(r16, 9, 7)
    #define   SET16CA9Reg_L2CTRL0_waysize(r16,v)               _BFSET_(r16, 9, 7,v)

    #define   GET32CA9Reg_L2CTRL0_cfgbigend(r32)               _BFGET_(r32,10,10)
    #define   SET32CA9Reg_L2CTRL0_cfgbigend(r32,v)             _BFSET_(r32,10,10,v)
    #define   GET16CA9Reg_L2CTRL0_cfgbigend(r16)               _BFGET_(r16,10,10)
    #define   SET16CA9Reg_L2CTRL0_cfgbigend(r16,v)             _BFSET_(r16,10,10,v)

    #define     w32CA9Reg_L2CTRL0                              {\
            UNSG32 uL2CTRL0_cache_id                           :  6;\
            UNSG32 uL2CTRL0_associativity                      :  1;\
            UNSG32 uL2CTRL0_waysize                            :  3;\
            UNSG32 uL2CTRL0_cfgbigend                          :  1;\
            UNSG32 RSVDxC_b11                                  : 21;\
          }
    union { UNSG32 u32CA9Reg_L2CTRL0;
            struct w32CA9Reg_L2CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_L2CTRL1_filter_en(r32)               _BFGET_(r32, 0, 0)
    #define   SET32CA9Reg_L2CTRL1_filter_en(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16CA9Reg_L2CTRL1_filter_en(r16)               _BFGET_(r16, 0, 0)
    #define   SET16CA9Reg_L2CTRL1_filter_en(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32CA9Reg_L2CTRL1_filter_start(r32)            _BFGET_(r32,12, 1)
    #define   SET32CA9Reg_L2CTRL1_filter_start(r32,v)          _BFSET_(r32,12, 1,v)
    #define   GET16CA9Reg_L2CTRL1_filter_start(r16)            _BFGET_(r16,12, 1)
    #define   SET16CA9Reg_L2CTRL1_filter_start(r16,v)          _BFSET_(r16,12, 1,v)

    #define   GET32CA9Reg_L2CTRL1_filter_end(r32)              _BFGET_(r32,24,13)
    #define   SET32CA9Reg_L2CTRL1_filter_end(r32,v)            _BFSET_(r32,24,13,v)

    #define     w32CA9Reg_L2CTRL1                              {\
            UNSG32 uL2CTRL1_filter_en                          :  1;\
            UNSG32 uL2CTRL1_filter_start                       : 12;\
            UNSG32 uL2CTRL1_filter_end                         : 12;\
            UNSG32 RSVDx10_b25                                 :  7;\
          }
    union { UNSG32 u32CA9Reg_L2CTRL1;
            struct w32CA9Reg_L2CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_L2CLK_sel(r32)                       _BFGET_(r32, 0, 0)
    #define   SET32CA9Reg_L2CLK_sel(r32,v)                     _BFSET_(r32, 0, 0,v)
    #define   GET16CA9Reg_L2CLK_sel(r16)                       _BFGET_(r16, 0, 0)
    #define   SET16CA9Reg_L2CLK_sel(r16,v)                     _BFSET_(r16, 0, 0,v)

    #define     w32CA9Reg_L2CLK                                {\
            UNSG32 uL2CLK_sel                                  :  1;\
            UNSG32 RSVDx14_b1                                  : 31;\
          }
    union { UNSG32 u32CA9Reg_L2CLK;
            struct w32CA9Reg_L2CLK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_STATUS0_standbywfi(r32)              _BFGET_(r32, 1, 0)
    #define   SET32CA9Reg_STATUS0_standbywfi(r32,v)            _BFSET_(r32, 1, 0,v)
    #define   GET16CA9Reg_STATUS0_standbywfi(r16)              _BFGET_(r16, 1, 0)
    #define   SET16CA9Reg_STATUS0_standbywfi(r16,v)            _BFSET_(r16, 1, 0,v)

    #define   GET32CA9Reg_STATUS0_standbywfe(r32)              _BFGET_(r32, 3, 2)
    #define   SET32CA9Reg_STATUS0_standbywfe(r32,v)            _BFSET_(r32, 3, 2,v)
    #define   GET16CA9Reg_STATUS0_standbywfe(r16)              _BFGET_(r16, 3, 2)
    #define   SET16CA9Reg_STATUS0_standbywfe(r16,v)            _BFSET_(r16, 3, 2,v)

    #define   GET32CA9Reg_STATUS0_pmupriv(r32)                 _BFGET_(r32, 5, 4)
    #define   SET32CA9Reg_STATUS0_pmupriv(r32,v)               _BFSET_(r32, 5, 4,v)
    #define   GET16CA9Reg_STATUS0_pmupriv(r16)                 _BFGET_(r16, 5, 4)
    #define   SET16CA9Reg_STATUS0_pmupriv(r16,v)               _BFSET_(r16, 5, 4,v)

    #define   GET32CA9Reg_STATUS0_pmusecure(r32)               _BFGET_(r32, 7, 6)
    #define   SET32CA9Reg_STATUS0_pmusecure(r32,v)             _BFSET_(r32, 7, 6,v)
    #define   GET16CA9Reg_STATUS0_pmusecure(r16)               _BFGET_(r16, 7, 6)
    #define   SET16CA9Reg_STATUS0_pmusecure(r16,v)             _BFSET_(r16, 7, 6,v)

    #define   GET32CA9Reg_STATUS0_parityfail0(r32)             _BFGET_(r32,15, 8)
    #define   SET32CA9Reg_STATUS0_parityfail0(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16CA9Reg_STATUS0_parityfail0(r16)             _BFGET_(r16,15, 8)
    #define   SET16CA9Reg_STATUS0_parityfail0(r16,v)           _BFSET_(r16,15, 8,v)

    #define   GET32CA9Reg_STATUS0_parityfail1(r32)             _BFGET_(r32,23,16)
    #define   SET32CA9Reg_STATUS0_parityfail1(r32,v)           _BFSET_(r32,23,16,v)
    #define   GET16CA9Reg_STATUS0_parityfail1(r16)             _BFGET_(r16, 7, 0)
    #define   SET16CA9Reg_STATUS0_parityfail1(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32CA9Reg_STATUS0_parityfailscu(r32)           _BFGET_(r32,25,24)
    #define   SET32CA9Reg_STATUS0_parityfailscu(r32,v)         _BFSET_(r32,25,24,v)
    #define   GET16CA9Reg_STATUS0_parityfailscu(r16)           _BFGET_(r16, 9, 8)
    #define   SET16CA9Reg_STATUS0_parityfailscu(r16,v)         _BFSET_(r16, 9, 8,v)

    #define   GET32CA9Reg_STATUS0_scuevabort(r32)              _BFGET_(r32,26,26)
    #define   SET32CA9Reg_STATUS0_scuevabort(r32,v)            _BFSET_(r32,26,26,v)
    #define   GET16CA9Reg_STATUS0_scuevabort(r16)              _BFGET_(r16,10,10)
    #define   SET16CA9Reg_STATUS0_scuevabort(r16,v)            _BFSET_(r16,10,10,v)

    #define   GET32CA9Reg_STATUS0_scuidle(r32)                 _BFGET_(r32,27,27)
    #define   SET32CA9Reg_STATUS0_scuidle(r32,v)               _BFSET_(r32,27,27,v)
    #define   GET16CA9Reg_STATUS0_scuidle(r16)                 _BFGET_(r16,11,11)
    #define   SET16CA9Reg_STATUS0_scuidle(r16,v)               _BFSET_(r16,11,11,v)

    #define   GET32CA9Reg_STATUS0_smpnamp(r32)                 _BFGET_(r32,29,28)
    #define   SET32CA9Reg_STATUS0_smpnamp(r32,v)               _BFSET_(r32,29,28,v)
    #define   GET16CA9Reg_STATUS0_smpnamp(r16)                 _BFGET_(r16,13,12)
    #define   SET16CA9Reg_STATUS0_smpnamp(r16,v)               _BFSET_(r16,13,12,v)

    #define     w32CA9Reg_STATUS0                              {\
            UNSG32 uSTATUS0_standbywfi                         :  2;\
            UNSG32 uSTATUS0_standbywfe                         :  2;\
            UNSG32 uSTATUS0_pmupriv                            :  2;\
            UNSG32 uSTATUS0_pmusecure                          :  2;\
            UNSG32 uSTATUS0_parityfail0                        :  8;\
            UNSG32 uSTATUS0_parityfail1                        :  8;\
            UNSG32 uSTATUS0_parityfailscu                      :  2;\
            UNSG32 uSTATUS0_scuevabort                         :  1;\
            UNSG32 uSTATUS0_scuidle                            :  1;\
            UNSG32 uSTATUS0_smpnamp                            :  2;\
            UNSG32 RSVDx18_b30                                 :  2;\
          }
    union { UNSG32 u32CA9Reg_STATUS0;
            struct w32CA9Reg_STATUS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CA9Reg_STATUS1_nirqout(r32)                 _BFGET_(r32, 1, 0)
    #define   SET32CA9Reg_STATUS1_nirqout(r32,v)               _BFSET_(r32, 1, 0,v)
    #define   GET16CA9Reg_STATUS1_nirqout(r16)                 _BFGET_(r16, 1, 0)
    #define   SET16CA9Reg_STATUS1_nirqout(r16,v)               _BFSET_(r16, 1, 0,v)

    #define   GET32CA9Reg_STATUS1_nfiqout(r32)                 _BFGET_(r32, 3, 2)
    #define   SET32CA9Reg_STATUS1_nfiqout(r32,v)               _BFSET_(r32, 3, 2,v)
    #define   GET16CA9Reg_STATUS1_nfiqout(r16)                 _BFGET_(r16, 3, 2)
    #define   SET16CA9Reg_STATUS1_nfiqout(r16,v)               _BFSET_(r16, 3, 2,v)

    #define   GET32CA9Reg_STATUS1_deflags0(r32)                _BFGET_(r32,10, 4)
    #define   SET32CA9Reg_STATUS1_deflags0(r32,v)              _BFSET_(r32,10, 4,v)
    #define   GET16CA9Reg_STATUS1_deflags0(r16)                _BFGET_(r16,10, 4)
    #define   SET16CA9Reg_STATUS1_deflags0(r16,v)              _BFSET_(r16,10, 4,v)

    #define   GET32CA9Reg_STATUS1_deflags1(r32)                _BFGET_(r32,17,11)
    #define   SET32CA9Reg_STATUS1_deflags1(r32,v)              _BFSET_(r32,17,11,v)

    #define   GET32CA9Reg_STATUS1_idle_pl310(r32)              _BFGET_(r32,18,18)
    #define   SET32CA9Reg_STATUS1_idle_pl310(r32,v)            _BFSET_(r32,18,18,v)
    #define   GET16CA9Reg_STATUS1_idle_pl310(r16)              _BFGET_(r16, 2, 2)
    #define   SET16CA9Reg_STATUS1_idle_pl310(r16,v)            _BFSET_(r16, 2, 2,v)

    #define   GET32CA9Reg_STATUS1_clkstopped_pl310(r32)        _BFGET_(r32,19,19)
    #define   SET32CA9Reg_STATUS1_clkstopped_pl310(r32,v)      _BFSET_(r32,19,19,v)
    #define   GET16CA9Reg_STATUS1_clkstopped_pl310(r16)        _BFGET_(r16, 3, 3)
    #define   SET16CA9Reg_STATUS1_clkstopped_pl310(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32CA9Reg_STATUS1_ptmidlenack0(r32)            _BFGET_(r32,20,20)
    #define   SET32CA9Reg_STATUS1_ptmidlenack0(r32,v)          _BFSET_(r32,20,20,v)
    #define   GET16CA9Reg_STATUS1_ptmidlenack0(r16)            _BFGET_(r16, 4, 4)
    #define   SET16CA9Reg_STATUS1_ptmidlenack0(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32CA9Reg_STATUS1_ptmidlenack1(r32)            _BFGET_(r32,21,21)
    #define   SET32CA9Reg_STATUS1_ptmidlenack1(r32,v)          _BFSET_(r32,21,21,v)
    #define   GET16CA9Reg_STATUS1_ptmidlenack1(r16)            _BFGET_(r16, 5, 5)
    #define   SET16CA9Reg_STATUS1_ptmidlenack1(r16,v)          _BFSET_(r16, 5, 5,v)

    #define     w32CA9Reg_STATUS1                              {\
            UNSG32 uSTATUS1_nirqout                            :  2;\
            UNSG32 uSTATUS1_nfiqout                            :  2;\
            UNSG32 uSTATUS1_deflags0                           :  7;\
            UNSG32 uSTATUS1_deflags1                           :  7;\
            UNSG32 uSTATUS1_idle_pl310                         :  1;\
            UNSG32 uSTATUS1_clkstopped_pl310                   :  1;\
            UNSG32 uSTATUS1_ptmidlenack0                       :  1;\
            UNSG32 uSTATUS1_ptmidlenack1                       :  1;\
            UNSG32 RSVDx1C_b22                                 : 10;\
          }
    union { UNSG32 u32CA9Reg_STATUS1;
            struct w32CA9Reg_STATUS1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_CA9Reg;

    typedef union  T32CA9Reg_SoftResetn
          { UNSG32 u32;
            struct w32CA9Reg_SoftResetn;
                 } T32CA9Reg_SoftResetn;
    typedef union  T32CA9Reg_CTRL0
          { UNSG32 u32;
            struct w32CA9Reg_CTRL0;
                 } T32CA9Reg_CTRL0;
    typedef union  T32CA9Reg_CTRL1
          { UNSG32 u32;
            struct w32CA9Reg_CTRL1;
                 } T32CA9Reg_CTRL1;
    typedef union  T32CA9Reg_L2CTRL0
          { UNSG32 u32;
            struct w32CA9Reg_L2CTRL0;
                 } T32CA9Reg_L2CTRL0;
    typedef union  T32CA9Reg_L2CTRL1
          { UNSG32 u32;
            struct w32CA9Reg_L2CTRL1;
                 } T32CA9Reg_L2CTRL1;
    typedef union  T32CA9Reg_L2CLK
          { UNSG32 u32;
            struct w32CA9Reg_L2CLK;
                 } T32CA9Reg_L2CLK;
    typedef union  T32CA9Reg_STATUS0
          { UNSG32 u32;
            struct w32CA9Reg_STATUS0;
                 } T32CA9Reg_STATUS0;
    typedef union  T32CA9Reg_STATUS1
          { UNSG32 u32;
            struct w32CA9Reg_STATUS1;
                 } T32CA9Reg_STATUS1;
    ///////////////////////////////////////////////////////////

    typedef union  TCA9Reg_SoftResetn
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_SoftResetn;
                   };
                 } TCA9Reg_SoftResetn;
    typedef union  TCA9Reg_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_CTRL0;
                   };
                 } TCA9Reg_CTRL0;
    typedef union  TCA9Reg_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_CTRL1;
                   };
                 } TCA9Reg_CTRL1;
    typedef union  TCA9Reg_L2CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_L2CTRL0;
                   };
                 } TCA9Reg_L2CTRL0;
    typedef union  TCA9Reg_L2CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_L2CTRL1;
                   };
                 } TCA9Reg_L2CTRL1;
    typedef union  TCA9Reg_L2CLK
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_L2CLK;
                   };
                 } TCA9Reg_L2CLK;
    typedef union  TCA9Reg_STATUS0
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_STATUS0;
                   };
                 } TCA9Reg_STATUS0;
    typedef union  TCA9Reg_STATUS1
          { UNSG32 u32[1];
            struct {
            struct w32CA9Reg_STATUS1;
                   };
                 } TCA9Reg_STATUS1;

    ///////////////////////////////////////////////////////////
     SIGN32 CA9Reg_drvrd(SIE_CA9Reg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CA9Reg_drvwr(SIE_CA9Reg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CA9Reg_reset(SIE_CA9Reg *p);
     SIGN32 CA9Reg_cmp  (SIE_CA9Reg *p, SIE_CA9Reg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CA9Reg_check(p,pie,pfx,hLOG) CA9Reg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CA9Reg_print(p,    pfx,hLOG) CA9Reg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CA9Reg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE seAccess                                 (4,4)
///     ###
///     * AXI Secure Access
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 seAxi                (P)
///               %unsigned 1  ProtOverrideW             0x0
///                                    ###
///                                    * 1: Overrides AWPROT with ProtValW
///                                    * 0: AWPROT passes through
///                                    ###
///               %unsigned 1  ProtValW                  0x0
///                                    ###
///                                    * 0: AWPROT is 0
///                                    * 1: AWPROT is 1
///                                    ###
///               %unsigned 1  ProtOverrideR             0x0
///                                    ###
///                                    * 1: Overrides ARPROT with ProtValR
///                                    * 0: ARPROT passes through
///                                    ###
///               %unsigned 1  ProtValR                  0x0
///                                    ###
///                                    * 0: ARPROT is 0
///                                    * 1: ARPROT is 1
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       4b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_seAccess
#define h_seAccess (){}

    #define     RA_seAccess_seAxi                              0x0000

    #define     BA_seAccess_seAxi_ProtOverrideW                0x0000
    #define     B16seAccess_seAxi_ProtOverrideW                0x0000
    #define   LSb32seAccess_seAxi_ProtOverrideW                   0
    #define   LSb16seAccess_seAxi_ProtOverrideW                   0
    #define       bseAccess_seAxi_ProtOverrideW                1
    #define   MSK32seAccess_seAxi_ProtOverrideW                   0x00000001

    #define     BA_seAccess_seAxi_ProtValW                     0x0000
    #define     B16seAccess_seAxi_ProtValW                     0x0000
    #define   LSb32seAccess_seAxi_ProtValW                        1
    #define   LSb16seAccess_seAxi_ProtValW                        1
    #define       bseAccess_seAxi_ProtValW                     1
    #define   MSK32seAccess_seAxi_ProtValW                        0x00000002

    #define     BA_seAccess_seAxi_ProtOverrideR                0x0000
    #define     B16seAccess_seAxi_ProtOverrideR                0x0000
    #define   LSb32seAccess_seAxi_ProtOverrideR                   2
    #define   LSb16seAccess_seAxi_ProtOverrideR                   2
    #define       bseAccess_seAxi_ProtOverrideR                1
    #define   MSK32seAccess_seAxi_ProtOverrideR                   0x00000004

    #define     BA_seAccess_seAxi_ProtValR                     0x0000
    #define     B16seAccess_seAxi_ProtValR                     0x0000
    #define   LSb32seAccess_seAxi_ProtValR                        3
    #define   LSb16seAccess_seAxi_ProtValR                        3
    #define       bseAccess_seAxi_ProtValR                     1
    #define   MSK32seAccess_seAxi_ProtValR                        0x00000008
    ///////////////////////////////////////////////////////////

    typedef struct SIE_seAccess {
    ///////////////////////////////////////////////////////////
    #define   GET32seAccess_seAxi_ProtOverrideW(r32)           _BFGET_(r32, 0, 0)
    #define   SET32seAccess_seAxi_ProtOverrideW(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16seAccess_seAxi_ProtOverrideW(r16)           _BFGET_(r16, 0, 0)
    #define   SET16seAccess_seAxi_ProtOverrideW(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32seAccess_seAxi_ProtValW(r32)                _BFGET_(r32, 1, 1)
    #define   SET32seAccess_seAxi_ProtValW(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16seAccess_seAxi_ProtValW(r16)                _BFGET_(r16, 1, 1)
    #define   SET16seAccess_seAxi_ProtValW(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32seAccess_seAxi_ProtOverrideR(r32)           _BFGET_(r32, 2, 2)
    #define   SET32seAccess_seAxi_ProtOverrideR(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16seAccess_seAxi_ProtOverrideR(r16)           _BFGET_(r16, 2, 2)
    #define   SET16seAccess_seAxi_ProtOverrideR(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32seAccess_seAxi_ProtValR(r32)                _BFGET_(r32, 3, 3)
    #define   SET32seAccess_seAxi_ProtValR(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16seAccess_seAxi_ProtValR(r16)                _BFGET_(r16, 3, 3)
    #define   SET16seAccess_seAxi_ProtValR(r16,v)              _BFSET_(r16, 3, 3,v)

    #define     w32seAccess_seAxi                              {\
            UNSG32 useAxi_ProtOverrideW                        :  1;\
            UNSG32 useAxi_ProtValW                             :  1;\
            UNSG32 useAxi_ProtOverrideR                        :  1;\
            UNSG32 useAxi_ProtValR                             :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32seAccess_seAxi;
            struct w32seAccess_seAxi;
          };
    ///////////////////////////////////////////////////////////
    } SIE_seAccess;

    typedef union  T32seAccess_seAxi
          { UNSG32 u32;
            struct w32seAccess_seAxi;
                 } T32seAccess_seAxi;
    ///////////////////////////////////////////////////////////

    typedef union  TseAccess_seAxi
          { UNSG32 u32[1];
            struct {
            struct w32seAccess_seAxi;
                   };
                 } TseAccess_seAxi;

    ///////////////////////////////////////////////////////////
     SIGN32 seAccess_drvrd(SIE_seAccess *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 seAccess_drvwr(SIE_seAccess *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void seAccess_reset(SIE_seAccess *p);
     SIGN32 seAccess_cmp  (SIE_seAccess *p, SIE_seAccess *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define seAccess_check(p,pie,pfx,hLOG) seAccess_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define seAccess_print(p,    pfx,hLOG) seAccess_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: seAccess
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE protOR                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 SecureAVIOM0         
///               $seAccess            SecureAVIOM0      REG          
///     @ 0x00004                      (P)
///     # 0x00004 SecureAVIOM1         
///               $seAccess            SecureAVIOM1      REG          
///     @ 0x00008                      (P)
///     # 0x00008 SecurePERIF          
///               $seAccess            SecurePERIF       REG          
///     @ 0x0000C                      (P)
///     # 0x0000C SecureZSP            
///               $seAccess            SecureZSP         REG          
///     @ 0x00010                      (P)
///     # 0x00010 SecureGFX3D          
///               $seAccess            SecureGFX3D       REG          
///     @ 0x00014                      (P)
///     # 0x00014 SecureVMETA          
///               $seAccess            SecureVMETA       REG          
///     @ 0x00018                      (P)
///     # 0x00018 SecureGFX2D          
///               $seAccess            SecureGFX2D       REG          
///     @ 0x0001C perifCtrl            (P)
///               %unsigned 1  rSel                      0x1
///                                    ###
///                                    * 1: ARPROT to MC is generated based on rReqInfo from PXBAR
///                                    * 0: ARPROT to MC is based on SecurePERIF controls and ARProt from PXBAR
///                                    ###
///               %unsigned 1  wSel                      0x1
///                                    ###
///                                    * 1: AWPROT to MC is generated based on wReqInfo from PXBAR
///                                    * 0: AWPROT to MC is based on SecurePERIF controls and AWProt from PXBAR
///                                    ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:      30b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_protOR
#define h_protOR (){}

    #define     RA_protOR_SecureAVIOM0                         0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_protOR_SecureAVIOM1                         0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_protOR_SecurePERIF                          0x0008
    ///////////////////////////////////////////////////////////
    #define     RA_protOR_SecureZSP                            0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_protOR_SecureGFX3D                          0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_protOR_SecureVMETA                          0x0014
    ///////////////////////////////////////////////////////////
    #define     RA_protOR_SecureGFX2D                          0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_protOR_perifCtrl                            0x001C

    #define     BA_protOR_perifCtrl_rSel                       0x001C
    #define     B16protOR_perifCtrl_rSel                       0x001C
    #define   LSb32protOR_perifCtrl_rSel                          0
    #define   LSb16protOR_perifCtrl_rSel                          0
    #define       bprotOR_perifCtrl_rSel                       1
    #define   MSK32protOR_perifCtrl_rSel                          0x00000001

    #define     BA_protOR_perifCtrl_wSel                       0x001C
    #define     B16protOR_perifCtrl_wSel                       0x001C
    #define   LSb32protOR_perifCtrl_wSel                          1
    #define   LSb16protOR_perifCtrl_wSel                          1
    #define       bprotOR_perifCtrl_wSel                       1
    #define   MSK32protOR_perifCtrl_wSel                          0x00000002
    ///////////////////////////////////////////////////////////

    typedef struct SIE_protOR {
    ///////////////////////////////////////////////////////////
              SIE_seAccess                                     ie_SecureAVIOM0;
    ///////////////////////////////////////////////////////////
              SIE_seAccess                                     ie_SecureAVIOM1;
    ///////////////////////////////////////////////////////////
              SIE_seAccess                                     ie_SecurePERIF;
    ///////////////////////////////////////////////////////////
              SIE_seAccess                                     ie_SecureZSP;
    ///////////////////////////////////////////////////////////
              SIE_seAccess                                     ie_SecureGFX3D;
    ///////////////////////////////////////////////////////////
              SIE_seAccess                                     ie_SecureVMETA;
    ///////////////////////////////////////////////////////////
              SIE_seAccess                                     ie_SecureGFX2D;
    ///////////////////////////////////////////////////////////
    #define   GET32protOR_perifCtrl_rSel(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32protOR_perifCtrl_rSel(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16protOR_perifCtrl_rSel(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16protOR_perifCtrl_rSel(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32protOR_perifCtrl_wSel(r32)                  _BFGET_(r32, 1, 1)
    #define   SET32protOR_perifCtrl_wSel(r32,v)                _BFSET_(r32, 1, 1,v)
    #define   GET16protOR_perifCtrl_wSel(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16protOR_perifCtrl_wSel(r16,v)                _BFSET_(r16, 1, 1,v)

    #define     w32protOR_perifCtrl                            {\
            UNSG32 uperifCtrl_rSel                             :  1;\
            UNSG32 uperifCtrl_wSel                             :  1;\
            UNSG32 RSVDx1C_b2                                  : 30;\
          }
    union { UNSG32 u32protOR_perifCtrl;
            struct w32protOR_perifCtrl;
          };
    ///////////////////////////////////////////////////////////
    } SIE_protOR;

    typedef union  T32protOR_perifCtrl
          { UNSG32 u32;
            struct w32protOR_perifCtrl;
                 } T32protOR_perifCtrl;
    ///////////////////////////////////////////////////////////

    typedef union  TprotOR_perifCtrl
          { UNSG32 u32[1];
            struct {
            struct w32protOR_perifCtrl;
                   };
                 } TprotOR_perifCtrl;

    ///////////////////////////////////////////////////////////
     SIGN32 protOR_drvrd(SIE_protOR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 protOR_drvwr(SIE_protOR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void protOR_reset(SIE_protOR *p);
     SIGN32 protOR_cmp  (SIE_protOR *p, SIE_protOR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define protOR_check(p,pie,pfx,hLOG) protOR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define protOR_print(p,    pfx,hLOG) protOR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: protOR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AxiPCnt                 biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * Clears the counters
///                                    ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Enable counter increment. SW can make enable = 0 to temporarily disable counter increment.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 TOTAL_CNT            (R-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Total no. of AXI clocks
///                                    ###
///     @ 0x00008 RWAIT_CNT            (R-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks aRValid = 1 & aRReady = 0
///                                    ###
///     @ 0x0000C RDATA_CNT            (R-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks rValid = 1 & rReady = 1
///                                    ###
///     @ 0x00010 WWAIT_CNT            (R-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks aWValid = 1 & aWReady = 0
///                                    ###
///     @ 0x00014 WDATA_CNT            (R-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks wValid = 1 & wReady = 1
///                                    ###
///     @ 0x00018 OF_STATUS            (R-)
///               %unsigned 1  total                     0x0
///               %unsigned 1  rwait                     0x0
///               %unsigned 1  rdata                     0x0
///               %unsigned 1  wwait                     0x0
///               %unsigned 1  wdata                     0x0
///                                    ###
///                                    * Overflow status of total, wait and data counters. Clear will clear the overflow status as well.
///                                    ###
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     167b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AxiPCnt
#define h_AxiPCnt (){}

    #define     RA_AxiPCnt_CTRL                                0x0000

    #define     BA_AxiPCnt_CTRL_clear                          0x0000
    #define     B16AxiPCnt_CTRL_clear                          0x0000
    #define   LSb32AxiPCnt_CTRL_clear                             0
    #define   LSb16AxiPCnt_CTRL_clear                             0
    #define       bAxiPCnt_CTRL_clear                          1
    #define   MSK32AxiPCnt_CTRL_clear                             0x00000001

    #define     BA_AxiPCnt_CTRL_enable                         0x0000
    #define     B16AxiPCnt_CTRL_enable                         0x0000
    #define   LSb32AxiPCnt_CTRL_enable                            1
    #define   LSb16AxiPCnt_CTRL_enable                            1
    #define       bAxiPCnt_CTRL_enable                         1
    #define   MSK32AxiPCnt_CTRL_enable                            0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCnt_TOTAL_CNT                           0x0004

    #define     BA_AxiPCnt_TOTAL_CNT_cnt                       0x0004
    #define     B16AxiPCnt_TOTAL_CNT_cnt                       0x0004
    #define   LSb32AxiPCnt_TOTAL_CNT_cnt                          0
    #define   LSb16AxiPCnt_TOTAL_CNT_cnt                          0
    #define       bAxiPCnt_TOTAL_CNT_cnt                       32
    #define   MSK32AxiPCnt_TOTAL_CNT_cnt                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCnt_RWAIT_CNT                           0x0008

    #define     BA_AxiPCnt_RWAIT_CNT_cnt                       0x0008
    #define     B16AxiPCnt_RWAIT_CNT_cnt                       0x0008
    #define   LSb32AxiPCnt_RWAIT_CNT_cnt                          0
    #define   LSb16AxiPCnt_RWAIT_CNT_cnt                          0
    #define       bAxiPCnt_RWAIT_CNT_cnt                       32
    #define   MSK32AxiPCnt_RWAIT_CNT_cnt                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCnt_RDATA_CNT                           0x000C

    #define     BA_AxiPCnt_RDATA_CNT_cnt                       0x000C
    #define     B16AxiPCnt_RDATA_CNT_cnt                       0x000C
    #define   LSb32AxiPCnt_RDATA_CNT_cnt                          0
    #define   LSb16AxiPCnt_RDATA_CNT_cnt                          0
    #define       bAxiPCnt_RDATA_CNT_cnt                       32
    #define   MSK32AxiPCnt_RDATA_CNT_cnt                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCnt_WWAIT_CNT                           0x0010

    #define     BA_AxiPCnt_WWAIT_CNT_cnt                       0x0010
    #define     B16AxiPCnt_WWAIT_CNT_cnt                       0x0010
    #define   LSb32AxiPCnt_WWAIT_CNT_cnt                          0
    #define   LSb16AxiPCnt_WWAIT_CNT_cnt                          0
    #define       bAxiPCnt_WWAIT_CNT_cnt                       32
    #define   MSK32AxiPCnt_WWAIT_CNT_cnt                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCnt_WDATA_CNT                           0x0014

    #define     BA_AxiPCnt_WDATA_CNT_cnt                       0x0014
    #define     B16AxiPCnt_WDATA_CNT_cnt                       0x0014
    #define   LSb32AxiPCnt_WDATA_CNT_cnt                          0
    #define   LSb16AxiPCnt_WDATA_CNT_cnt                          0
    #define       bAxiPCnt_WDATA_CNT_cnt                       32
    #define   MSK32AxiPCnt_WDATA_CNT_cnt                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCnt_OF_STATUS                           0x0018

    #define     BA_AxiPCnt_OF_STATUS_total                     0x0018
    #define     B16AxiPCnt_OF_STATUS_total                     0x0018
    #define   LSb32AxiPCnt_OF_STATUS_total                        0
    #define   LSb16AxiPCnt_OF_STATUS_total                        0
    #define       bAxiPCnt_OF_STATUS_total                     1
    #define   MSK32AxiPCnt_OF_STATUS_total                        0x00000001

    #define     BA_AxiPCnt_OF_STATUS_rwait                     0x0018
    #define     B16AxiPCnt_OF_STATUS_rwait                     0x0018
    #define   LSb32AxiPCnt_OF_STATUS_rwait                        1
    #define   LSb16AxiPCnt_OF_STATUS_rwait                        1
    #define       bAxiPCnt_OF_STATUS_rwait                     1
    #define   MSK32AxiPCnt_OF_STATUS_rwait                        0x00000002

    #define     BA_AxiPCnt_OF_STATUS_rdata                     0x0018
    #define     B16AxiPCnt_OF_STATUS_rdata                     0x0018
    #define   LSb32AxiPCnt_OF_STATUS_rdata                        2
    #define   LSb16AxiPCnt_OF_STATUS_rdata                        2
    #define       bAxiPCnt_OF_STATUS_rdata                     1
    #define   MSK32AxiPCnt_OF_STATUS_rdata                        0x00000004

    #define     BA_AxiPCnt_OF_STATUS_wwait                     0x0018
    #define     B16AxiPCnt_OF_STATUS_wwait                     0x0018
    #define   LSb32AxiPCnt_OF_STATUS_wwait                        3
    #define   LSb16AxiPCnt_OF_STATUS_wwait                        3
    #define       bAxiPCnt_OF_STATUS_wwait                     1
    #define   MSK32AxiPCnt_OF_STATUS_wwait                        0x00000008

    #define     BA_AxiPCnt_OF_STATUS_wdata                     0x0018
    #define     B16AxiPCnt_OF_STATUS_wdata                     0x0018
    #define   LSb32AxiPCnt_OF_STATUS_wdata                        4
    #define   LSb16AxiPCnt_OF_STATUS_wdata                        4
    #define       bAxiPCnt_OF_STATUS_wdata                     1
    #define   MSK32AxiPCnt_OF_STATUS_wdata                        0x00000010
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AxiPCnt {
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCnt_CTRL_clear(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32AxiPCnt_CTRL_clear(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16AxiPCnt_CTRL_clear(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16AxiPCnt_CTRL_clear(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32AxiPCnt_CTRL_enable(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32AxiPCnt_CTRL_enable(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16AxiPCnt_CTRL_enable(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16AxiPCnt_CTRL_enable(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define     w32AxiPCnt_CTRL                                {\
            UNSG32 uCTRL_clear                                 :  1;\
            UNSG32 uCTRL_enable                                :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32AxiPCnt_CTRL;
            struct w32AxiPCnt_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCnt_TOTAL_CNT_cnt(r32)                  _BFGET_(r32,31, 0)
    #define   SET32AxiPCnt_TOTAL_CNT_cnt(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32AxiPCnt_TOTAL_CNT                           {\
            UNSG32 uTOTAL_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCnt_TOTAL_CNT;
            struct w32AxiPCnt_TOTAL_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCnt_RWAIT_CNT_cnt(r32)                  _BFGET_(r32,31, 0)
    #define   SET32AxiPCnt_RWAIT_CNT_cnt(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32AxiPCnt_RWAIT_CNT                           {\
            UNSG32 uRWAIT_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCnt_RWAIT_CNT;
            struct w32AxiPCnt_RWAIT_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCnt_RDATA_CNT_cnt(r32)                  _BFGET_(r32,31, 0)
    #define   SET32AxiPCnt_RDATA_CNT_cnt(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32AxiPCnt_RDATA_CNT                           {\
            UNSG32 uRDATA_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCnt_RDATA_CNT;
            struct w32AxiPCnt_RDATA_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCnt_WWAIT_CNT_cnt(r32)                  _BFGET_(r32,31, 0)
    #define   SET32AxiPCnt_WWAIT_CNT_cnt(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32AxiPCnt_WWAIT_CNT                           {\
            UNSG32 uWWAIT_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCnt_WWAIT_CNT;
            struct w32AxiPCnt_WWAIT_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCnt_WDATA_CNT_cnt(r32)                  _BFGET_(r32,31, 0)
    #define   SET32AxiPCnt_WDATA_CNT_cnt(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32AxiPCnt_WDATA_CNT                           {\
            UNSG32 uWDATA_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCnt_WDATA_CNT;
            struct w32AxiPCnt_WDATA_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCnt_OF_STATUS_total(r32)                _BFGET_(r32, 0, 0)
    #define   SET32AxiPCnt_OF_STATUS_total(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16AxiPCnt_OF_STATUS_total(r16)                _BFGET_(r16, 0, 0)
    #define   SET16AxiPCnt_OF_STATUS_total(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32AxiPCnt_OF_STATUS_rwait(r32)                _BFGET_(r32, 1, 1)
    #define   SET32AxiPCnt_OF_STATUS_rwait(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16AxiPCnt_OF_STATUS_rwait(r16)                _BFGET_(r16, 1, 1)
    #define   SET16AxiPCnt_OF_STATUS_rwait(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32AxiPCnt_OF_STATUS_rdata(r32)                _BFGET_(r32, 2, 2)
    #define   SET32AxiPCnt_OF_STATUS_rdata(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16AxiPCnt_OF_STATUS_rdata(r16)                _BFGET_(r16, 2, 2)
    #define   SET16AxiPCnt_OF_STATUS_rdata(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32AxiPCnt_OF_STATUS_wwait(r32)                _BFGET_(r32, 3, 3)
    #define   SET32AxiPCnt_OF_STATUS_wwait(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16AxiPCnt_OF_STATUS_wwait(r16)                _BFGET_(r16, 3, 3)
    #define   SET16AxiPCnt_OF_STATUS_wwait(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32AxiPCnt_OF_STATUS_wdata(r32)                _BFGET_(r32, 4, 4)
    #define   SET32AxiPCnt_OF_STATUS_wdata(r32,v)              _BFSET_(r32, 4, 4,v)
    #define   GET16AxiPCnt_OF_STATUS_wdata(r16)                _BFGET_(r16, 4, 4)
    #define   SET16AxiPCnt_OF_STATUS_wdata(r16,v)              _BFSET_(r16, 4, 4,v)

    #define     w32AxiPCnt_OF_STATUS                           {\
            UNSG32 uOF_STATUS_total                            :  1;\
            UNSG32 uOF_STATUS_rwait                            :  1;\
            UNSG32 uOF_STATUS_rdata                            :  1;\
            UNSG32 uOF_STATUS_wwait                            :  1;\
            UNSG32 uOF_STATUS_wdata                            :  1;\
            UNSG32 RSVDx18_b5                                  : 27;\
          }
    union { UNSG32 u32AxiPCnt_OF_STATUS;
            struct w32AxiPCnt_OF_STATUS;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AxiPCnt;

    typedef union  T32AxiPCnt_CTRL
          { UNSG32 u32;
            struct w32AxiPCnt_CTRL;
                 } T32AxiPCnt_CTRL;
    typedef union  T32AxiPCnt_TOTAL_CNT
          { UNSG32 u32;
            struct w32AxiPCnt_TOTAL_CNT;
                 } T32AxiPCnt_TOTAL_CNT;
    typedef union  T32AxiPCnt_RWAIT_CNT
          { UNSG32 u32;
            struct w32AxiPCnt_RWAIT_CNT;
                 } T32AxiPCnt_RWAIT_CNT;
    typedef union  T32AxiPCnt_RDATA_CNT
          { UNSG32 u32;
            struct w32AxiPCnt_RDATA_CNT;
                 } T32AxiPCnt_RDATA_CNT;
    typedef union  T32AxiPCnt_WWAIT_CNT
          { UNSG32 u32;
            struct w32AxiPCnt_WWAIT_CNT;
                 } T32AxiPCnt_WWAIT_CNT;
    typedef union  T32AxiPCnt_WDATA_CNT
          { UNSG32 u32;
            struct w32AxiPCnt_WDATA_CNT;
                 } T32AxiPCnt_WDATA_CNT;
    typedef union  T32AxiPCnt_OF_STATUS
          { UNSG32 u32;
            struct w32AxiPCnt_OF_STATUS;
                 } T32AxiPCnt_OF_STATUS;
    ///////////////////////////////////////////////////////////

    typedef union  TAxiPCnt_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCnt_CTRL;
                   };
                 } TAxiPCnt_CTRL;
    typedef union  TAxiPCnt_TOTAL_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCnt_TOTAL_CNT;
                   };
                 } TAxiPCnt_TOTAL_CNT;
    typedef union  TAxiPCnt_RWAIT_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCnt_RWAIT_CNT;
                   };
                 } TAxiPCnt_RWAIT_CNT;
    typedef union  TAxiPCnt_RDATA_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCnt_RDATA_CNT;
                   };
                 } TAxiPCnt_RDATA_CNT;
    typedef union  TAxiPCnt_WWAIT_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCnt_WWAIT_CNT;
                   };
                 } TAxiPCnt_WWAIT_CNT;
    typedef union  TAxiPCnt_WDATA_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCnt_WDATA_CNT;
                   };
                 } TAxiPCnt_WDATA_CNT;
    typedef union  TAxiPCnt_OF_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCnt_OF_STATUS;
                   };
                 } TAxiPCnt_OF_STATUS;

    ///////////////////////////////////////////////////////////
     SIGN32 AxiPCnt_drvrd(SIE_AxiPCnt *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AxiPCnt_drvwr(SIE_AxiPCnt *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AxiPCnt_reset(SIE_AxiPCnt *p);
     SIGN32 AxiPCnt_cmp  (SIE_AxiPCnt *p, SIE_AxiPCnt *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AxiPCnt_check(p,pie,pfx,hLOG) AxiPCnt_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AxiPCnt_print(p,    pfx,hLOG) AxiPCnt_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AxiPCnt
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CpuSS                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 MoltresReg           
///               $MoltresReg          MoltresReg        REG          
///                                    ###
///                                    * Configuration registers for Moltres (PJ4-MP) sub-system (moltres_mp_ip).
///                                    ###
///     @ 0x00044 ASSYM_ADDR           (P)
///               ###
///               * Register to define Asymmetric address start
///               * *INTERNAL_ONLY**
///               ###
///               %unsigned 2  sel                       0x0
///                                    ###
///                                    * 00 : symmetric
///                                    * 01:   128MB + 64 MB
///                                    * 10:   256MB + 128MB
///                                    * 11:   512MB + 256MB
///                                    * For addresses above 128MB/ 256MB/ 512MB (for sel=01,10,11 respectively), MC4 throughput is reduced by half. For the case of 384MB formed by 128Mbx16+64Mbx16 DRAM parts, this register should be programmed with 10.
///                                    * Registers for mapping AxID from GC1000 (gfx3D) module to AxUSER and AxCACHE bits. Deleted for BG2-CT as the GC1000->IOB path has been removed. However, the address map is kept same.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00048                      (W-)
///     #         # Stuffing bytes...
///               %% 512
///     @ 0x00088 MC4_4TO1             (P)
///               ###
///               * Registers that selects 4:1/ 2:1 operation for Memory Controller.
///               * *INTERNAL_ONLY**
///               ###
///               %unsigned 1  enable                    0x1
///                                    ###
///                                    * 1 : selects 4:1 operation. Memory Controller runs at 1/4th of PHY clock (or half of DDR interface clock)
///                                    * Recommended for data rates more than 1.6GHz DDR.
///                                    * 0 : selects 2:1 operation. Memory Controller runs at ½ the speed of PHY clock (or same as DDR interface clock).
///                                    * Recommended for data rates of up to 1.6GHz DDR.
///                                    * NOTE: Memory Controller is less efficient in 4:1 mode, so it is not recommended to enable 4:1 operation at less than or equal to 1.6GHz DDR rates.
///                                    * This register should only be written when MC is idle (preferably as part of the MC initialization sequence).
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0008C AVIO_PRIO            (P)
///               ###
///               * Registers that controls priority of AVIO DMA masters when QoS flag is low. For this register to take effect, per-master priority scheme should be selected inside MC4 for port-1 (vppDhub) and port-2 (agVipDhub).
///               * *INTERNAL_ONLY**
///               ###
///               %unsigned 1  vppDhub                   0x1
///                                    ###
///                                    * When QoS flag from vppDhub is asserted, critical priority request is sent to MC4. When QoS flag is low, this bit decides the priority of the transaction sent to MC4.
///                                    * 0: Low
///                                    * 1: High
///                                    ###
///               %unsigned 1  agVipDhub                 0x1
///                                    ###
///                                    * When QoS flag from agVipDhub is asserted, critical priority request is sent to MC4. When QoS flag is low, this bit decides the priority of the transaction sent to MC4.
///                                    * 0: Low
///                                    * 1: High
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00090 ddrPhyLoopBackSrc    (P)
///               ###
///               * Register to control source of DDR Phy Loopback config information (JTAG or CPU AHB)
///               ###
///               %unsigned 1  Control                   0x1
///                                    ###
///                                    * Control to select the source of DDR Phy Loopback configuration info
///                                    * 0 – through the CPU AHB bus
///                                    * 1 - via JTAG
///                                    * JTAG chosen by default
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00094 ddrPhyLoopBackConfig1 (P)
///               ###
///               * Register for configuring ddrPhy Loopback
///               ###
///               %unsigned 1  TST_MODE                  0x0
///                                    ###
///                                    * Loopback Mode Enable.
///                                    * 0: under normal functional mode, DDR-PHY is fed with MC4 output.
///                                    * 1: Loopback test-mode is enabled, DDR-PHY is fed with PRBS test-patterns.
///                                    ###
///               %unsigned 1  TST_START                 0x0
///                                    ###
///                                    * Loopback Test Start.
///                                    * 0->1 transition will start the loopback test. S/W shall write 0 and then 1 to start the test. Once written as 0 and then 1, H/W will not look at this bit until loopback test is indicated done through the ddrPhyLoopBackStatus2 register.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00098 ddrPhyLoopBackConfig2 (P)
///               ###
///               * Register for controlling inputs to the PRBS test-pattern generator
///               ###
///               %unsigned 5  CFG_DATA_DLY              0x0
///                                    ###
///                                    * Adjust the value to sample the data from the data sub-phy for comparison.
///                                    ###
///               %unsigned 3  RSERVRED1                 0x0
///                                    ###
///                                    * Reserved. Not used.
///                                    * *INTERNAL_ONLY**
///                                    ###
///               %unsigned 5  CFG_ADC_DLY               0x0
///                                    ###
///                                    * Adjust the value to sample the data from the adcm sub-phy for comparison.
///                                    ###
///               %unsigned 2  RSERVRED2                 0x0
///                                    ###
///                                    * Reserved. Not used.
///                                    * *INTERNAL_ONLY**
///                                    ###
///               %unsigned 1  SKIP_CMD_SUBPHY           0x0
///                                    ###
///                                    * 0: Loopback test covers ADCM sub-PHYs
///                                    * 1: Loopback test skips ADCM sub-PHYs
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0009C ddrPhyLoopBackConfig3 (P)
///               ###
///               * Not used.
///               * *INTERNAL_ONLY**
///               ###
///               %unsigned 32 SEED                      0x0
///                                    ###
///                                    * Initial Seed
///                                    ###
///     @ 0x000A0 ddrPhyLoopBackStatus1 (R-)
///               ###
///               * Register for DDR PHY Loop Back Status
///               ###
///               %unsigned 16 STATUS                    
///                                    ###
///                                    * Indicate which sub-PHY fail the test. Valid when “DONE” bit indicates loopback test is finished.
///                                    ###
///               %unsigned 16 RESERVED                  
///                                    ###
///                                    * Not used.
///                                    * *INTERNAL_ONLY**
///                                    ###
///     @ 0x000A4 ddrPhyLoopBackStatus2 (R-)
///               %unsigned 1  DONE                      
///                                    ###
///                                    * 0: Loopback test is not finished.
///                                    * 1: Loopback test is finished and status is valid.
///                                    * This bit gets cleared automatically when S/W writes 1 to TST_START bit.
///                                    ###
///               %unsigned 1  FAIL                      
///                                    ###
///                                    * Valid when DONE bit is high.
///                                    * 0: Loopback test passed.
///                                    * 1: Loopback test failed, ddrPhyLoopBackStatus1 register indicates which sub-PHY has failed.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x000A8 IXBAR_BYPASS         (P)
///               ###
///               * Register to bypass IXBAR. Not used as IXBAR is removed for BG2-CT.
///               * *INTERNAL_ONLY**
///               ###
///               %unsigned 1  Sel                       0x0
///                                    ###
///                                    * 0 – Do not bypass IXBAR
///                                    * 1 – Bypass IXBAR, I.e. Connect GC1000 directly to MC4 port.
///                                    * This register should only be written when GC1000 is idle (preferably before starting GC1000).
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x000AC CSn_AD15_SEL         (P)
///               ###
///               * Select bit that controls whether Chip-Select or Address bit #15 is sent to CSn pad
///               ###
///               %unsigned 1  Sel                       0x0
///                                    ###
///                                    * 0 – send chip-select over CSn pad
///                                    * 1 – send Address bit#15 over CSn pad
///                                    * This register should only be written when MC is idle (preferably as part of the MC initialization sequence).
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x000B0 sysIntPol63_32       (P)
///               %unsigned 32 invert                    0x0
///                                    ###
///                                    * Invert control for IRQs 63-32 (IRQ table is defined in pic.sxw.txt)
///                                    * 0 : Don't invert before sending to GIC
///                                    * 1 : Invert before sending to GIC
///                                    ###
///     @ 0x000B4                      (W-)
///     #         # Stuffing bytes...
///               %% 2656
///     @ 0x00200                      (P)
///     # 0x00200 VPPMTR_CONFIG        
///               $mtr                 VPPMTR_CONFIG     REG          
///                                    ###
///                                    * Configuration registers for VPP MTR
///                                    ###
///     @ 0x00268                      (W-)
///     #         # Stuffing bytes...
///               %% 192
///     @ 0x00280                      (P)
///     # 0x00280 GFX3D_PC             
///               $AxiPCnt             GFX3D_PC          REG          
///                                    ###
///                                    * Performance Counters for GFX3D AXI.
///                                    * *INTERNAL_ONLY**
///                                    ###
///     @ 0x0029C                      (W-)
///     #         # Stuffing bytes...
///               %% 32
///     @ 0x002A0                      (P)
///     # 0x002A0 CPU_PC               
///               $AxiPCnt             CPU_PC            REG          
///                                    ###
///                                    * Performance Counters for CPU AXI.
///                                    * *INTERNAL_ONLY**
///                                    ###
///     @ 0x002BC                      (W-)
///     #         # Stuffing bytes...
///               %% 2592
///     @ 0x00400                      (P)
///     # 0x00400 CA9Reg               
///               $CA9Reg              CA9Reg            REG          
///                                    ###
///                                    * CA9 Specific Registers
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1056B, bits:    1080b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CpuSS
#define h_CpuSS (){}

    #define     RA_CpuSS_MoltresReg                            0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_ASSYM_ADDR                            0x0044

    #define     BA_CpuSS_ASSYM_ADDR_sel                        0x0044
    #define     B16CpuSS_ASSYM_ADDR_sel                        0x0044
    #define   LSb32CpuSS_ASSYM_ADDR_sel                           0
    #define   LSb16CpuSS_ASSYM_ADDR_sel                           0
    #define       bCpuSS_ASSYM_ADDR_sel                        2
    #define   MSK32CpuSS_ASSYM_ADDR_sel                           0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_MC4_4TO1                              0x0088

    #define     BA_CpuSS_MC4_4TO1_enable                       0x0088
    #define     B16CpuSS_MC4_4TO1_enable                       0x0088
    #define   LSb32CpuSS_MC4_4TO1_enable                          0
    #define   LSb16CpuSS_MC4_4TO1_enable                          0
    #define       bCpuSS_MC4_4TO1_enable                       1
    #define   MSK32CpuSS_MC4_4TO1_enable                          0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_AVIO_PRIO                             0x008C

    #define     BA_CpuSS_AVIO_PRIO_vppDhub                     0x008C
    #define     B16CpuSS_AVIO_PRIO_vppDhub                     0x008C
    #define   LSb32CpuSS_AVIO_PRIO_vppDhub                        0
    #define   LSb16CpuSS_AVIO_PRIO_vppDhub                        0
    #define       bCpuSS_AVIO_PRIO_vppDhub                     1
    #define   MSK32CpuSS_AVIO_PRIO_vppDhub                        0x00000001

    #define     BA_CpuSS_AVIO_PRIO_agVipDhub                   0x008C
    #define     B16CpuSS_AVIO_PRIO_agVipDhub                   0x008C
    #define   LSb32CpuSS_AVIO_PRIO_agVipDhub                      1
    #define   LSb16CpuSS_AVIO_PRIO_agVipDhub                      1
    #define       bCpuSS_AVIO_PRIO_agVipDhub                   1
    #define   MSK32CpuSS_AVIO_PRIO_agVipDhub                      0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_ddrPhyLoopBackSrc                     0x0090

    #define     BA_CpuSS_ddrPhyLoopBackSrc_Control             0x0090
    #define     B16CpuSS_ddrPhyLoopBackSrc_Control             0x0090
    #define   LSb32CpuSS_ddrPhyLoopBackSrc_Control                0
    #define   LSb16CpuSS_ddrPhyLoopBackSrc_Control                0
    #define       bCpuSS_ddrPhyLoopBackSrc_Control             1
    #define   MSK32CpuSS_ddrPhyLoopBackSrc_Control                0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_ddrPhyLoopBackConfig1                 0x0094

    #define     BA_CpuSS_ddrPhyLoopBackConfig1_TST_MODE        0x0094
    #define     B16CpuSS_ddrPhyLoopBackConfig1_TST_MODE        0x0094
    #define   LSb32CpuSS_ddrPhyLoopBackConfig1_TST_MODE           0
    #define   LSb16CpuSS_ddrPhyLoopBackConfig1_TST_MODE           0
    #define       bCpuSS_ddrPhyLoopBackConfig1_TST_MODE        1
    #define   MSK32CpuSS_ddrPhyLoopBackConfig1_TST_MODE           0x00000001

    #define     BA_CpuSS_ddrPhyLoopBackConfig1_TST_START       0x0094
    #define     B16CpuSS_ddrPhyLoopBackConfig1_TST_START       0x0094
    #define   LSb32CpuSS_ddrPhyLoopBackConfig1_TST_START          1
    #define   LSb16CpuSS_ddrPhyLoopBackConfig1_TST_START          1
    #define       bCpuSS_ddrPhyLoopBackConfig1_TST_START       1
    #define   MSK32CpuSS_ddrPhyLoopBackConfig1_TST_START          0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_ddrPhyLoopBackConfig2                 0x0098

    #define     BA_CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY    0x0098
    #define     B16CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY    0x0098
    #define   LSb32CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY       0
    #define   LSb16CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY       0
    #define       bCpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY    5
    #define   MSK32CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY       0x0000001F

    #define     BA_CpuSS_ddrPhyLoopBackConfig2_RSERVRED1       0x0098
    #define     B16CpuSS_ddrPhyLoopBackConfig2_RSERVRED1       0x0098
    #define   LSb32CpuSS_ddrPhyLoopBackConfig2_RSERVRED1          5
    #define   LSb16CpuSS_ddrPhyLoopBackConfig2_RSERVRED1          5
    #define       bCpuSS_ddrPhyLoopBackConfig2_RSERVRED1       3
    #define   MSK32CpuSS_ddrPhyLoopBackConfig2_RSERVRED1          0x000000E0

    #define     BA_CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY     0x0099
    #define     B16CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY     0x0098
    #define   LSb32CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY        8
    #define   LSb16CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY        8
    #define       bCpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY     5
    #define   MSK32CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY        0x00001F00

    #define     BA_CpuSS_ddrPhyLoopBackConfig2_RSERVRED2       0x0099
    #define     B16CpuSS_ddrPhyLoopBackConfig2_RSERVRED2       0x0098
    #define   LSb32CpuSS_ddrPhyLoopBackConfig2_RSERVRED2          13
    #define   LSb16CpuSS_ddrPhyLoopBackConfig2_RSERVRED2          13
    #define       bCpuSS_ddrPhyLoopBackConfig2_RSERVRED2       2
    #define   MSK32CpuSS_ddrPhyLoopBackConfig2_RSERVRED2          0x00006000

    #define     BA_CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY 0x0099
    #define     B16CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY 0x0098
    #define   LSb32CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY    15
    #define   LSb16CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY    15
    #define       bCpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY 1
    #define   MSK32CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY    0x00008000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_ddrPhyLoopBackConfig3                 0x009C

    #define     BA_CpuSS_ddrPhyLoopBackConfig3_SEED            0x009C
    #define     B16CpuSS_ddrPhyLoopBackConfig3_SEED            0x009C
    #define   LSb32CpuSS_ddrPhyLoopBackConfig3_SEED               0
    #define   LSb16CpuSS_ddrPhyLoopBackConfig3_SEED               0
    #define       bCpuSS_ddrPhyLoopBackConfig3_SEED            32
    #define   MSK32CpuSS_ddrPhyLoopBackConfig3_SEED               0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_ddrPhyLoopBackStatus1                 0x00A0

    #define     BA_CpuSS_ddrPhyLoopBackStatus1_STATUS          0x00A0
    #define     B16CpuSS_ddrPhyLoopBackStatus1_STATUS          0x00A0
    #define   LSb32CpuSS_ddrPhyLoopBackStatus1_STATUS             0
    #define   LSb16CpuSS_ddrPhyLoopBackStatus1_STATUS             0
    #define       bCpuSS_ddrPhyLoopBackStatus1_STATUS          16
    #define   MSK32CpuSS_ddrPhyLoopBackStatus1_STATUS             0x0000FFFF

    #define     BA_CpuSS_ddrPhyLoopBackStatus1_RESERVED        0x00A2
    #define     B16CpuSS_ddrPhyLoopBackStatus1_RESERVED        0x00A2
    #define   LSb32CpuSS_ddrPhyLoopBackStatus1_RESERVED           16
    #define   LSb16CpuSS_ddrPhyLoopBackStatus1_RESERVED           0
    #define       bCpuSS_ddrPhyLoopBackStatus1_RESERVED        16
    #define   MSK32CpuSS_ddrPhyLoopBackStatus1_RESERVED           0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_ddrPhyLoopBackStatus2                 0x00A4

    #define     BA_CpuSS_ddrPhyLoopBackStatus2_DONE            0x00A4
    #define     B16CpuSS_ddrPhyLoopBackStatus2_DONE            0x00A4
    #define   LSb32CpuSS_ddrPhyLoopBackStatus2_DONE               0
    #define   LSb16CpuSS_ddrPhyLoopBackStatus2_DONE               0
    #define       bCpuSS_ddrPhyLoopBackStatus2_DONE            1
    #define   MSK32CpuSS_ddrPhyLoopBackStatus2_DONE               0x00000001

    #define     BA_CpuSS_ddrPhyLoopBackStatus2_FAIL            0x00A4
    #define     B16CpuSS_ddrPhyLoopBackStatus2_FAIL            0x00A4
    #define   LSb32CpuSS_ddrPhyLoopBackStatus2_FAIL               1
    #define   LSb16CpuSS_ddrPhyLoopBackStatus2_FAIL               1
    #define       bCpuSS_ddrPhyLoopBackStatus2_FAIL            1
    #define   MSK32CpuSS_ddrPhyLoopBackStatus2_FAIL               0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_IXBAR_BYPASS                          0x00A8

    #define     BA_CpuSS_IXBAR_BYPASS_Sel                      0x00A8
    #define     B16CpuSS_IXBAR_BYPASS_Sel                      0x00A8
    #define   LSb32CpuSS_IXBAR_BYPASS_Sel                         0
    #define   LSb16CpuSS_IXBAR_BYPASS_Sel                         0
    #define       bCpuSS_IXBAR_BYPASS_Sel                      1
    #define   MSK32CpuSS_IXBAR_BYPASS_Sel                         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_CSn_AD15_SEL                          0x00AC

    #define     BA_CpuSS_CSn_AD15_SEL_Sel                      0x00AC
    #define     B16CpuSS_CSn_AD15_SEL_Sel                      0x00AC
    #define   LSb32CpuSS_CSn_AD15_SEL_Sel                         0
    #define   LSb16CpuSS_CSn_AD15_SEL_Sel                         0
    #define       bCpuSS_CSn_AD15_SEL_Sel                      1
    #define   MSK32CpuSS_CSn_AD15_SEL_Sel                         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_sysIntPol63_32                        0x00B0

    #define     BA_CpuSS_sysIntPol63_32_invert                 0x00B0
    #define     B16CpuSS_sysIntPol63_32_invert                 0x00B0
    #define   LSb32CpuSS_sysIntPol63_32_invert                    0
    #define   LSb16CpuSS_sysIntPol63_32_invert                    0
    #define       bCpuSS_sysIntPol63_32_invert                 32
    #define   MSK32CpuSS_sysIntPol63_32_invert                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_VPPMTR_CONFIG                         0x0200
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_GFX3D_PC                              0x0280
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_CPU_PC                                0x02A0
    ///////////////////////////////////////////////////////////
    #define     RA_CpuSS_CA9Reg                                0x0400
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CpuSS {
    ///////////////////////////////////////////////////////////
              SIE_MoltresReg                                   ie_MoltresReg;
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_ASSYM_ADDR_sel(r32)                   _BFGET_(r32, 1, 0)
    #define   SET32CpuSS_ASSYM_ADDR_sel(r32,v)                 _BFSET_(r32, 1, 0,v)
    #define   GET16CpuSS_ASSYM_ADDR_sel(r16)                   _BFGET_(r16, 1, 0)
    #define   SET16CpuSS_ASSYM_ADDR_sel(r16,v)                 _BFSET_(r16, 1, 0,v)

    #define     w32CpuSS_ASSYM_ADDR                            {\
            UNSG32 uASSYM_ADDR_sel                             :  2;\
            UNSG32 RSVDx44_b2                                  : 30;\
          }
    union { UNSG32 u32CpuSS_ASSYM_ADDR;
            struct w32CpuSS_ASSYM_ADDR;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx48                                     [64];
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_MC4_4TO1_enable(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32CpuSS_MC4_4TO1_enable(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16CpuSS_MC4_4TO1_enable(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16CpuSS_MC4_4TO1_enable(r16,v)                _BFSET_(r16, 0, 0,v)

    #define     w32CpuSS_MC4_4TO1                              {\
            UNSG32 uMC4_4TO1_enable                            :  1;\
            UNSG32 RSVDx88_b1                                  : 31;\
          }
    union { UNSG32 u32CpuSS_MC4_4TO1;
            struct w32CpuSS_MC4_4TO1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_AVIO_PRIO_vppDhub(r32)                _BFGET_(r32, 0, 0)
    #define   SET32CpuSS_AVIO_PRIO_vppDhub(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16CpuSS_AVIO_PRIO_vppDhub(r16)                _BFGET_(r16, 0, 0)
    #define   SET16CpuSS_AVIO_PRIO_vppDhub(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32CpuSS_AVIO_PRIO_agVipDhub(r32)              _BFGET_(r32, 1, 1)
    #define   SET32CpuSS_AVIO_PRIO_agVipDhub(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16CpuSS_AVIO_PRIO_agVipDhub(r16)              _BFGET_(r16, 1, 1)
    #define   SET16CpuSS_AVIO_PRIO_agVipDhub(r16,v)            _BFSET_(r16, 1, 1,v)

    #define     w32CpuSS_AVIO_PRIO                             {\
            UNSG32 uAVIO_PRIO_vppDhub                          :  1;\
            UNSG32 uAVIO_PRIO_agVipDhub                        :  1;\
            UNSG32 RSVDx8C_b2                                  : 30;\
          }
    union { UNSG32 u32CpuSS_AVIO_PRIO;
            struct w32CpuSS_AVIO_PRIO;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_ddrPhyLoopBackSrc_Control(r32)        _BFGET_(r32, 0, 0)
    #define   SET32CpuSS_ddrPhyLoopBackSrc_Control(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16CpuSS_ddrPhyLoopBackSrc_Control(r16)        _BFGET_(r16, 0, 0)
    #define   SET16CpuSS_ddrPhyLoopBackSrc_Control(r16,v)      _BFSET_(r16, 0, 0,v)

    #define     w32CpuSS_ddrPhyLoopBackSrc                     {\
            UNSG32 uddrPhyLoopBackSrc_Control                  :  1;\
            UNSG32 RSVDx90_b1                                  : 31;\
          }
    union { UNSG32 u32CpuSS_ddrPhyLoopBackSrc;
            struct w32CpuSS_ddrPhyLoopBackSrc;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_ddrPhyLoopBackConfig1_TST_MODE(r32)   _BFGET_(r32, 0, 0)
    #define   SET32CpuSS_ddrPhyLoopBackConfig1_TST_MODE(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16CpuSS_ddrPhyLoopBackConfig1_TST_MODE(r16)   _BFGET_(r16, 0, 0)
    #define   SET16CpuSS_ddrPhyLoopBackConfig1_TST_MODE(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32CpuSS_ddrPhyLoopBackConfig1_TST_START(r32)  _BFGET_(r32, 1, 1)
    #define   SET32CpuSS_ddrPhyLoopBackConfig1_TST_START(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16CpuSS_ddrPhyLoopBackConfig1_TST_START(r16)  _BFGET_(r16, 1, 1)
    #define   SET16CpuSS_ddrPhyLoopBackConfig1_TST_START(r16,v) _BFSET_(r16, 1, 1,v)

    #define     w32CpuSS_ddrPhyLoopBackConfig1                 {\
            UNSG32 uddrPhyLoopBackConfig1_TST_MODE             :  1;\
            UNSG32 uddrPhyLoopBackConfig1_TST_START            :  1;\
            UNSG32 RSVDx94_b2                                  : 30;\
          }
    union { UNSG32 u32CpuSS_ddrPhyLoopBackConfig1;
            struct w32CpuSS_ddrPhyLoopBackConfig1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY(r32) _BFGET_(r32, 4, 0)
    #define   SET32CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY(r32,v) _BFSET_(r32, 4, 0,v)
    #define   GET16CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY(r16) _BFGET_(r16, 4, 0)
    #define   SET16CpuSS_ddrPhyLoopBackConfig2_CFG_DATA_DLY(r16,v) _BFSET_(r16, 4, 0,v)

    #define   GET32CpuSS_ddrPhyLoopBackConfig2_RSERVRED1(r32)  _BFGET_(r32, 7, 5)
    #define   SET32CpuSS_ddrPhyLoopBackConfig2_RSERVRED1(r32,v) _BFSET_(r32, 7, 5,v)
    #define   GET16CpuSS_ddrPhyLoopBackConfig2_RSERVRED1(r16)  _BFGET_(r16, 7, 5)
    #define   SET16CpuSS_ddrPhyLoopBackConfig2_RSERVRED1(r16,v) _BFSET_(r16, 7, 5,v)

    #define   GET32CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY(r32) _BFGET_(r32,12, 8)
    #define   SET32CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY(r32,v) _BFSET_(r32,12, 8,v)
    #define   GET16CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY(r16) _BFGET_(r16,12, 8)
    #define   SET16CpuSS_ddrPhyLoopBackConfig2_CFG_ADC_DLY(r16,v) _BFSET_(r16,12, 8,v)

    #define   GET32CpuSS_ddrPhyLoopBackConfig2_RSERVRED2(r32)  _BFGET_(r32,14,13)
    #define   SET32CpuSS_ddrPhyLoopBackConfig2_RSERVRED2(r32,v) _BFSET_(r32,14,13,v)
    #define   GET16CpuSS_ddrPhyLoopBackConfig2_RSERVRED2(r16)  _BFGET_(r16,14,13)
    #define   SET16CpuSS_ddrPhyLoopBackConfig2_RSERVRED2(r16,v) _BFSET_(r16,14,13,v)

    #define   GET32CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY(r32) _BFGET_(r32,15,15)
    #define   SET32CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY(r32,v) _BFSET_(r32,15,15,v)
    #define   GET16CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY(r16) _BFGET_(r16,15,15)
    #define   SET16CpuSS_ddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY(r16,v) _BFSET_(r16,15,15,v)

    #define     w32CpuSS_ddrPhyLoopBackConfig2                 {\
            UNSG32 uddrPhyLoopBackConfig2_CFG_DATA_DLY         :  5;\
            UNSG32 uddrPhyLoopBackConfig2_RSERVRED1            :  3;\
            UNSG32 uddrPhyLoopBackConfig2_CFG_ADC_DLY          :  5;\
            UNSG32 uddrPhyLoopBackConfig2_RSERVRED2            :  2;\
            UNSG32 uddrPhyLoopBackConfig2_SKIP_CMD_SUBPHY      :  1;\
            UNSG32 RSVDx98_b16                                 : 16;\
          }
    union { UNSG32 u32CpuSS_ddrPhyLoopBackConfig2;
            struct w32CpuSS_ddrPhyLoopBackConfig2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_ddrPhyLoopBackConfig3_SEED(r32)       _BFGET_(r32,31, 0)
    #define   SET32CpuSS_ddrPhyLoopBackConfig3_SEED(r32,v)     _BFSET_(r32,31, 0,v)

    #define     w32CpuSS_ddrPhyLoopBackConfig3                 {\
            UNSG32 uddrPhyLoopBackConfig3_SEED                 : 32;\
          }
    union { UNSG32 u32CpuSS_ddrPhyLoopBackConfig3;
            struct w32CpuSS_ddrPhyLoopBackConfig3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_ddrPhyLoopBackStatus1_STATUS(r32)     _BFGET_(r32,15, 0)
    #define   SET32CpuSS_ddrPhyLoopBackStatus1_STATUS(r32,v)   _BFSET_(r32,15, 0,v)
    #define   GET16CpuSS_ddrPhyLoopBackStatus1_STATUS(r16)     _BFGET_(r16,15, 0)
    #define   SET16CpuSS_ddrPhyLoopBackStatus1_STATUS(r16,v)   _BFSET_(r16,15, 0,v)

    #define   GET32CpuSS_ddrPhyLoopBackStatus1_RESERVED(r32)   _BFGET_(r32,31,16)
    #define   SET32CpuSS_ddrPhyLoopBackStatus1_RESERVED(r32,v) _BFSET_(r32,31,16,v)
    #define   GET16CpuSS_ddrPhyLoopBackStatus1_RESERVED(r16)   _BFGET_(r16,15, 0)
    #define   SET16CpuSS_ddrPhyLoopBackStatus1_RESERVED(r16,v) _BFSET_(r16,15, 0,v)

    #define     w32CpuSS_ddrPhyLoopBackStatus1                 {\
            UNSG32 uddrPhyLoopBackStatus1_STATUS               : 16;\
            UNSG32 uddrPhyLoopBackStatus1_RESERVED             : 16;\
          }
    union { UNSG32 u32CpuSS_ddrPhyLoopBackStatus1;
            struct w32CpuSS_ddrPhyLoopBackStatus1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_ddrPhyLoopBackStatus2_DONE(r32)       _BFGET_(r32, 0, 0)
    #define   SET32CpuSS_ddrPhyLoopBackStatus2_DONE(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16CpuSS_ddrPhyLoopBackStatus2_DONE(r16)       _BFGET_(r16, 0, 0)
    #define   SET16CpuSS_ddrPhyLoopBackStatus2_DONE(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32CpuSS_ddrPhyLoopBackStatus2_FAIL(r32)       _BFGET_(r32, 1, 1)
    #define   SET32CpuSS_ddrPhyLoopBackStatus2_FAIL(r32,v)     _BFSET_(r32, 1, 1,v)
    #define   GET16CpuSS_ddrPhyLoopBackStatus2_FAIL(r16)       _BFGET_(r16, 1, 1)
    #define   SET16CpuSS_ddrPhyLoopBackStatus2_FAIL(r16,v)     _BFSET_(r16, 1, 1,v)

    #define     w32CpuSS_ddrPhyLoopBackStatus2                 {\
            UNSG32 uddrPhyLoopBackStatus2_DONE                 :  1;\
            UNSG32 uddrPhyLoopBackStatus2_FAIL                 :  1;\
            UNSG32 RSVDxA4_b2                                  : 30;\
          }
    union { UNSG32 u32CpuSS_ddrPhyLoopBackStatus2;
            struct w32CpuSS_ddrPhyLoopBackStatus2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_IXBAR_BYPASS_Sel(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32CpuSS_IXBAR_BYPASS_Sel(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16CpuSS_IXBAR_BYPASS_Sel(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16CpuSS_IXBAR_BYPASS_Sel(r16,v)               _BFSET_(r16, 0, 0,v)

    #define     w32CpuSS_IXBAR_BYPASS                          {\
            UNSG32 uIXBAR_BYPASS_Sel                           :  1;\
            UNSG32 RSVDxA8_b1                                  : 31;\
          }
    union { UNSG32 u32CpuSS_IXBAR_BYPASS;
            struct w32CpuSS_IXBAR_BYPASS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_CSn_AD15_SEL_Sel(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32CpuSS_CSn_AD15_SEL_Sel(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16CpuSS_CSn_AD15_SEL_Sel(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16CpuSS_CSn_AD15_SEL_Sel(r16,v)               _BFSET_(r16, 0, 0,v)

    #define     w32CpuSS_CSn_AD15_SEL                          {\
            UNSG32 uCSn_AD15_SEL_Sel                           :  1;\
            UNSG32 RSVDxAC_b1                                  : 31;\
          }
    union { UNSG32 u32CpuSS_CSn_AD15_SEL;
            struct w32CpuSS_CSn_AD15_SEL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuSS_sysIntPol63_32_invert(r32)            _BFGET_(r32,31, 0)
    #define   SET32CpuSS_sysIntPol63_32_invert(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32CpuSS_sysIntPol63_32                        {\
            UNSG32 usysIntPol63_32_invert                      : 32;\
          }
    union { UNSG32 u32CpuSS_sysIntPol63_32;
            struct w32CpuSS_sysIntPol63_32;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxB4                                     [332];
    ///////////////////////////////////////////////////////////
              SIE_mtr                                          ie_VPPMTR_CONFIG;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx268                                    [24];
    ///////////////////////////////////////////////////////////
              SIE_AxiPCnt                                      ie_GFX3D_PC;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx29C                                    [4];
    ///////////////////////////////////////////////////////////
              SIE_AxiPCnt                                      ie_CPU_PC;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx2BC                                    [324];
    ///////////////////////////////////////////////////////////
              SIE_CA9Reg                                       ie_CA9Reg;
    ///////////////////////////////////////////////////////////
    } SIE_CpuSS;

    typedef union  T32CpuSS_ASSYM_ADDR
          { UNSG32 u32;
            struct w32CpuSS_ASSYM_ADDR;
                 } T32CpuSS_ASSYM_ADDR;
    typedef union  T32CpuSS_MC4_4TO1
          { UNSG32 u32;
            struct w32CpuSS_MC4_4TO1;
                 } T32CpuSS_MC4_4TO1;
    typedef union  T32CpuSS_AVIO_PRIO
          { UNSG32 u32;
            struct w32CpuSS_AVIO_PRIO;
                 } T32CpuSS_AVIO_PRIO;
    typedef union  T32CpuSS_ddrPhyLoopBackSrc
          { UNSG32 u32;
            struct w32CpuSS_ddrPhyLoopBackSrc;
                 } T32CpuSS_ddrPhyLoopBackSrc;
    typedef union  T32CpuSS_ddrPhyLoopBackConfig1
          { UNSG32 u32;
            struct w32CpuSS_ddrPhyLoopBackConfig1;
                 } T32CpuSS_ddrPhyLoopBackConfig1;
    typedef union  T32CpuSS_ddrPhyLoopBackConfig2
          { UNSG32 u32;
            struct w32CpuSS_ddrPhyLoopBackConfig2;
                 } T32CpuSS_ddrPhyLoopBackConfig2;
    typedef union  T32CpuSS_ddrPhyLoopBackConfig3
          { UNSG32 u32;
            struct w32CpuSS_ddrPhyLoopBackConfig3;
                 } T32CpuSS_ddrPhyLoopBackConfig3;
    typedef union  T32CpuSS_ddrPhyLoopBackStatus1
          { UNSG32 u32;
            struct w32CpuSS_ddrPhyLoopBackStatus1;
                 } T32CpuSS_ddrPhyLoopBackStatus1;
    typedef union  T32CpuSS_ddrPhyLoopBackStatus2
          { UNSG32 u32;
            struct w32CpuSS_ddrPhyLoopBackStatus2;
                 } T32CpuSS_ddrPhyLoopBackStatus2;
    typedef union  T32CpuSS_IXBAR_BYPASS
          { UNSG32 u32;
            struct w32CpuSS_IXBAR_BYPASS;
                 } T32CpuSS_IXBAR_BYPASS;
    typedef union  T32CpuSS_CSn_AD15_SEL
          { UNSG32 u32;
            struct w32CpuSS_CSn_AD15_SEL;
                 } T32CpuSS_CSn_AD15_SEL;
    typedef union  T32CpuSS_sysIntPol63_32
          { UNSG32 u32;
            struct w32CpuSS_sysIntPol63_32;
                 } T32CpuSS_sysIntPol63_32;
    ///////////////////////////////////////////////////////////

    typedef union  TCpuSS_ASSYM_ADDR
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_ASSYM_ADDR;
                   };
                 } TCpuSS_ASSYM_ADDR;
    typedef union  TCpuSS_MC4_4TO1
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_MC4_4TO1;
                   };
                 } TCpuSS_MC4_4TO1;
    typedef union  TCpuSS_AVIO_PRIO
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_AVIO_PRIO;
                   };
                 } TCpuSS_AVIO_PRIO;
    typedef union  TCpuSS_ddrPhyLoopBackSrc
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_ddrPhyLoopBackSrc;
                   };
                 } TCpuSS_ddrPhyLoopBackSrc;
    typedef union  TCpuSS_ddrPhyLoopBackConfig1
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_ddrPhyLoopBackConfig1;
                   };
                 } TCpuSS_ddrPhyLoopBackConfig1;
    typedef union  TCpuSS_ddrPhyLoopBackConfig2
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_ddrPhyLoopBackConfig2;
                   };
                 } TCpuSS_ddrPhyLoopBackConfig2;
    typedef union  TCpuSS_ddrPhyLoopBackConfig3
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_ddrPhyLoopBackConfig3;
                   };
                 } TCpuSS_ddrPhyLoopBackConfig3;
    typedef union  TCpuSS_ddrPhyLoopBackStatus1
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_ddrPhyLoopBackStatus1;
                   };
                 } TCpuSS_ddrPhyLoopBackStatus1;
    typedef union  TCpuSS_ddrPhyLoopBackStatus2
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_ddrPhyLoopBackStatus2;
                   };
                 } TCpuSS_ddrPhyLoopBackStatus2;
    typedef union  TCpuSS_IXBAR_BYPASS
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_IXBAR_BYPASS;
                   };
                 } TCpuSS_IXBAR_BYPASS;
    typedef union  TCpuSS_CSn_AD15_SEL
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_CSn_AD15_SEL;
                   };
                 } TCpuSS_CSn_AD15_SEL;
    typedef union  TCpuSS_sysIntPol63_32
          { UNSG32 u32[1];
            struct {
            struct w32CpuSS_sysIntPol63_32;
                   };
                 } TCpuSS_sysIntPol63_32;

    ///////////////////////////////////////////////////////////
     SIGN32 CpuSS_drvrd(SIE_CpuSS *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CpuSS_drvwr(SIE_CpuSS *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CpuSS_reset(SIE_CpuSS *p);
     SIGN32 CpuSS_cmp  (SIE_CpuSS *p, SIE_CpuSS *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CpuSS_check(p,pie,pfx,hLOG) CpuSS_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CpuSS_print(p,    pfx,hLOG) CpuSS_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CpuSS
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SOC                     biu              (4,4)
///     ###
///     * Configuration registers for VPP MTR. MTR is moved to CPU_SS BIU for BG2-CT. However, the address map is kept same.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (W-)
///     #         # Stuffing bytes...
///               %% 832
///     @ 0x00068                      (P)
///     # 0x00068 SeCtrlCfg            
///               $seRegion            SeCtrlCfg         REG          
///                                    ###
///                                    * Security control for configuration register region
///                                    ###
///     @ 0x00088                      (P)
///     # 0x00088 SeCtrlFa             
///               $seRegion            SeCtrlFa          REG          
///                                    ###
///                                    * Security control for fast-access register region
///                                    ###
///     @ 0x000A8 SeHitRst             (RW-)
///               ###
///               * Reseting seHit registers
///               ###
///               %unsigned 1  seHitCountRstCfg          0x0
///                                    ###
///                                    * 1: reset seHitCountCfg to 0
///                                    * 0: no use
///                                    ###
///               %unsigned 1  seHitCountRstFa           0x0
///                                    ###
///                                    * 1: reset seHitCountFa 0 0
///                                    * 0: no use
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x000AC SeHitCountCfg        (R-)
///               ###
///               * seHit Counter for CFG bus
///               ###
///               %unsigned 32 seHitCountCfg             0x0
///                                    ###
///                                    * the number of secure access violations since reset
///                                    ###
///     @ 0x000B0 SeHitCountFa         (R-)
///               ###
///               * seHit Counter for Fast Access bus
///               ###
///               %unsigned 32 seHitCountFa              0x0
///                                    ###
///                                    * the number of secure access violations since reset
///                                    ###
///     @ 0x000B4 Configuration        (P)
///               ###
///               * SoC miscellaneous control register
///               ###
///               %unsigned 1  blockIFetch               0x0
///                                    ###
///                                    * 1: block instruction access except SDRAM, DRM TCM, ROM, SPI
///                                    * 0: allow instruction access to all region.
///                                    ###
///               %unsigned 1  vMetaIFetchEn             0x0
///                                    ###
///                                    * This bit is don't care when blockIFetch is 0, when blockIFtech is 1, it has the following meaning:
///                                    * 0: Don't allow instruction access to vMeta address region
///                                    * 1: allow instruction access to vMeta address region.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x000B8                      (W-)
///     #         # Stuffing bytes...
///               %% 576
///     @ 0x00100                      (P)
///     # 0x00100 protOR               
///               $protOR              protOR            REG          
///                                    ###
///                                    * AxPROT override controls
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     288B, bits:     434b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SOC
#define h_SOC (){}

    #define     RA_SOC_SeCtrlCfg                               0x0068
    ///////////////////////////////////////////////////////////
    #define     RA_SOC_SeCtrlFa                                0x0088
    ///////////////////////////////////////////////////////////
    #define     RA_SOC_SeHitRst                                0x00A8

    #define     BA_SOC_SeHitRst_seHitCountRstCfg               0x00A8
    #define     B16SOC_SeHitRst_seHitCountRstCfg               0x00A8
    #define   LSb32SOC_SeHitRst_seHitCountRstCfg                  0
    #define   LSb16SOC_SeHitRst_seHitCountRstCfg                  0
    #define       bSOC_SeHitRst_seHitCountRstCfg               1
    #define   MSK32SOC_SeHitRst_seHitCountRstCfg                  0x00000001

    #define     BA_SOC_SeHitRst_seHitCountRstFa                0x00A8
    #define     B16SOC_SeHitRst_seHitCountRstFa                0x00A8
    #define   LSb32SOC_SeHitRst_seHitCountRstFa                   1
    #define   LSb16SOC_SeHitRst_seHitCountRstFa                   1
    #define       bSOC_SeHitRst_seHitCountRstFa                1
    #define   MSK32SOC_SeHitRst_seHitCountRstFa                   0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_SOC_SeHitCountCfg                           0x00AC

    #define     BA_SOC_SeHitCountCfg_seHitCountCfg             0x00AC
    #define     B16SOC_SeHitCountCfg_seHitCountCfg             0x00AC
    #define   LSb32SOC_SeHitCountCfg_seHitCountCfg                0
    #define   LSb16SOC_SeHitCountCfg_seHitCountCfg                0
    #define       bSOC_SeHitCountCfg_seHitCountCfg             32
    #define   MSK32SOC_SeHitCountCfg_seHitCountCfg                0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SOC_SeHitCountFa                            0x00B0

    #define     BA_SOC_SeHitCountFa_seHitCountFa               0x00B0
    #define     B16SOC_SeHitCountFa_seHitCountFa               0x00B0
    #define   LSb32SOC_SeHitCountFa_seHitCountFa                  0
    #define   LSb16SOC_SeHitCountFa_seHitCountFa                  0
    #define       bSOC_SeHitCountFa_seHitCountFa               32
    #define   MSK32SOC_SeHitCountFa_seHitCountFa                  0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SOC_Configuration                           0x00B4

    #define     BA_SOC_Configuration_blockIFetch               0x00B4
    #define     B16SOC_Configuration_blockIFetch               0x00B4
    #define   LSb32SOC_Configuration_blockIFetch                  0
    #define   LSb16SOC_Configuration_blockIFetch                  0
    #define       bSOC_Configuration_blockIFetch               1
    #define   MSK32SOC_Configuration_blockIFetch                  0x00000001

    #define     BA_SOC_Configuration_vMetaIFetchEn             0x00B4
    #define     B16SOC_Configuration_vMetaIFetchEn             0x00B4
    #define   LSb32SOC_Configuration_vMetaIFetchEn                1
    #define   LSb16SOC_Configuration_vMetaIFetchEn                1
    #define       bSOC_Configuration_vMetaIFetchEn             1
    #define   MSK32SOC_Configuration_vMetaIFetchEn                0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_SOC_protOR                                  0x0100
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SOC {
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx0                                      [104];
    ///////////////////////////////////////////////////////////
              SIE_seRegion                                     ie_SeCtrlCfg;
    ///////////////////////////////////////////////////////////
              SIE_seRegion                                     ie_SeCtrlFa;
    ///////////////////////////////////////////////////////////
    #define   GET32SOC_SeHitRst_seHitCountRstCfg(r32)          _BFGET_(r32, 0, 0)
    #define   SET32SOC_SeHitRst_seHitCountRstCfg(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16SOC_SeHitRst_seHitCountRstCfg(r16)          _BFGET_(r16, 0, 0)
    #define   SET16SOC_SeHitRst_seHitCountRstCfg(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32SOC_SeHitRst_seHitCountRstFa(r32)           _BFGET_(r32, 1, 1)
    #define   SET32SOC_SeHitRst_seHitCountRstFa(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16SOC_SeHitRst_seHitCountRstFa(r16)           _BFGET_(r16, 1, 1)
    #define   SET16SOC_SeHitRst_seHitCountRstFa(r16,v)         _BFSET_(r16, 1, 1,v)

    #define     w32SOC_SeHitRst                                {\
            UNSG32 uSeHitRst_seHitCountRstCfg                  :  1;\
            UNSG32 uSeHitRst_seHitCountRstFa                   :  1;\
            UNSG32 RSVDxA8_b2                                  : 30;\
          }
    union { UNSG32 u32SOC_SeHitRst;
            struct w32SOC_SeHitRst;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SOC_SeHitCountCfg_seHitCountCfg(r32)        _BFGET_(r32,31, 0)
    #define   SET32SOC_SeHitCountCfg_seHitCountCfg(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32SOC_SeHitCountCfg                           {\
            UNSG32 uSeHitCountCfg_seHitCountCfg                : 32;\
          }
    union { UNSG32 u32SOC_SeHitCountCfg;
            struct w32SOC_SeHitCountCfg;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SOC_SeHitCountFa_seHitCountFa(r32)          _BFGET_(r32,31, 0)
    #define   SET32SOC_SeHitCountFa_seHitCountFa(r32,v)        _BFSET_(r32,31, 0,v)

    #define     w32SOC_SeHitCountFa                            {\
            UNSG32 uSeHitCountFa_seHitCountFa                  : 32;\
          }
    union { UNSG32 u32SOC_SeHitCountFa;
            struct w32SOC_SeHitCountFa;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SOC_Configuration_blockIFetch(r32)          _BFGET_(r32, 0, 0)
    #define   SET32SOC_Configuration_blockIFetch(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16SOC_Configuration_blockIFetch(r16)          _BFGET_(r16, 0, 0)
    #define   SET16SOC_Configuration_blockIFetch(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32SOC_Configuration_vMetaIFetchEn(r32)        _BFGET_(r32, 1, 1)
    #define   SET32SOC_Configuration_vMetaIFetchEn(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16SOC_Configuration_vMetaIFetchEn(r16)        _BFGET_(r16, 1, 1)
    #define   SET16SOC_Configuration_vMetaIFetchEn(r16,v)      _BFSET_(r16, 1, 1,v)

    #define     w32SOC_Configuration                           {\
            UNSG32 uConfiguration_blockIFetch                  :  1;\
            UNSG32 uConfiguration_vMetaIFetchEn                :  1;\
            UNSG32 RSVDxB4_b2                                  : 30;\
          }
    union { UNSG32 u32SOC_Configuration;
            struct w32SOC_Configuration;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxB8                                     [72];
    ///////////////////////////////////////////////////////////
              SIE_protOR                                       ie_protOR;
    ///////////////////////////////////////////////////////////
    } SIE_SOC;

    typedef union  T32SOC_SeHitRst
          { UNSG32 u32;
            struct w32SOC_SeHitRst;
                 } T32SOC_SeHitRst;
    typedef union  T32SOC_SeHitCountCfg
          { UNSG32 u32;
            struct w32SOC_SeHitCountCfg;
                 } T32SOC_SeHitCountCfg;
    typedef union  T32SOC_SeHitCountFa
          { UNSG32 u32;
            struct w32SOC_SeHitCountFa;
                 } T32SOC_SeHitCountFa;
    typedef union  T32SOC_Configuration
          { UNSG32 u32;
            struct w32SOC_Configuration;
                 } T32SOC_Configuration;
    ///////////////////////////////////////////////////////////

    typedef union  TSOC_SeHitRst
          { UNSG32 u32[1];
            struct {
            struct w32SOC_SeHitRst;
                   };
                 } TSOC_SeHitRst;
    typedef union  TSOC_SeHitCountCfg
          { UNSG32 u32[1];
            struct {
            struct w32SOC_SeHitCountCfg;
                   };
                 } TSOC_SeHitCountCfg;
    typedef union  TSOC_SeHitCountFa
          { UNSG32 u32[1];
            struct {
            struct w32SOC_SeHitCountFa;
                   };
                 } TSOC_SeHitCountFa;
    typedef union  TSOC_Configuration
          { UNSG32 u32[1];
            struct {
            struct w32SOC_Configuration;
                   };
                 } TSOC_Configuration;

    ///////////////////////////////////////////////////////////
     SIGN32 SOC_drvrd(SIE_SOC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SOC_drvwr(SIE_SOC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SOC_reset(SIE_SOC *p);
     SIGN32 SOC_cmp  (SIE_SOC *p, SIE_SOC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SOC_check(p,pie,pfx,hLOG) SOC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SOC_print(p,    pfx,hLOG) SOC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SOC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SocCSApbDec                              (4,4)
///     # # ----------------------------------------------------------
///               : SOCCS_ROM          0x0
///               : SOCCS_ETB          0x1000
///               : SOCCS_CTI          0x2000
///               : SOCCS_TPIU         0x3000
///               : CPU_FUN            0x4000
///               : CPUINT_ROM         0x20000
///               : CPU0_DBG           0x30000
///               : CPU0_PMU           0x31000
///               : CPU1_DBG           0x32000
///               : CPU1_PMU           0x33000
///               : CPU2_DBG           0x34000
///               : CPU2_PMU           0x35000
///               : CPU3_DBG           0x36000
///               : CPU3_PMU           0x37000
///               : CPU0_CTI           0x38000
///               : CPU1_CTI           0x39000
///               : CPU2_CTI           0x3A000
///               : CPU3_CTI           0x3B000
///               : CPU0_PTM           0x3C000
///               : CPU1_PTM           0x3D000
///               : CPU2_PTM           0x3E000
///               : CPU3_PTM           0x3F000
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       0B, bits:       0b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SocCSApbDec
#define h_SocCSApbDec (){}

    #define        SocCSApbDec_SOCCS_ROM                       0x0
    #define        SocCSApbDec_SOCCS_ETB                       0x1000
    #define        SocCSApbDec_SOCCS_CTI                       0x2000
    #define        SocCSApbDec_SOCCS_TPIU                      0x3000
    #define        SocCSApbDec_CPU_FUN                         0x4000
    #define        SocCSApbDec_CPUINT_ROM                      0x20000
    #define        SocCSApbDec_CPU0_DBG                        0x30000
    #define        SocCSApbDec_CPU0_PMU                        0x31000
    #define        SocCSApbDec_CPU1_DBG                        0x32000
    #define        SocCSApbDec_CPU1_PMU                        0x33000
    #define        SocCSApbDec_CPU2_DBG                        0x34000
    #define        SocCSApbDec_CPU2_PMU                        0x35000
    #define        SocCSApbDec_CPU3_DBG                        0x36000
    #define        SocCSApbDec_CPU3_PMU                        0x37000
    #define        SocCSApbDec_CPU0_CTI                        0x38000
    #define        SocCSApbDec_CPU1_CTI                        0x39000
    #define        SocCSApbDec_CPU2_CTI                        0x3A000
    #define        SocCSApbDec_CPU3_CTI                        0x3B000
    #define        SocCSApbDec_CPU0_PTM                        0x3C000
    #define        SocCSApbDec_CPU1_PTM                        0x3D000
    #define        SocCSApbDec_CPU2_PTM                        0x3E000
    #define        SocCSApbDec_CPU3_PTM                        0x3F000
    ///////////////////////////////////////////////////////////

#endif
//////
/// ENDOFINTERFACE: SocCSApbDec
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: soc.h
////////////////////////////////////////////////////////////

