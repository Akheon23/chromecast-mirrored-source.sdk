//////
/// don't edit! auto-generated by docc: cpu.h
////////////////////////////////////////////////////////////
#ifndef cpu_h
#define cpu_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE CpuReg                                   (4,4)
///     ###
///     * All the controls for CortexA9MPsub-system (cpu_wrapper).
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (RW-)
///               ###
///               * Clock and reset related controls
///               ###
///               %unsigned 1  cpu0SoftReset             0x0
///                                    ###
///                                    * 1: put CPU0 to reset state (self-cleared by hardware after 16 sysClk cycles)
///                                    * 0: normal operation
///                                    ###
///               %unsigned 1  cpu1SoftReset             0x0
///                                    ###
///                                    * 1: put CPU1 to reset state (self-cleared by hardware after 16 sysClk cycles)
///                                    * 0: normal operation
///                                    ###
///               %unsigned 1  cpu2SoftReset             0x0
///                                    ###
///                                    * 1: put CPU2 to reset state (self-cleared by hardware after 16 sysClk cycles)
///                                    * 0: normal operation
///                                    ###
///               %unsigned 1  cpu3SoftReset             0x0
///                                    ###
///                                    * 1: put CPU3 to reset state (self-cleared by hardware after 16 sysClk cycles)
///                                    * 0: normal operation
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 CTRL1                (RW-)
///               ###
///               * System controls of CPU. All the bits of this register are only sampled during reset of the CPU. They should only be changed while the CPU is in reset.
///               ###
///               %unsigned 1  vinithi                   0x1
///                                    ###
///                                    * Vector Init HIGH
///                                    * 1: Init vectors start at high address (0xFFFF_0000)
///                                    * 0: Init vectors start at low address (0x0000_0000)
///                                    ###
///               %unsigned 1  thumb_excpt_init          0x0
///                                    ###
///                                    * Thumb exception generation
///                                    * This static configuration signal is sampled during reset to set the value of the TE bit in the CP15 System Control Register.
///                                    * 0 = Enable ARM exception generation. On exception entry, CPSR T bit is 0 and J bit is 0
///                                    * 1 = Enable Thumb exception generation. On exception entry, CPSR T bit is 1 and J bit is 0
///                                    ###
///               %unsigned 1  nmfi_enable               0x0
///                                    ###
///                                    * Fast Interrupt Enable
///                                    * Configures fast interrupts to be non-maskable:
///                                    * 0 = clears the NMFI bit in the CP15 System Control Regster
///                                    * 1 = sets the NMFI bit in the CP15 System Control Register
///                                    ###
///               %unsigned 1  excpt_endian_init         0x0
///                                    ###
///                                    * EE state Control
///                                    * Controls the state of EE bit in the CP15 System Control Register at reset:
///                                    * 0 = EE bit is LOW
///                                    * 1 = EE bit is HIGH.
///                                    * NOTE: This signal is only used in v7 mode; in v6 mode this function is controlled by pin combination
///                                    * {ubitinit, bigendinit}
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00008 CTRL2                (RW-)
///               ###
///               * DFT/Scan related controls and SRAM power controls
///               ###
///               %unsigned 1  global_cg_bypass          0x0
///                                    ###
///                                    * Global Clock Gating Bypass
///                                    * This bit is intended for debug and analysis and should be set to zero. It is not synchronized to any clocks inside CPU.
///                                    * 0 = Functional mode
///                                    * 1 = Override clock gating for debug
///                                    * NOTE: Set to 0 during normal functional mode for power saving. When set to 0, certain units will shut off the clock when not in use. This bit should be register controlled for enhancing debug capability - reset state should be 1'b0.
///                                    ###
///               %unsigned 1  cg_bypass                 0x0
///                                    ###
///                                    * Clock Gating Bypass
///                                    * Scan test mode signal. This signal is used to override clock gating during scan shifting operations for ATPG.
///                                    * SOC logic should connect this to the same logic
///                                    * that drives the scan_en signal.
///                                    * NOTE: Set to 0 during normal functional mode. It can only be set to 1 during scan for additional coverage.
///                                    ###
///               %unsigned 1  sram_bypass               0x0
///                                    ###
///                                    * SRAM bypass
///                                    * Used to bypass SRAM arrays during scan, allowing observability of SRAM inputs, and controllability of SRAM outputs
///                                    * Combined Leakage Reduction Control for SRAMs in CPU.
///                                    ###
///               %unsigned 1  pdwn                      0x0
///                                    ###
///                                    * Assertion of this bit will put the SRAMs in a reduced leakage mode, and it allows VDD to be switched off for additional leakage reduction while memory data is retained. This signal must be driven from VDDMC supply.
///                                    * (BG3 Implementation does have leakage reduction of SRAMs implemented)
///                                    ###
///               %unsigned 1  pdlvmc                    0x0
///                                    ###
///                                    * One of two signals used to select leakage reduction down mode options when PDWN is asserted. This signal must be driven from VDDMC supply.
///                                    * (BG3 Implementation does have leakage reduction of SRAMs implemented)
///                                    ###
///               %unsigned 1  pdfvssm                   0x0
///                                    ###
///                                    * One of two signals to select leakage reduction mode options when PDWN is asserted. This signal must be driven from VDDMC supply.
///                                    * (BG3 Implementation does have leakage reduction of SRAMs implemented)
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x0000C CTRL3                (RW-)
///               ###
///               * CoreSight related controls
///               ###
///               %unsigned 1  dbgen0                    0x1
///                                    ###
///                                    * Invasive Debug Enable for CPU0
///                                    ###
///               %unsigned 1  spiden0                   0x1
///                                    ###
///                                    * Secure Invasive Debug Enable for CPU0
///                                    ###
///               %unsigned 1  niden0                    0x1
///                                    ###
///                                    * Non Invasive Debug Enable for CPU0
///                                    ###
///               %unsigned 1  spniden0                  0x1
///                                    ###
///                                    * Secure Non Invasive Debug Enable for CPU0
///                                    ###
///               %unsigned 1  dbgen1                    0x1
///                                    ###
///                                    * Invasive Debug Enable for CPU1
///                                    ###
///               %unsigned 1  spiden1                   0x1
///                                    ###
///                                    * Secure Invasive Debug Enable for CPU1
///                                    ###
///               %unsigned 1  niden1                    0x1
///                                    ###
///                                    * Non Invasive Debug Enable for CPU1
///                                    ###
///               %unsigned 1  spniden1                  0x1
///                                    ###
///                                    * Secure Non Invasive Debug Enable for CPU1
///                                    ###
///               %unsigned 1  dbgen2                    0x1
///                                    ###
///                                    * Invasive Debug Enable for CPU2
///                                    ###
///               %unsigned 1  spiden2                   0x1
///                                    ###
///                                    * Secure Invasive Debug Enable for CPU2
///                                    ###
///               %unsigned 1  niden2                    0x1
///                                    ###
///                                    * Non Invasive Debug Enable for CPU2
///                                    ###
///               %unsigned 1  spniden2                  0x1
///                                    ###
///                                    * Secure Non Invasive Debug Enable for CPU2
///                                    ###
///               %unsigned 1  dbgen3                    0x1
///                                    ###
///                                    * Invasive Debug Enable for CPU3
///                                    ###
///               %unsigned 1  spiden3                   0x1
///                                    ###
///                                    * Secure Invasive Debug Enable for CPU3
///                                    ###
///               %unsigned 1  niden3                    0x1
///                                    ###
///                                    * Non Invasive Debug Enable for CPU3
///                                    ###
///               %unsigned 1  spniden3                  0x1
///                                    ###
///                                    * Secure Non Invasive Debug Enable for CPU3
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00010 CTRL4                (RW-)
///               ###
///               * Additional CortexA9MP Controls
///               ###
///               %unsigned 3  maxclklatency             0x2
///                                    ###
///                                    * Implementation specific value indicating the number of clock cycles between the enable of a dynamic clock gate to the arrival of the clock at the DFFs of the design.
///                                    * In CortexA9, there is one DFF on the enable and targetted to have < 1 clock cycle of clock insertion delay. Hence the default value of 2.
///                                    * Software should never need to change this value.
///                                    ###
///               %unsigned 1  cfgsdisable               0x0
///                                    ###
///                                    * Disables write access to some system control processor registers:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 4  clusterid                 0x0
///                                    ###
///                                    * Value read in Cluster ID register field, bits [11:8] of the MPIDR
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00014 CTRL5                (RW-)
///               ###
///               * SCU Master Ports Address Filtering
///               ###
///               %unsigned 1  filter_en                 0x0
///                                    ###
///                                    * Enables filtering of address ranges at reset, when nSCURESET deasserts.
///                                    ###
///               %unsigned 12 filter_start              0x800
///                                    ###
///                                    * Specifies the start address of address filtering at reset, when nSCURESET deasserts.
///                                    ###
///               %unsigned 12 filter_end                0xFFF
///                                    ###
///                                    * Specifies the end address of address filtering at reset, when nSCURESET deasserts.
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00018 ClockEnable          (P)
///               ###
///               * Clock Enable control
///               * Gates the corresponding clock for each functional unit
///               ###
///               %unsigned 1  CPUAxi                    0x1
///                                    ###
///                                    * Gate the clock to CPUAxi bus. aClk turns off.
///                                    ###
///               %unsigned 1  Perif                     0x1
///                                    ###
///                                    * Controls the clock to peripherals and SCU in MP sub-system.
///                                    ###
///               %unsigned 1  Timer                     0x1
///                                    ###
///                                    * Controls the clock enable to Timer in MP sub-system.
///                                    ###
///               %unsigned 1  atclk                     0x1
///                                    ###
///                                    * Controls the atclk to CortexA9MP and CoreSight.
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x0001C SoftResetn           (P)
///               ###
///               * Controls various reset inputs of moltres_mp_ip
///               ###
///               %unsigned 1  CPU0                      0x1
///                                    ###
///                                    * Active low reset for CPU0. connected to nCPURESET[0] and nNEONRESET[0] of CortexA9MP
///                                    ###
///               %unsigned 1  CPU1                      0x1
///                                    ###
///                                    * Active low reset for CPU1. connected to nCPURESET[1] and nNEONERESET[1] of CortexA9MP
///                                    ###
///               %unsigned 1  CPU2                      0x1
///                                    ###
///                                    * Active low reset for CPU2. connected to nCPURESET[2] and nNEONRESET[2] of CortexA9MP
///                                    ###
///               %unsigned 1  CPU3                      0x1
///                                    ###
///                                    * Active low reset for CPU3. connected to nCPURESET[3] and nNEONRESET[3] of CortexA9MP
///                                    ###
///               %unsigned 1  NEON0                     0x1
///                                    ###
///                                    * Active low reset connected to nNEONRESET[0] of CortexA9MP
///                                    ###
///               %unsigned 1  NEON1                     0x1
///                                    ###
///                                    * Active low reset connected to nNEONERESET[1] of CortexA9MP
///                                    ###
///               %unsigned 1  NEON2                     0x1
///                                    ###
///                                    * Active low reset connected to nNEONRESET[2] of CortexA9MP
///                                    ###
///               %unsigned 1  NEON3                     0x1
///                                    ###
///                                    * Active low reset connected to nNEONRESET[3] of CortexA9MP
///                                    ###
///               %unsigned 1  CPUAxi                    0x1
///                                    ###
///                                    * Active low reset for CPU's AXI bus. Connected to aRstn, ACP and CPU_AXI0 asynchronous bridges
///                                    ###
///               %unsigned 1  Perif                     0x1
///                                    ###
///                                    * Active low reset shared by peripherals and the SCU
///                                    * Controls nPERIPHRESET and nSCURESET of CortexA9MP.
///                                    * Note: When this reset is active, both CPU0 and CPU1 are forced to reset as well.
///                                    ###
///               %unsigned 1  Timer                     0x1
///                                    ###
///                                    * Active low reset for timestamp generator
///                                    ###
///               %unsigned 1  WatchDog0                 0x1
///                                    ###
///                                    * Active low reset for WatchDog0 Timer in CortexA9MP
///                                    * Controls nWDRESET[0]
///                                    ###
///               %unsigned 1  WatchDog1                 0x1
///                                    ###
///                                    * Active low reset for WatchDog1 Timer in CortexA9MP
///                                    * Controls nWDRESET[1]
///                                    ###
///               %unsigned 1  WatchDog2                 0x1
///                                    ###
///                                    * Active low reset for WatchDog2 Timer in CortexA9MP
///                                    * Controls nWDRESET[2]
///                                    ###
///               %unsigned 1  WatchDog3                 0x1
///                                    ###
///                                    * Active low reset for WatchDog3 Timer in CortexA9MP
///                                    * Controls nWDRESET[3]
///                                    ###
///               %unsigned 1  MpSubSys                  0x1
///                                    ###
///                                    * Active low reset for MP sub-system (peripherals, timers, watchdogs, AXI, ATB).
///                                    ###
///               %unsigned 1  CoreSight                 0x1
///                                    ###
///                                    * Active low reset for CoreSight module. Resets APB , ATB & CTM interfaces.
///                                    ###
///               %unsigned 1  DBG0                      0x1
///                                    ###
///                                    * Active low reset for CPU0's debug logic. Connected to nDBGRESET[0]
///                                    ###
///               %unsigned 1  DBG1                      0x1
///                                    ###
///                                    * Active low reset for CPU1's debug logic. Connected to nDBGRESET[1]
///                                    ###
///               %unsigned 1  DBG2                      0x1
///                                    ###
///                                    * Active low reset for CPU2's debug logic. Connected to nDBGRESET[2]
///                                    ###
///               %unsigned 1  DBG3                      0x1
///                                    ###
///                                    * Active low reset for CPU3's debug logic. Connected to nDBGRESET[3]
///                                    ###
///               %unsigned 1  L2C                       0x1
///                                    ###
///                                    * Active low reset for L2Cache Controller
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x00020 wdResetCtrl          (P)
///               %unsigned 1  cpu0                      0x0
///                                    ###
///                                    * Controls whether WathDog0 (of CortexA9MP) Reset request asserts reset to CPU0.
///                                    * 1 : wdresetreq[0] asserts nreset[0]
///                                    * 0 : wdresetreq[0] doesn't control nreset[0]
///                                    * Note: nreset[0] is asserted as long as wdresetreq[0] is asserted.
///                                    ###
///               %unsigned 1  cpu1                      0x0
///                                    ###
///                                    * Controls whether WathDog1 (of CortexA9MP) Reset request asserts reset to CPU1.
///                                    * 1 : wdresetreq[1] asserts nreset[1]
///                                    * 0 : wdresetreq[1] doesn't control nreset[1]
///                                    * Note: nreset[1] is asserted as long as wdresetreq[1] is asserted.
///                                    ###
///               %unsigned 1  cpu2                      0x0
///                                    ###
///                                    * Controls whether WathDog2 (of CortexA9MP) Reset request asserts reset to CPU2.
///                                    * 1 : wdresetreq[2] asserts nreset[2]
///                                    * 0 : wdresetreq[2] doesn't control nreset[2]
///                                    * Note: nreset[2] is asserted as long as wdresetreq[2] is asserted.
///                                    ###
///               %unsigned 1  cpu3                      0x0
///                                    ###
///                                    * Controls whether WathDog3 (of CortexA9MP) Reset request asserts reset to CPU3.
///                                    * 1 : wdresetreq[3] asserts nreset[3]
///                                    * 0 : wdresetreq[3] doesn't control nreset[3]
///                                    * Note: nreset[3] is asserted as long as wdresetreq[3] is asserted.
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00024 perifClkCtrl         (P)
///               ###
///               * Frequency of PERIPHCLK clock for PJ4B-MP. CPU clock is divided as per the following settings to generate PERIPHCLK. Default is set to 1/3rd of CPU clock.
///               ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 1 : d3
///                                    * 0 : decided by clkSel
///                                    ###
///               %unsigned 3  clkSel                    0x1
///                                    ###
///                                    * 001 : d2
///                                    * 010 : d4
///                                    * 011 : d6
///                                    * 100 : d8
///                                    * 101 : d12
///                                    * others: reserved
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00028 csClkCtrl            (P)
///               ###
///               * Frequency of CoreSight clock (PCLKDBG, ATCLK and CTMCLK). CPU clock is divided as per the following settings to generate CoreSight clock. Default is set to ¼ f CPU clock.
///               ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 1 : d3
///                                    * 0 : decided by clkSel
///                                    ###
///               %unsigned 3  clkSel                    0x2
///               %%        28         # Stuffing bits...
///     @ 0x0002C L2CTRL0              (RW-)
///               ###
///               * L2 Cache Controller Controls
///               * Values are latched on reset by controller
///               ###
///               %unsigned 6  cache_id                  0x0
///                                    ###
///                                    * Cache Controller Cache ID. Defines bits [15:10] of Cache ID Register
///                                    ###
///               %unsigned 1  associativity             0x1
///                                    ###
///                                    * L2 Cache Associativity. This value is implementation specific. Software should never need to change the default value.
///                                    * 0: 8-way
///                                    * 1: 16-way
///                                    ###
///               %unsigned 3  waysize                   0x4
///                                    ###
///                                    * L2 Cache Way Size. This value is implementation specific. Software should never need to change the default value.
///                                    * 0: Reserved
///                                    * 1: 16KB
///                                    * 2: 32KB
///                                    * 3: 64KB
///                                    * 4: 128KB
///                                    * 5: 256KB
///                                    * 6: 512KB
///                                    * 7: Reserved
///                                    ###
///               %unsigned 1  cfgbigend                 0x0
///                                    ###
///                                    * Sets endian mode for configuration register access at reset
///                                    * 0: Little-endian
///                                    * 1: Big-endian
///                                    ###
///               %unsigned 1  spniden                   0x0
///                                    ###
///                                    * Secure priviledged non invasive debug enable. Controls the event output and event counter behavior
///                                    * 0: Only non-secure events
///                                    * 1: Non-secure and secure events
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00030 L2CTRL1              (RW-)
///               ###
///               * L2 Cache AXI Master Ports Address Filtering
///               ###
///               %unsigned 1  filter_en                 0x1
///                                    ###
///                                    * Enables filtering of address ranges at reset
///                                    ###
///               %unsigned 12 filter_start              0x0
///                                    ###
///                                    * Specifies the start address of address filtering at reset
///                                    ###
///               %unsigned 12 filter_end                0xE00
///                                    ###
///                                    * Specifies the end address of address filtering at reset
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00034 dummy                (P)
///               %unsigned 32 dummy                     0x0
///                                    ###
///                                    * Not used. May be used for ECO
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      56B, bits:     170b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CpuReg
#define h_CpuReg (){}

    #define     RA_CpuReg_CTRL0                                0x0000

    #define     BA_CpuReg_CTRL0_cpu0SoftReset                  0x0000
    #define     B16CpuReg_CTRL0_cpu0SoftReset                  0x0000
    #define   LSb32CpuReg_CTRL0_cpu0SoftReset                     0
    #define   LSb16CpuReg_CTRL0_cpu0SoftReset                     0
    #define       bCpuReg_CTRL0_cpu0SoftReset                  1
    #define   MSK32CpuReg_CTRL0_cpu0SoftReset                     0x00000001

    #define     BA_CpuReg_CTRL0_cpu1SoftReset                  0x0000
    #define     B16CpuReg_CTRL0_cpu1SoftReset                  0x0000
    #define   LSb32CpuReg_CTRL0_cpu1SoftReset                     1
    #define   LSb16CpuReg_CTRL0_cpu1SoftReset                     1
    #define       bCpuReg_CTRL0_cpu1SoftReset                  1
    #define   MSK32CpuReg_CTRL0_cpu1SoftReset                     0x00000002

    #define     BA_CpuReg_CTRL0_cpu2SoftReset                  0x0000
    #define     B16CpuReg_CTRL0_cpu2SoftReset                  0x0000
    #define   LSb32CpuReg_CTRL0_cpu2SoftReset                     2
    #define   LSb16CpuReg_CTRL0_cpu2SoftReset                     2
    #define       bCpuReg_CTRL0_cpu2SoftReset                  1
    #define   MSK32CpuReg_CTRL0_cpu2SoftReset                     0x00000004

    #define     BA_CpuReg_CTRL0_cpu3SoftReset                  0x0000
    #define     B16CpuReg_CTRL0_cpu3SoftReset                  0x0000
    #define   LSb32CpuReg_CTRL0_cpu3SoftReset                     3
    #define   LSb16CpuReg_CTRL0_cpu3SoftReset                     3
    #define       bCpuReg_CTRL0_cpu3SoftReset                  1
    #define   MSK32CpuReg_CTRL0_cpu3SoftReset                     0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_CTRL1                                0x0004

    #define     BA_CpuReg_CTRL1_vinithi                        0x0004
    #define     B16CpuReg_CTRL1_vinithi                        0x0004
    #define   LSb32CpuReg_CTRL1_vinithi                           0
    #define   LSb16CpuReg_CTRL1_vinithi                           0
    #define       bCpuReg_CTRL1_vinithi                        1
    #define   MSK32CpuReg_CTRL1_vinithi                           0x00000001

    #define     BA_CpuReg_CTRL1_thumb_excpt_init               0x0004
    #define     B16CpuReg_CTRL1_thumb_excpt_init               0x0004
    #define   LSb32CpuReg_CTRL1_thumb_excpt_init                  1
    #define   LSb16CpuReg_CTRL1_thumb_excpt_init                  1
    #define       bCpuReg_CTRL1_thumb_excpt_init               1
    #define   MSK32CpuReg_CTRL1_thumb_excpt_init                  0x00000002

    #define     BA_CpuReg_CTRL1_nmfi_enable                    0x0004
    #define     B16CpuReg_CTRL1_nmfi_enable                    0x0004
    #define   LSb32CpuReg_CTRL1_nmfi_enable                       2
    #define   LSb16CpuReg_CTRL1_nmfi_enable                       2
    #define       bCpuReg_CTRL1_nmfi_enable                    1
    #define   MSK32CpuReg_CTRL1_nmfi_enable                       0x00000004

    #define     BA_CpuReg_CTRL1_excpt_endian_init              0x0004
    #define     B16CpuReg_CTRL1_excpt_endian_init              0x0004
    #define   LSb32CpuReg_CTRL1_excpt_endian_init                 3
    #define   LSb16CpuReg_CTRL1_excpt_endian_init                 3
    #define       bCpuReg_CTRL1_excpt_endian_init              1
    #define   MSK32CpuReg_CTRL1_excpt_endian_init                 0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_CTRL2                                0x0008

    #define     BA_CpuReg_CTRL2_global_cg_bypass               0x0008
    #define     B16CpuReg_CTRL2_global_cg_bypass               0x0008
    #define   LSb32CpuReg_CTRL2_global_cg_bypass                  0
    #define   LSb16CpuReg_CTRL2_global_cg_bypass                  0
    #define       bCpuReg_CTRL2_global_cg_bypass               1
    #define   MSK32CpuReg_CTRL2_global_cg_bypass                  0x00000001

    #define     BA_CpuReg_CTRL2_cg_bypass                      0x0008
    #define     B16CpuReg_CTRL2_cg_bypass                      0x0008
    #define   LSb32CpuReg_CTRL2_cg_bypass                         1
    #define   LSb16CpuReg_CTRL2_cg_bypass                         1
    #define       bCpuReg_CTRL2_cg_bypass                      1
    #define   MSK32CpuReg_CTRL2_cg_bypass                         0x00000002

    #define     BA_CpuReg_CTRL2_sram_bypass                    0x0008
    #define     B16CpuReg_CTRL2_sram_bypass                    0x0008
    #define   LSb32CpuReg_CTRL2_sram_bypass                       2
    #define   LSb16CpuReg_CTRL2_sram_bypass                       2
    #define       bCpuReg_CTRL2_sram_bypass                    1
    #define   MSK32CpuReg_CTRL2_sram_bypass                       0x00000004

    #define     BA_CpuReg_CTRL2_pdwn                           0x0008
    #define     B16CpuReg_CTRL2_pdwn                           0x0008
    #define   LSb32CpuReg_CTRL2_pdwn                              3
    #define   LSb16CpuReg_CTRL2_pdwn                              3
    #define       bCpuReg_CTRL2_pdwn                           1
    #define   MSK32CpuReg_CTRL2_pdwn                              0x00000008

    #define     BA_CpuReg_CTRL2_pdlvmc                         0x0008
    #define     B16CpuReg_CTRL2_pdlvmc                         0x0008
    #define   LSb32CpuReg_CTRL2_pdlvmc                            4
    #define   LSb16CpuReg_CTRL2_pdlvmc                            4
    #define       bCpuReg_CTRL2_pdlvmc                         1
    #define   MSK32CpuReg_CTRL2_pdlvmc                            0x00000010

    #define     BA_CpuReg_CTRL2_pdfvssm                        0x0008
    #define     B16CpuReg_CTRL2_pdfvssm                        0x0008
    #define   LSb32CpuReg_CTRL2_pdfvssm                           5
    #define   LSb16CpuReg_CTRL2_pdfvssm                           5
    #define       bCpuReg_CTRL2_pdfvssm                        1
    #define   MSK32CpuReg_CTRL2_pdfvssm                           0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_CTRL3                                0x000C

    #define     BA_CpuReg_CTRL3_dbgen0                         0x000C
    #define     B16CpuReg_CTRL3_dbgen0                         0x000C
    #define   LSb32CpuReg_CTRL3_dbgen0                            0
    #define   LSb16CpuReg_CTRL3_dbgen0                            0
    #define       bCpuReg_CTRL3_dbgen0                         1
    #define   MSK32CpuReg_CTRL3_dbgen0                            0x00000001

    #define     BA_CpuReg_CTRL3_spiden0                        0x000C
    #define     B16CpuReg_CTRL3_spiden0                        0x000C
    #define   LSb32CpuReg_CTRL3_spiden0                           1
    #define   LSb16CpuReg_CTRL3_spiden0                           1
    #define       bCpuReg_CTRL3_spiden0                        1
    #define   MSK32CpuReg_CTRL3_spiden0                           0x00000002

    #define     BA_CpuReg_CTRL3_niden0                         0x000C
    #define     B16CpuReg_CTRL3_niden0                         0x000C
    #define   LSb32CpuReg_CTRL3_niden0                            2
    #define   LSb16CpuReg_CTRL3_niden0                            2
    #define       bCpuReg_CTRL3_niden0                         1
    #define   MSK32CpuReg_CTRL3_niden0                            0x00000004

    #define     BA_CpuReg_CTRL3_spniden0                       0x000C
    #define     B16CpuReg_CTRL3_spniden0                       0x000C
    #define   LSb32CpuReg_CTRL3_spniden0                          3
    #define   LSb16CpuReg_CTRL3_spniden0                          3
    #define       bCpuReg_CTRL3_spniden0                       1
    #define   MSK32CpuReg_CTRL3_spniden0                          0x00000008

    #define     BA_CpuReg_CTRL3_dbgen1                         0x000C
    #define     B16CpuReg_CTRL3_dbgen1                         0x000C
    #define   LSb32CpuReg_CTRL3_dbgen1                            4
    #define   LSb16CpuReg_CTRL3_dbgen1                            4
    #define       bCpuReg_CTRL3_dbgen1                         1
    #define   MSK32CpuReg_CTRL3_dbgen1                            0x00000010

    #define     BA_CpuReg_CTRL3_spiden1                        0x000C
    #define     B16CpuReg_CTRL3_spiden1                        0x000C
    #define   LSb32CpuReg_CTRL3_spiden1                           5
    #define   LSb16CpuReg_CTRL3_spiden1                           5
    #define       bCpuReg_CTRL3_spiden1                        1
    #define   MSK32CpuReg_CTRL3_spiden1                           0x00000020

    #define     BA_CpuReg_CTRL3_niden1                         0x000C
    #define     B16CpuReg_CTRL3_niden1                         0x000C
    #define   LSb32CpuReg_CTRL3_niden1                            6
    #define   LSb16CpuReg_CTRL3_niden1                            6
    #define       bCpuReg_CTRL3_niden1                         1
    #define   MSK32CpuReg_CTRL3_niden1                            0x00000040

    #define     BA_CpuReg_CTRL3_spniden1                       0x000C
    #define     B16CpuReg_CTRL3_spniden1                       0x000C
    #define   LSb32CpuReg_CTRL3_spniden1                          7
    #define   LSb16CpuReg_CTRL3_spniden1                          7
    #define       bCpuReg_CTRL3_spniden1                       1
    #define   MSK32CpuReg_CTRL3_spniden1                          0x00000080

    #define     BA_CpuReg_CTRL3_dbgen2                         0x000D
    #define     B16CpuReg_CTRL3_dbgen2                         0x000C
    #define   LSb32CpuReg_CTRL3_dbgen2                            8
    #define   LSb16CpuReg_CTRL3_dbgen2                            8
    #define       bCpuReg_CTRL3_dbgen2                         1
    #define   MSK32CpuReg_CTRL3_dbgen2                            0x00000100

    #define     BA_CpuReg_CTRL3_spiden2                        0x000D
    #define     B16CpuReg_CTRL3_spiden2                        0x000C
    #define   LSb32CpuReg_CTRL3_spiden2                           9
    #define   LSb16CpuReg_CTRL3_spiden2                           9
    #define       bCpuReg_CTRL3_spiden2                        1
    #define   MSK32CpuReg_CTRL3_spiden2                           0x00000200

    #define     BA_CpuReg_CTRL3_niden2                         0x000D
    #define     B16CpuReg_CTRL3_niden2                         0x000C
    #define   LSb32CpuReg_CTRL3_niden2                            10
    #define   LSb16CpuReg_CTRL3_niden2                            10
    #define       bCpuReg_CTRL3_niden2                         1
    #define   MSK32CpuReg_CTRL3_niden2                            0x00000400

    #define     BA_CpuReg_CTRL3_spniden2                       0x000D
    #define     B16CpuReg_CTRL3_spniden2                       0x000C
    #define   LSb32CpuReg_CTRL3_spniden2                          11
    #define   LSb16CpuReg_CTRL3_spniden2                          11
    #define       bCpuReg_CTRL3_spniden2                       1
    #define   MSK32CpuReg_CTRL3_spniden2                          0x00000800

    #define     BA_CpuReg_CTRL3_dbgen3                         0x000D
    #define     B16CpuReg_CTRL3_dbgen3                         0x000C
    #define   LSb32CpuReg_CTRL3_dbgen3                            12
    #define   LSb16CpuReg_CTRL3_dbgen3                            12
    #define       bCpuReg_CTRL3_dbgen3                         1
    #define   MSK32CpuReg_CTRL3_dbgen3                            0x00001000

    #define     BA_CpuReg_CTRL3_spiden3                        0x000D
    #define     B16CpuReg_CTRL3_spiden3                        0x000C
    #define   LSb32CpuReg_CTRL3_spiden3                           13
    #define   LSb16CpuReg_CTRL3_spiden3                           13
    #define       bCpuReg_CTRL3_spiden3                        1
    #define   MSK32CpuReg_CTRL3_spiden3                           0x00002000

    #define     BA_CpuReg_CTRL3_niden3                         0x000D
    #define     B16CpuReg_CTRL3_niden3                         0x000C
    #define   LSb32CpuReg_CTRL3_niden3                            14
    #define   LSb16CpuReg_CTRL3_niden3                            14
    #define       bCpuReg_CTRL3_niden3                         1
    #define   MSK32CpuReg_CTRL3_niden3                            0x00004000

    #define     BA_CpuReg_CTRL3_spniden3                       0x000D
    #define     B16CpuReg_CTRL3_spniden3                       0x000C
    #define   LSb32CpuReg_CTRL3_spniden3                          15
    #define   LSb16CpuReg_CTRL3_spniden3                          15
    #define       bCpuReg_CTRL3_spniden3                       1
    #define   MSK32CpuReg_CTRL3_spniden3                          0x00008000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_CTRL4                                0x0010

    #define     BA_CpuReg_CTRL4_maxclklatency                  0x0010
    #define     B16CpuReg_CTRL4_maxclklatency                  0x0010
    #define   LSb32CpuReg_CTRL4_maxclklatency                     0
    #define   LSb16CpuReg_CTRL4_maxclklatency                     0
    #define       bCpuReg_CTRL4_maxclklatency                  3
    #define   MSK32CpuReg_CTRL4_maxclklatency                     0x00000007

    #define     BA_CpuReg_CTRL4_cfgsdisable                    0x0010
    #define     B16CpuReg_CTRL4_cfgsdisable                    0x0010
    #define   LSb32CpuReg_CTRL4_cfgsdisable                       3
    #define   LSb16CpuReg_CTRL4_cfgsdisable                       3
    #define       bCpuReg_CTRL4_cfgsdisable                    1
    #define   MSK32CpuReg_CTRL4_cfgsdisable                       0x00000008

    #define     BA_CpuReg_CTRL4_clusterid                      0x0010
    #define     B16CpuReg_CTRL4_clusterid                      0x0010
    #define   LSb32CpuReg_CTRL4_clusterid                         4
    #define   LSb16CpuReg_CTRL4_clusterid                         4
    #define       bCpuReg_CTRL4_clusterid                      4
    #define   MSK32CpuReg_CTRL4_clusterid                         0x000000F0
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_CTRL5                                0x0014

    #define     BA_CpuReg_CTRL5_filter_en                      0x0014
    #define     B16CpuReg_CTRL5_filter_en                      0x0014
    #define   LSb32CpuReg_CTRL5_filter_en                         0
    #define   LSb16CpuReg_CTRL5_filter_en                         0
    #define       bCpuReg_CTRL5_filter_en                      1
    #define   MSK32CpuReg_CTRL5_filter_en                         0x00000001

    #define     BA_CpuReg_CTRL5_filter_start                   0x0014
    #define     B16CpuReg_CTRL5_filter_start                   0x0014
    #define   LSb32CpuReg_CTRL5_filter_start                      1
    #define   LSb16CpuReg_CTRL5_filter_start                      1
    #define       bCpuReg_CTRL5_filter_start                   12
    #define   MSK32CpuReg_CTRL5_filter_start                      0x00001FFE

    #define     BA_CpuReg_CTRL5_filter_end                     0x0015
    #define     B16CpuReg_CTRL5_filter_end                     0x0014
    #define   LSb32CpuReg_CTRL5_filter_end                        13
    #define   LSb16CpuReg_CTRL5_filter_end                        13
    #define       bCpuReg_CTRL5_filter_end                     12
    #define   MSK32CpuReg_CTRL5_filter_end                        0x01FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_ClockEnable                          0x0018

    #define     BA_CpuReg_ClockEnable_CPUAxi                   0x0018
    #define     B16CpuReg_ClockEnable_CPUAxi                   0x0018
    #define   LSb32CpuReg_ClockEnable_CPUAxi                      0
    #define   LSb16CpuReg_ClockEnable_CPUAxi                      0
    #define       bCpuReg_ClockEnable_CPUAxi                   1
    #define   MSK32CpuReg_ClockEnable_CPUAxi                      0x00000001

    #define     BA_CpuReg_ClockEnable_Perif                    0x0018
    #define     B16CpuReg_ClockEnable_Perif                    0x0018
    #define   LSb32CpuReg_ClockEnable_Perif                       1
    #define   LSb16CpuReg_ClockEnable_Perif                       1
    #define       bCpuReg_ClockEnable_Perif                    1
    #define   MSK32CpuReg_ClockEnable_Perif                       0x00000002

    #define     BA_CpuReg_ClockEnable_Timer                    0x0018
    #define     B16CpuReg_ClockEnable_Timer                    0x0018
    #define   LSb32CpuReg_ClockEnable_Timer                       2
    #define   LSb16CpuReg_ClockEnable_Timer                       2
    #define       bCpuReg_ClockEnable_Timer                    1
    #define   MSK32CpuReg_ClockEnable_Timer                       0x00000004

    #define     BA_CpuReg_ClockEnable_atclk                    0x0018
    #define     B16CpuReg_ClockEnable_atclk                    0x0018
    #define   LSb32CpuReg_ClockEnable_atclk                       3
    #define   LSb16CpuReg_ClockEnable_atclk                       3
    #define       bCpuReg_ClockEnable_atclk                    1
    #define   MSK32CpuReg_ClockEnable_atclk                       0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_SoftResetn                           0x001C

    #define     BA_CpuReg_SoftResetn_CPU0                      0x001C
    #define     B16CpuReg_SoftResetn_CPU0                      0x001C
    #define   LSb32CpuReg_SoftResetn_CPU0                         0
    #define   LSb16CpuReg_SoftResetn_CPU0                         0
    #define       bCpuReg_SoftResetn_CPU0                      1
    #define   MSK32CpuReg_SoftResetn_CPU0                         0x00000001

    #define     BA_CpuReg_SoftResetn_CPU1                      0x001C
    #define     B16CpuReg_SoftResetn_CPU1                      0x001C
    #define   LSb32CpuReg_SoftResetn_CPU1                         1
    #define   LSb16CpuReg_SoftResetn_CPU1                         1
    #define       bCpuReg_SoftResetn_CPU1                      1
    #define   MSK32CpuReg_SoftResetn_CPU1                         0x00000002

    #define     BA_CpuReg_SoftResetn_CPU2                      0x001C
    #define     B16CpuReg_SoftResetn_CPU2                      0x001C
    #define   LSb32CpuReg_SoftResetn_CPU2                         2
    #define   LSb16CpuReg_SoftResetn_CPU2                         2
    #define       bCpuReg_SoftResetn_CPU2                      1
    #define   MSK32CpuReg_SoftResetn_CPU2                         0x00000004

    #define     BA_CpuReg_SoftResetn_CPU3                      0x001C
    #define     B16CpuReg_SoftResetn_CPU3                      0x001C
    #define   LSb32CpuReg_SoftResetn_CPU3                         3
    #define   LSb16CpuReg_SoftResetn_CPU3                         3
    #define       bCpuReg_SoftResetn_CPU3                      1
    #define   MSK32CpuReg_SoftResetn_CPU3                         0x00000008

    #define     BA_CpuReg_SoftResetn_NEON0                     0x001C
    #define     B16CpuReg_SoftResetn_NEON0                     0x001C
    #define   LSb32CpuReg_SoftResetn_NEON0                        4
    #define   LSb16CpuReg_SoftResetn_NEON0                        4
    #define       bCpuReg_SoftResetn_NEON0                     1
    #define   MSK32CpuReg_SoftResetn_NEON0                        0x00000010

    #define     BA_CpuReg_SoftResetn_NEON1                     0x001C
    #define     B16CpuReg_SoftResetn_NEON1                     0x001C
    #define   LSb32CpuReg_SoftResetn_NEON1                        5
    #define   LSb16CpuReg_SoftResetn_NEON1                        5
    #define       bCpuReg_SoftResetn_NEON1                     1
    #define   MSK32CpuReg_SoftResetn_NEON1                        0x00000020

    #define     BA_CpuReg_SoftResetn_NEON2                     0x001C
    #define     B16CpuReg_SoftResetn_NEON2                     0x001C
    #define   LSb32CpuReg_SoftResetn_NEON2                        6
    #define   LSb16CpuReg_SoftResetn_NEON2                        6
    #define       bCpuReg_SoftResetn_NEON2                     1
    #define   MSK32CpuReg_SoftResetn_NEON2                        0x00000040

    #define     BA_CpuReg_SoftResetn_NEON3                     0x001C
    #define     B16CpuReg_SoftResetn_NEON3                     0x001C
    #define   LSb32CpuReg_SoftResetn_NEON3                        7
    #define   LSb16CpuReg_SoftResetn_NEON3                        7
    #define       bCpuReg_SoftResetn_NEON3                     1
    #define   MSK32CpuReg_SoftResetn_NEON3                        0x00000080

    #define     BA_CpuReg_SoftResetn_CPUAxi                    0x001D
    #define     B16CpuReg_SoftResetn_CPUAxi                    0x001C
    #define   LSb32CpuReg_SoftResetn_CPUAxi                       8
    #define   LSb16CpuReg_SoftResetn_CPUAxi                       8
    #define       bCpuReg_SoftResetn_CPUAxi                    1
    #define   MSK32CpuReg_SoftResetn_CPUAxi                       0x00000100

    #define     BA_CpuReg_SoftResetn_Perif                     0x001D
    #define     B16CpuReg_SoftResetn_Perif                     0x001C
    #define   LSb32CpuReg_SoftResetn_Perif                        9
    #define   LSb16CpuReg_SoftResetn_Perif                        9
    #define       bCpuReg_SoftResetn_Perif                     1
    #define   MSK32CpuReg_SoftResetn_Perif                        0x00000200

    #define     BA_CpuReg_SoftResetn_Timer                     0x001D
    #define     B16CpuReg_SoftResetn_Timer                     0x001C
    #define   LSb32CpuReg_SoftResetn_Timer                        10
    #define   LSb16CpuReg_SoftResetn_Timer                        10
    #define       bCpuReg_SoftResetn_Timer                     1
    #define   MSK32CpuReg_SoftResetn_Timer                        0x00000400

    #define     BA_CpuReg_SoftResetn_WatchDog0                 0x001D
    #define     B16CpuReg_SoftResetn_WatchDog0                 0x001C
    #define   LSb32CpuReg_SoftResetn_WatchDog0                    11
    #define   LSb16CpuReg_SoftResetn_WatchDog0                    11
    #define       bCpuReg_SoftResetn_WatchDog0                 1
    #define   MSK32CpuReg_SoftResetn_WatchDog0                    0x00000800

    #define     BA_CpuReg_SoftResetn_WatchDog1                 0x001D
    #define     B16CpuReg_SoftResetn_WatchDog1                 0x001C
    #define   LSb32CpuReg_SoftResetn_WatchDog1                    12
    #define   LSb16CpuReg_SoftResetn_WatchDog1                    12
    #define       bCpuReg_SoftResetn_WatchDog1                 1
    #define   MSK32CpuReg_SoftResetn_WatchDog1                    0x00001000

    #define     BA_CpuReg_SoftResetn_WatchDog2                 0x001D
    #define     B16CpuReg_SoftResetn_WatchDog2                 0x001C
    #define   LSb32CpuReg_SoftResetn_WatchDog2                    13
    #define   LSb16CpuReg_SoftResetn_WatchDog2                    13
    #define       bCpuReg_SoftResetn_WatchDog2                 1
    #define   MSK32CpuReg_SoftResetn_WatchDog2                    0x00002000

    #define     BA_CpuReg_SoftResetn_WatchDog3                 0x001D
    #define     B16CpuReg_SoftResetn_WatchDog3                 0x001C
    #define   LSb32CpuReg_SoftResetn_WatchDog3                    14
    #define   LSb16CpuReg_SoftResetn_WatchDog3                    14
    #define       bCpuReg_SoftResetn_WatchDog3                 1
    #define   MSK32CpuReg_SoftResetn_WatchDog3                    0x00004000

    #define     BA_CpuReg_SoftResetn_MpSubSys                  0x001D
    #define     B16CpuReg_SoftResetn_MpSubSys                  0x001C
    #define   LSb32CpuReg_SoftResetn_MpSubSys                     15
    #define   LSb16CpuReg_SoftResetn_MpSubSys                     15
    #define       bCpuReg_SoftResetn_MpSubSys                  1
    #define   MSK32CpuReg_SoftResetn_MpSubSys                     0x00008000

    #define     BA_CpuReg_SoftResetn_CoreSight                 0x001E
    #define     B16CpuReg_SoftResetn_CoreSight                 0x001E
    #define   LSb32CpuReg_SoftResetn_CoreSight                    16
    #define   LSb16CpuReg_SoftResetn_CoreSight                    0
    #define       bCpuReg_SoftResetn_CoreSight                 1
    #define   MSK32CpuReg_SoftResetn_CoreSight                    0x00010000

    #define     BA_CpuReg_SoftResetn_DBG0                      0x001E
    #define     B16CpuReg_SoftResetn_DBG0                      0x001E
    #define   LSb32CpuReg_SoftResetn_DBG0                         17
    #define   LSb16CpuReg_SoftResetn_DBG0                         1
    #define       bCpuReg_SoftResetn_DBG0                      1
    #define   MSK32CpuReg_SoftResetn_DBG0                         0x00020000

    #define     BA_CpuReg_SoftResetn_DBG1                      0x001E
    #define     B16CpuReg_SoftResetn_DBG1                      0x001E
    #define   LSb32CpuReg_SoftResetn_DBG1                         18
    #define   LSb16CpuReg_SoftResetn_DBG1                         2
    #define       bCpuReg_SoftResetn_DBG1                      1
    #define   MSK32CpuReg_SoftResetn_DBG1                         0x00040000

    #define     BA_CpuReg_SoftResetn_DBG2                      0x001E
    #define     B16CpuReg_SoftResetn_DBG2                      0x001E
    #define   LSb32CpuReg_SoftResetn_DBG2                         19
    #define   LSb16CpuReg_SoftResetn_DBG2                         3
    #define       bCpuReg_SoftResetn_DBG2                      1
    #define   MSK32CpuReg_SoftResetn_DBG2                         0x00080000

    #define     BA_CpuReg_SoftResetn_DBG3                      0x001E
    #define     B16CpuReg_SoftResetn_DBG3                      0x001E
    #define   LSb32CpuReg_SoftResetn_DBG3                         20
    #define   LSb16CpuReg_SoftResetn_DBG3                         4
    #define       bCpuReg_SoftResetn_DBG3                      1
    #define   MSK32CpuReg_SoftResetn_DBG3                         0x00100000

    #define     BA_CpuReg_SoftResetn_L2C                       0x001E
    #define     B16CpuReg_SoftResetn_L2C                       0x001E
    #define   LSb32CpuReg_SoftResetn_L2C                          21
    #define   LSb16CpuReg_SoftResetn_L2C                          5
    #define       bCpuReg_SoftResetn_L2C                       1
    #define   MSK32CpuReg_SoftResetn_L2C                          0x00200000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_wdResetCtrl                          0x0020

    #define     BA_CpuReg_wdResetCtrl_cpu0                     0x0020
    #define     B16CpuReg_wdResetCtrl_cpu0                     0x0020
    #define   LSb32CpuReg_wdResetCtrl_cpu0                        0
    #define   LSb16CpuReg_wdResetCtrl_cpu0                        0
    #define       bCpuReg_wdResetCtrl_cpu0                     1
    #define   MSK32CpuReg_wdResetCtrl_cpu0                        0x00000001

    #define     BA_CpuReg_wdResetCtrl_cpu1                     0x0020
    #define     B16CpuReg_wdResetCtrl_cpu1                     0x0020
    #define   LSb32CpuReg_wdResetCtrl_cpu1                        1
    #define   LSb16CpuReg_wdResetCtrl_cpu1                        1
    #define       bCpuReg_wdResetCtrl_cpu1                     1
    #define   MSK32CpuReg_wdResetCtrl_cpu1                        0x00000002

    #define     BA_CpuReg_wdResetCtrl_cpu2                     0x0020
    #define     B16CpuReg_wdResetCtrl_cpu2                     0x0020
    #define   LSb32CpuReg_wdResetCtrl_cpu2                        2
    #define   LSb16CpuReg_wdResetCtrl_cpu2                        2
    #define       bCpuReg_wdResetCtrl_cpu2                     1
    #define   MSK32CpuReg_wdResetCtrl_cpu2                        0x00000004

    #define     BA_CpuReg_wdResetCtrl_cpu3                     0x0020
    #define     B16CpuReg_wdResetCtrl_cpu3                     0x0020
    #define   LSb32CpuReg_wdResetCtrl_cpu3                        3
    #define   LSb16CpuReg_wdResetCtrl_cpu3                        3
    #define       bCpuReg_wdResetCtrl_cpu3                     1
    #define   MSK32CpuReg_wdResetCtrl_cpu3                        0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_perifClkCtrl                         0x0024

    #define     BA_CpuReg_perifClkCtrl_clkD3Switch             0x0024
    #define     B16CpuReg_perifClkCtrl_clkD3Switch             0x0024
    #define   LSb32CpuReg_perifClkCtrl_clkD3Switch                0
    #define   LSb16CpuReg_perifClkCtrl_clkD3Switch                0
    #define       bCpuReg_perifClkCtrl_clkD3Switch             1
    #define   MSK32CpuReg_perifClkCtrl_clkD3Switch                0x00000001

    #define     BA_CpuReg_perifClkCtrl_clkSel                  0x0024
    #define     B16CpuReg_perifClkCtrl_clkSel                  0x0024
    #define   LSb32CpuReg_perifClkCtrl_clkSel                     1
    #define   LSb16CpuReg_perifClkCtrl_clkSel                     1
    #define       bCpuReg_perifClkCtrl_clkSel                  3
    #define   MSK32CpuReg_perifClkCtrl_clkSel                     0x0000000E
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_csClkCtrl                            0x0028

    #define     BA_CpuReg_csClkCtrl_clkD3Switch                0x0028
    #define     B16CpuReg_csClkCtrl_clkD3Switch                0x0028
    #define   LSb32CpuReg_csClkCtrl_clkD3Switch                   0
    #define   LSb16CpuReg_csClkCtrl_clkD3Switch                   0
    #define       bCpuReg_csClkCtrl_clkD3Switch                1
    #define   MSK32CpuReg_csClkCtrl_clkD3Switch                   0x00000001

    #define     BA_CpuReg_csClkCtrl_clkSel                     0x0028
    #define     B16CpuReg_csClkCtrl_clkSel                     0x0028
    #define   LSb32CpuReg_csClkCtrl_clkSel                        1
    #define   LSb16CpuReg_csClkCtrl_clkSel                        1
    #define       bCpuReg_csClkCtrl_clkSel                     3
    #define   MSK32CpuReg_csClkCtrl_clkSel                        0x0000000E
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_L2CTRL0                              0x002C

    #define     BA_CpuReg_L2CTRL0_cache_id                     0x002C
    #define     B16CpuReg_L2CTRL0_cache_id                     0x002C
    #define   LSb32CpuReg_L2CTRL0_cache_id                        0
    #define   LSb16CpuReg_L2CTRL0_cache_id                        0
    #define       bCpuReg_L2CTRL0_cache_id                     6
    #define   MSK32CpuReg_L2CTRL0_cache_id                        0x0000003F

    #define     BA_CpuReg_L2CTRL0_associativity                0x002C
    #define     B16CpuReg_L2CTRL0_associativity                0x002C
    #define   LSb32CpuReg_L2CTRL0_associativity                   6
    #define   LSb16CpuReg_L2CTRL0_associativity                   6
    #define       bCpuReg_L2CTRL0_associativity                1
    #define   MSK32CpuReg_L2CTRL0_associativity                   0x00000040

    #define     BA_CpuReg_L2CTRL0_waysize                      0x002C
    #define     B16CpuReg_L2CTRL0_waysize                      0x002C
    #define   LSb32CpuReg_L2CTRL0_waysize                         7
    #define   LSb16CpuReg_L2CTRL0_waysize                         7
    #define       bCpuReg_L2CTRL0_waysize                      3
    #define   MSK32CpuReg_L2CTRL0_waysize                         0x00000380

    #define     BA_CpuReg_L2CTRL0_cfgbigend                    0x002D
    #define     B16CpuReg_L2CTRL0_cfgbigend                    0x002C
    #define   LSb32CpuReg_L2CTRL0_cfgbigend                       10
    #define   LSb16CpuReg_L2CTRL0_cfgbigend                       10
    #define       bCpuReg_L2CTRL0_cfgbigend                    1
    #define   MSK32CpuReg_L2CTRL0_cfgbigend                       0x00000400

    #define     BA_CpuReg_L2CTRL0_spniden                      0x002D
    #define     B16CpuReg_L2CTRL0_spniden                      0x002C
    #define   LSb32CpuReg_L2CTRL0_spniden                         11
    #define   LSb16CpuReg_L2CTRL0_spniden                         11
    #define       bCpuReg_L2CTRL0_spniden                      1
    #define   MSK32CpuReg_L2CTRL0_spniden                         0x00000800
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_L2CTRL1                              0x0030

    #define     BA_CpuReg_L2CTRL1_filter_en                    0x0030
    #define     B16CpuReg_L2CTRL1_filter_en                    0x0030
    #define   LSb32CpuReg_L2CTRL1_filter_en                       0
    #define   LSb16CpuReg_L2CTRL1_filter_en                       0
    #define       bCpuReg_L2CTRL1_filter_en                    1
    #define   MSK32CpuReg_L2CTRL1_filter_en                       0x00000001

    #define     BA_CpuReg_L2CTRL1_filter_start                 0x0030
    #define     B16CpuReg_L2CTRL1_filter_start                 0x0030
    #define   LSb32CpuReg_L2CTRL1_filter_start                    1
    #define   LSb16CpuReg_L2CTRL1_filter_start                    1
    #define       bCpuReg_L2CTRL1_filter_start                 12
    #define   MSK32CpuReg_L2CTRL1_filter_start                    0x00001FFE

    #define     BA_CpuReg_L2CTRL1_filter_end                   0x0031
    #define     B16CpuReg_L2CTRL1_filter_end                   0x0030
    #define   LSb32CpuReg_L2CTRL1_filter_end                      13
    #define   LSb16CpuReg_L2CTRL1_filter_end                      13
    #define       bCpuReg_L2CTRL1_filter_end                   12
    #define   MSK32CpuReg_L2CTRL1_filter_end                      0x01FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuReg_dummy                                0x0034

    #define     BA_CpuReg_dummy_dummy                          0x0034
    #define     B16CpuReg_dummy_dummy                          0x0034
    #define   LSb32CpuReg_dummy_dummy                             0
    #define   LSb16CpuReg_dummy_dummy                             0
    #define       bCpuReg_dummy_dummy                          32
    #define   MSK32CpuReg_dummy_dummy                             0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CpuReg {
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_CTRL0_cpu0SoftReset(r32)             _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_CTRL0_cpu0SoftReset(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_CTRL0_cpu0SoftReset(r16)             _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_CTRL0_cpu0SoftReset(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_CTRL0_cpu1SoftReset(r32)             _BFGET_(r32, 1, 1)
    #define   SET32CpuReg_CTRL0_cpu1SoftReset(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16CpuReg_CTRL0_cpu1SoftReset(r16)             _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_CTRL0_cpu1SoftReset(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_CTRL0_cpu2SoftReset(r32)             _BFGET_(r32, 2, 2)
    #define   SET32CpuReg_CTRL0_cpu2SoftReset(r32,v)           _BFSET_(r32, 2, 2,v)
    #define   GET16CpuReg_CTRL0_cpu2SoftReset(r16)             _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_CTRL0_cpu2SoftReset(r16,v)           _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_CTRL0_cpu3SoftReset(r32)             _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_CTRL0_cpu3SoftReset(r32,v)           _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_CTRL0_cpu3SoftReset(r16)             _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_CTRL0_cpu3SoftReset(r16,v)           _BFSET_(r16, 3, 3,v)

    #define     w32CpuReg_CTRL0                                {\
            UNSG32 uCTRL0_cpu0SoftReset                        :  1;\
            UNSG32 uCTRL0_cpu1SoftReset                        :  1;\
            UNSG32 uCTRL0_cpu2SoftReset                        :  1;\
            UNSG32 uCTRL0_cpu3SoftReset                        :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32CpuReg_CTRL0;
            struct w32CpuReg_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_CTRL1_vinithi(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_CTRL1_vinithi(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_CTRL1_vinithi(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_CTRL1_vinithi(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_CTRL1_thumb_excpt_init(r32)          _BFGET_(r32, 1, 1)
    #define   SET32CpuReg_CTRL1_thumb_excpt_init(r32,v)        _BFSET_(r32, 1, 1,v)
    #define   GET16CpuReg_CTRL1_thumb_excpt_init(r16)          _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_CTRL1_thumb_excpt_init(r16,v)        _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_CTRL1_nmfi_enable(r32)               _BFGET_(r32, 2, 2)
    #define   SET32CpuReg_CTRL1_nmfi_enable(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16CpuReg_CTRL1_nmfi_enable(r16)               _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_CTRL1_nmfi_enable(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_CTRL1_excpt_endian_init(r32)         _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_CTRL1_excpt_endian_init(r32,v)       _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_CTRL1_excpt_endian_init(r16)         _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_CTRL1_excpt_endian_init(r16,v)       _BFSET_(r16, 3, 3,v)

    #define     w32CpuReg_CTRL1                                {\
            UNSG32 uCTRL1_vinithi                              :  1;\
            UNSG32 uCTRL1_thumb_excpt_init                     :  1;\
            UNSG32 uCTRL1_nmfi_enable                          :  1;\
            UNSG32 uCTRL1_excpt_endian_init                    :  1;\
            UNSG32 RSVDx4_b4                                   : 28;\
          }
    union { UNSG32 u32CpuReg_CTRL1;
            struct w32CpuReg_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_CTRL2_global_cg_bypass(r32)          _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_CTRL2_global_cg_bypass(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_CTRL2_global_cg_bypass(r16)          _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_CTRL2_global_cg_bypass(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_CTRL2_cg_bypass(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32CpuReg_CTRL2_cg_bypass(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16CpuReg_CTRL2_cg_bypass(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_CTRL2_cg_bypass(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_CTRL2_sram_bypass(r32)               _BFGET_(r32, 2, 2)
    #define   SET32CpuReg_CTRL2_sram_bypass(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16CpuReg_CTRL2_sram_bypass(r16)               _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_CTRL2_sram_bypass(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_CTRL2_pdwn(r32)                      _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_CTRL2_pdwn(r32,v)                    _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_CTRL2_pdwn(r16)                      _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_CTRL2_pdwn(r16,v)                    _BFSET_(r16, 3, 3,v)

    #define   GET32CpuReg_CTRL2_pdlvmc(r32)                    _BFGET_(r32, 4, 4)
    #define   SET32CpuReg_CTRL2_pdlvmc(r32,v)                  _BFSET_(r32, 4, 4,v)
    #define   GET16CpuReg_CTRL2_pdlvmc(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16CpuReg_CTRL2_pdlvmc(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define   GET32CpuReg_CTRL2_pdfvssm(r32)                   _BFGET_(r32, 5, 5)
    #define   SET32CpuReg_CTRL2_pdfvssm(r32,v)                 _BFSET_(r32, 5, 5,v)
    #define   GET16CpuReg_CTRL2_pdfvssm(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16CpuReg_CTRL2_pdfvssm(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define     w32CpuReg_CTRL2                                {\
            UNSG32 uCTRL2_global_cg_bypass                     :  1;\
            UNSG32 uCTRL2_cg_bypass                            :  1;\
            UNSG32 uCTRL2_sram_bypass                          :  1;\
            UNSG32 uCTRL2_pdwn                                 :  1;\
            UNSG32 uCTRL2_pdlvmc                               :  1;\
            UNSG32 uCTRL2_pdfvssm                              :  1;\
            UNSG32 RSVDx8_b6                                   : 26;\
          }
    union { UNSG32 u32CpuReg_CTRL2;
            struct w32CpuReg_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_CTRL3_dbgen0(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_CTRL3_dbgen0(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_CTRL3_dbgen0(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_CTRL3_dbgen0(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_CTRL3_spiden0(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32CpuReg_CTRL3_spiden0(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16CpuReg_CTRL3_spiden0(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_CTRL3_spiden0(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_CTRL3_niden0(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32CpuReg_CTRL3_niden0(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16CpuReg_CTRL3_niden0(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_CTRL3_niden0(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_CTRL3_spniden0(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_CTRL3_spniden0(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_CTRL3_spniden0(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_CTRL3_spniden0(r16,v)                _BFSET_(r16, 3, 3,v)

    #define   GET32CpuReg_CTRL3_dbgen1(r32)                    _BFGET_(r32, 4, 4)
    #define   SET32CpuReg_CTRL3_dbgen1(r32,v)                  _BFSET_(r32, 4, 4,v)
    #define   GET16CpuReg_CTRL3_dbgen1(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16CpuReg_CTRL3_dbgen1(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define   GET32CpuReg_CTRL3_spiden1(r32)                   _BFGET_(r32, 5, 5)
    #define   SET32CpuReg_CTRL3_spiden1(r32,v)                 _BFSET_(r32, 5, 5,v)
    #define   GET16CpuReg_CTRL3_spiden1(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16CpuReg_CTRL3_spiden1(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define   GET32CpuReg_CTRL3_niden1(r32)                    _BFGET_(r32, 6, 6)
    #define   SET32CpuReg_CTRL3_niden1(r32,v)                  _BFSET_(r32, 6, 6,v)
    #define   GET16CpuReg_CTRL3_niden1(r16)                    _BFGET_(r16, 6, 6)
    #define   SET16CpuReg_CTRL3_niden1(r16,v)                  _BFSET_(r16, 6, 6,v)

    #define   GET32CpuReg_CTRL3_spniden1(r32)                  _BFGET_(r32, 7, 7)
    #define   SET32CpuReg_CTRL3_spniden1(r32,v)                _BFSET_(r32, 7, 7,v)
    #define   GET16CpuReg_CTRL3_spniden1(r16)                  _BFGET_(r16, 7, 7)
    #define   SET16CpuReg_CTRL3_spniden1(r16,v)                _BFSET_(r16, 7, 7,v)

    #define   GET32CpuReg_CTRL3_dbgen2(r32)                    _BFGET_(r32, 8, 8)
    #define   SET32CpuReg_CTRL3_dbgen2(r32,v)                  _BFSET_(r32, 8, 8,v)
    #define   GET16CpuReg_CTRL3_dbgen2(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16CpuReg_CTRL3_dbgen2(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32CpuReg_CTRL3_spiden2(r32)                   _BFGET_(r32, 9, 9)
    #define   SET32CpuReg_CTRL3_spiden2(r32,v)                 _BFSET_(r32, 9, 9,v)
    #define   GET16CpuReg_CTRL3_spiden2(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16CpuReg_CTRL3_spiden2(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define   GET32CpuReg_CTRL3_niden2(r32)                    _BFGET_(r32,10,10)
    #define   SET32CpuReg_CTRL3_niden2(r32,v)                  _BFSET_(r32,10,10,v)
    #define   GET16CpuReg_CTRL3_niden2(r16)                    _BFGET_(r16,10,10)
    #define   SET16CpuReg_CTRL3_niden2(r16,v)                  _BFSET_(r16,10,10,v)

    #define   GET32CpuReg_CTRL3_spniden2(r32)                  _BFGET_(r32,11,11)
    #define   SET32CpuReg_CTRL3_spniden2(r32,v)                _BFSET_(r32,11,11,v)
    #define   GET16CpuReg_CTRL3_spniden2(r16)                  _BFGET_(r16,11,11)
    #define   SET16CpuReg_CTRL3_spniden2(r16,v)                _BFSET_(r16,11,11,v)

    #define   GET32CpuReg_CTRL3_dbgen3(r32)                    _BFGET_(r32,12,12)
    #define   SET32CpuReg_CTRL3_dbgen3(r32,v)                  _BFSET_(r32,12,12,v)
    #define   GET16CpuReg_CTRL3_dbgen3(r16)                    _BFGET_(r16,12,12)
    #define   SET16CpuReg_CTRL3_dbgen3(r16,v)                  _BFSET_(r16,12,12,v)

    #define   GET32CpuReg_CTRL3_spiden3(r32)                   _BFGET_(r32,13,13)
    #define   SET32CpuReg_CTRL3_spiden3(r32,v)                 _BFSET_(r32,13,13,v)
    #define   GET16CpuReg_CTRL3_spiden3(r16)                   _BFGET_(r16,13,13)
    #define   SET16CpuReg_CTRL3_spiden3(r16,v)                 _BFSET_(r16,13,13,v)

    #define   GET32CpuReg_CTRL3_niden3(r32)                    _BFGET_(r32,14,14)
    #define   SET32CpuReg_CTRL3_niden3(r32,v)                  _BFSET_(r32,14,14,v)
    #define   GET16CpuReg_CTRL3_niden3(r16)                    _BFGET_(r16,14,14)
    #define   SET16CpuReg_CTRL3_niden3(r16,v)                  _BFSET_(r16,14,14,v)

    #define   GET32CpuReg_CTRL3_spniden3(r32)                  _BFGET_(r32,15,15)
    #define   SET32CpuReg_CTRL3_spniden3(r32,v)                _BFSET_(r32,15,15,v)
    #define   GET16CpuReg_CTRL3_spniden3(r16)                  _BFGET_(r16,15,15)
    #define   SET16CpuReg_CTRL3_spniden3(r16,v)                _BFSET_(r16,15,15,v)

    #define     w32CpuReg_CTRL3                                {\
            UNSG32 uCTRL3_dbgen0                               :  1;\
            UNSG32 uCTRL3_spiden0                              :  1;\
            UNSG32 uCTRL3_niden0                               :  1;\
            UNSG32 uCTRL3_spniden0                             :  1;\
            UNSG32 uCTRL3_dbgen1                               :  1;\
            UNSG32 uCTRL3_spiden1                              :  1;\
            UNSG32 uCTRL3_niden1                               :  1;\
            UNSG32 uCTRL3_spniden1                             :  1;\
            UNSG32 uCTRL3_dbgen2                               :  1;\
            UNSG32 uCTRL3_spiden2                              :  1;\
            UNSG32 uCTRL3_niden2                               :  1;\
            UNSG32 uCTRL3_spniden2                             :  1;\
            UNSG32 uCTRL3_dbgen3                               :  1;\
            UNSG32 uCTRL3_spiden3                              :  1;\
            UNSG32 uCTRL3_niden3                               :  1;\
            UNSG32 uCTRL3_spniden3                             :  1;\
            UNSG32 RSVDxC_b16                                  : 16;\
          }
    union { UNSG32 u32CpuReg_CTRL3;
            struct w32CpuReg_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_CTRL4_maxclklatency(r32)             _BFGET_(r32, 2, 0)
    #define   SET32CpuReg_CTRL4_maxclklatency(r32,v)           _BFSET_(r32, 2, 0,v)
    #define   GET16CpuReg_CTRL4_maxclklatency(r16)             _BFGET_(r16, 2, 0)
    #define   SET16CpuReg_CTRL4_maxclklatency(r16,v)           _BFSET_(r16, 2, 0,v)

    #define   GET32CpuReg_CTRL4_cfgsdisable(r32)               _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_CTRL4_cfgsdisable(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_CTRL4_cfgsdisable(r16)               _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_CTRL4_cfgsdisable(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32CpuReg_CTRL4_clusterid(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32CpuReg_CTRL4_clusterid(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16CpuReg_CTRL4_clusterid(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16CpuReg_CTRL4_clusterid(r16,v)               _BFSET_(r16, 7, 4,v)

    #define     w32CpuReg_CTRL4                                {\
            UNSG32 uCTRL4_maxclklatency                        :  3;\
            UNSG32 uCTRL4_cfgsdisable                          :  1;\
            UNSG32 uCTRL4_clusterid                            :  4;\
            UNSG32 RSVDx10_b8                                  : 24;\
          }
    union { UNSG32 u32CpuReg_CTRL4;
            struct w32CpuReg_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_CTRL5_filter_en(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_CTRL5_filter_en(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_CTRL5_filter_en(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_CTRL5_filter_en(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_CTRL5_filter_start(r32)              _BFGET_(r32,12, 1)
    #define   SET32CpuReg_CTRL5_filter_start(r32,v)            _BFSET_(r32,12, 1,v)
    #define   GET16CpuReg_CTRL5_filter_start(r16)              _BFGET_(r16,12, 1)
    #define   SET16CpuReg_CTRL5_filter_start(r16,v)            _BFSET_(r16,12, 1,v)

    #define   GET32CpuReg_CTRL5_filter_end(r32)                _BFGET_(r32,24,13)
    #define   SET32CpuReg_CTRL5_filter_end(r32,v)              _BFSET_(r32,24,13,v)

    #define     w32CpuReg_CTRL5                                {\
            UNSG32 uCTRL5_filter_en                            :  1;\
            UNSG32 uCTRL5_filter_start                         : 12;\
            UNSG32 uCTRL5_filter_end                           : 12;\
            UNSG32 RSVDx14_b25                                 :  7;\
          }
    union { UNSG32 u32CpuReg_CTRL5;
            struct w32CpuReg_CTRL5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_ClockEnable_CPUAxi(r32)              _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_ClockEnable_CPUAxi(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_ClockEnable_CPUAxi(r16)              _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_ClockEnable_CPUAxi(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_ClockEnable_Perif(r32)               _BFGET_(r32, 1, 1)
    #define   SET32CpuReg_ClockEnable_Perif(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16CpuReg_ClockEnable_Perif(r16)               _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_ClockEnable_Perif(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_ClockEnable_Timer(r32)               _BFGET_(r32, 2, 2)
    #define   SET32CpuReg_ClockEnable_Timer(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16CpuReg_ClockEnable_Timer(r16)               _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_ClockEnable_Timer(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_ClockEnable_atclk(r32)               _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_ClockEnable_atclk(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_ClockEnable_atclk(r16)               _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_ClockEnable_atclk(r16,v)             _BFSET_(r16, 3, 3,v)

    #define     w32CpuReg_ClockEnable                          {\
            UNSG32 uClockEnable_CPUAxi                         :  1;\
            UNSG32 uClockEnable_Perif                          :  1;\
            UNSG32 uClockEnable_Timer                          :  1;\
            UNSG32 uClockEnable_atclk                          :  1;\
            UNSG32 RSVDx18_b4                                  : 28;\
          }
    union { UNSG32 u32CpuReg_ClockEnable;
            struct w32CpuReg_ClockEnable;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_SoftResetn_CPU0(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_SoftResetn_CPU0(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_SoftResetn_CPU0(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_SoftResetn_CPU0(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_SoftResetn_CPU1(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32CpuReg_SoftResetn_CPU1(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16CpuReg_SoftResetn_CPU1(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_SoftResetn_CPU1(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_SoftResetn_CPU2(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32CpuReg_SoftResetn_CPU2(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16CpuReg_SoftResetn_CPU2(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_SoftResetn_CPU2(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_SoftResetn_CPU3(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_SoftResetn_CPU3(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_SoftResetn_CPU3(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_SoftResetn_CPU3(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32CpuReg_SoftResetn_NEON0(r32)                _BFGET_(r32, 4, 4)
    #define   SET32CpuReg_SoftResetn_NEON0(r32,v)              _BFSET_(r32, 4, 4,v)
    #define   GET16CpuReg_SoftResetn_NEON0(r16)                _BFGET_(r16, 4, 4)
    #define   SET16CpuReg_SoftResetn_NEON0(r16,v)              _BFSET_(r16, 4, 4,v)

    #define   GET32CpuReg_SoftResetn_NEON1(r32)                _BFGET_(r32, 5, 5)
    #define   SET32CpuReg_SoftResetn_NEON1(r32,v)              _BFSET_(r32, 5, 5,v)
    #define   GET16CpuReg_SoftResetn_NEON1(r16)                _BFGET_(r16, 5, 5)
    #define   SET16CpuReg_SoftResetn_NEON1(r16,v)              _BFSET_(r16, 5, 5,v)

    #define   GET32CpuReg_SoftResetn_NEON2(r32)                _BFGET_(r32, 6, 6)
    #define   SET32CpuReg_SoftResetn_NEON2(r32,v)              _BFSET_(r32, 6, 6,v)
    #define   GET16CpuReg_SoftResetn_NEON2(r16)                _BFGET_(r16, 6, 6)
    #define   SET16CpuReg_SoftResetn_NEON2(r16,v)              _BFSET_(r16, 6, 6,v)

    #define   GET32CpuReg_SoftResetn_NEON3(r32)                _BFGET_(r32, 7, 7)
    #define   SET32CpuReg_SoftResetn_NEON3(r32,v)              _BFSET_(r32, 7, 7,v)
    #define   GET16CpuReg_SoftResetn_NEON3(r16)                _BFGET_(r16, 7, 7)
    #define   SET16CpuReg_SoftResetn_NEON3(r16,v)              _BFSET_(r16, 7, 7,v)

    #define   GET32CpuReg_SoftResetn_CPUAxi(r32)               _BFGET_(r32, 8, 8)
    #define   SET32CpuReg_SoftResetn_CPUAxi(r32,v)             _BFSET_(r32, 8, 8,v)
    #define   GET16CpuReg_SoftResetn_CPUAxi(r16)               _BFGET_(r16, 8, 8)
    #define   SET16CpuReg_SoftResetn_CPUAxi(r16,v)             _BFSET_(r16, 8, 8,v)

    #define   GET32CpuReg_SoftResetn_Perif(r32)                _BFGET_(r32, 9, 9)
    #define   SET32CpuReg_SoftResetn_Perif(r32,v)              _BFSET_(r32, 9, 9,v)
    #define   GET16CpuReg_SoftResetn_Perif(r16)                _BFGET_(r16, 9, 9)
    #define   SET16CpuReg_SoftResetn_Perif(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32CpuReg_SoftResetn_Timer(r32)                _BFGET_(r32,10,10)
    #define   SET32CpuReg_SoftResetn_Timer(r32,v)              _BFSET_(r32,10,10,v)
    #define   GET16CpuReg_SoftResetn_Timer(r16)                _BFGET_(r16,10,10)
    #define   SET16CpuReg_SoftResetn_Timer(r16,v)              _BFSET_(r16,10,10,v)

    #define   GET32CpuReg_SoftResetn_WatchDog0(r32)            _BFGET_(r32,11,11)
    #define   SET32CpuReg_SoftResetn_WatchDog0(r32,v)          _BFSET_(r32,11,11,v)
    #define   GET16CpuReg_SoftResetn_WatchDog0(r16)            _BFGET_(r16,11,11)
    #define   SET16CpuReg_SoftResetn_WatchDog0(r16,v)          _BFSET_(r16,11,11,v)

    #define   GET32CpuReg_SoftResetn_WatchDog1(r32)            _BFGET_(r32,12,12)
    #define   SET32CpuReg_SoftResetn_WatchDog1(r32,v)          _BFSET_(r32,12,12,v)
    #define   GET16CpuReg_SoftResetn_WatchDog1(r16)            _BFGET_(r16,12,12)
    #define   SET16CpuReg_SoftResetn_WatchDog1(r16,v)          _BFSET_(r16,12,12,v)

    #define   GET32CpuReg_SoftResetn_WatchDog2(r32)            _BFGET_(r32,13,13)
    #define   SET32CpuReg_SoftResetn_WatchDog2(r32,v)          _BFSET_(r32,13,13,v)
    #define   GET16CpuReg_SoftResetn_WatchDog2(r16)            _BFGET_(r16,13,13)
    #define   SET16CpuReg_SoftResetn_WatchDog2(r16,v)          _BFSET_(r16,13,13,v)

    #define   GET32CpuReg_SoftResetn_WatchDog3(r32)            _BFGET_(r32,14,14)
    #define   SET32CpuReg_SoftResetn_WatchDog3(r32,v)          _BFSET_(r32,14,14,v)
    #define   GET16CpuReg_SoftResetn_WatchDog3(r16)            _BFGET_(r16,14,14)
    #define   SET16CpuReg_SoftResetn_WatchDog3(r16,v)          _BFSET_(r16,14,14,v)

    #define   GET32CpuReg_SoftResetn_MpSubSys(r32)             _BFGET_(r32,15,15)
    #define   SET32CpuReg_SoftResetn_MpSubSys(r32,v)           _BFSET_(r32,15,15,v)
    #define   GET16CpuReg_SoftResetn_MpSubSys(r16)             _BFGET_(r16,15,15)
    #define   SET16CpuReg_SoftResetn_MpSubSys(r16,v)           _BFSET_(r16,15,15,v)

    #define   GET32CpuReg_SoftResetn_CoreSight(r32)            _BFGET_(r32,16,16)
    #define   SET32CpuReg_SoftResetn_CoreSight(r32,v)          _BFSET_(r32,16,16,v)
    #define   GET16CpuReg_SoftResetn_CoreSight(r16)            _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_SoftResetn_CoreSight(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_SoftResetn_DBG0(r32)                 _BFGET_(r32,17,17)
    #define   SET32CpuReg_SoftResetn_DBG0(r32,v)               _BFSET_(r32,17,17,v)
    #define   GET16CpuReg_SoftResetn_DBG0(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_SoftResetn_DBG0(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_SoftResetn_DBG1(r32)                 _BFGET_(r32,18,18)
    #define   SET32CpuReg_SoftResetn_DBG1(r32,v)               _BFSET_(r32,18,18,v)
    #define   GET16CpuReg_SoftResetn_DBG1(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_SoftResetn_DBG1(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_SoftResetn_DBG2(r32)                 _BFGET_(r32,19,19)
    #define   SET32CpuReg_SoftResetn_DBG2(r32,v)               _BFSET_(r32,19,19,v)
    #define   GET16CpuReg_SoftResetn_DBG2(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_SoftResetn_DBG2(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32CpuReg_SoftResetn_DBG3(r32)                 _BFGET_(r32,20,20)
    #define   SET32CpuReg_SoftResetn_DBG3(r32,v)               _BFSET_(r32,20,20,v)
    #define   GET16CpuReg_SoftResetn_DBG3(r16)                 _BFGET_(r16, 4, 4)
    #define   SET16CpuReg_SoftResetn_DBG3(r16,v)               _BFSET_(r16, 4, 4,v)

    #define   GET32CpuReg_SoftResetn_L2C(r32)                  _BFGET_(r32,21,21)
    #define   SET32CpuReg_SoftResetn_L2C(r32,v)                _BFSET_(r32,21,21,v)
    #define   GET16CpuReg_SoftResetn_L2C(r16)                  _BFGET_(r16, 5, 5)
    #define   SET16CpuReg_SoftResetn_L2C(r16,v)                _BFSET_(r16, 5, 5,v)

    #define     w32CpuReg_SoftResetn                           {\
            UNSG32 uSoftResetn_CPU0                            :  1;\
            UNSG32 uSoftResetn_CPU1                            :  1;\
            UNSG32 uSoftResetn_CPU2                            :  1;\
            UNSG32 uSoftResetn_CPU3                            :  1;\
            UNSG32 uSoftResetn_NEON0                           :  1;\
            UNSG32 uSoftResetn_NEON1                           :  1;\
            UNSG32 uSoftResetn_NEON2                           :  1;\
            UNSG32 uSoftResetn_NEON3                           :  1;\
            UNSG32 uSoftResetn_CPUAxi                          :  1;\
            UNSG32 uSoftResetn_Perif                           :  1;\
            UNSG32 uSoftResetn_Timer                           :  1;\
            UNSG32 uSoftResetn_WatchDog0                       :  1;\
            UNSG32 uSoftResetn_WatchDog1                       :  1;\
            UNSG32 uSoftResetn_WatchDog2                       :  1;\
            UNSG32 uSoftResetn_WatchDog3                       :  1;\
            UNSG32 uSoftResetn_MpSubSys                        :  1;\
            UNSG32 uSoftResetn_CoreSight                       :  1;\
            UNSG32 uSoftResetn_DBG0                            :  1;\
            UNSG32 uSoftResetn_DBG1                            :  1;\
            UNSG32 uSoftResetn_DBG2                            :  1;\
            UNSG32 uSoftResetn_DBG3                            :  1;\
            UNSG32 uSoftResetn_L2C                             :  1;\
            UNSG32 RSVDx1C_b22                                 : 10;\
          }
    union { UNSG32 u32CpuReg_SoftResetn;
            struct w32CpuReg_SoftResetn;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_wdResetCtrl_cpu0(r32)                _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_wdResetCtrl_cpu0(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_wdResetCtrl_cpu0(r16)                _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_wdResetCtrl_cpu0(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_wdResetCtrl_cpu1(r32)                _BFGET_(r32, 1, 1)
    #define   SET32CpuReg_wdResetCtrl_cpu1(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16CpuReg_wdResetCtrl_cpu1(r16)                _BFGET_(r16, 1, 1)
    #define   SET16CpuReg_wdResetCtrl_cpu1(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32CpuReg_wdResetCtrl_cpu2(r32)                _BFGET_(r32, 2, 2)
    #define   SET32CpuReg_wdResetCtrl_cpu2(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16CpuReg_wdResetCtrl_cpu2(r16)                _BFGET_(r16, 2, 2)
    #define   SET16CpuReg_wdResetCtrl_cpu2(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32CpuReg_wdResetCtrl_cpu3(r32)                _BFGET_(r32, 3, 3)
    #define   SET32CpuReg_wdResetCtrl_cpu3(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16CpuReg_wdResetCtrl_cpu3(r16)                _BFGET_(r16, 3, 3)
    #define   SET16CpuReg_wdResetCtrl_cpu3(r16,v)              _BFSET_(r16, 3, 3,v)

    #define     w32CpuReg_wdResetCtrl                          {\
            UNSG32 uwdResetCtrl_cpu0                           :  1;\
            UNSG32 uwdResetCtrl_cpu1                           :  1;\
            UNSG32 uwdResetCtrl_cpu2                           :  1;\
            UNSG32 uwdResetCtrl_cpu3                           :  1;\
            UNSG32 RSVDx20_b4                                  : 28;\
          }
    union { UNSG32 u32CpuReg_wdResetCtrl;
            struct w32CpuReg_wdResetCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_perifClkCtrl_clkD3Switch(r32)        _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_perifClkCtrl_clkD3Switch(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_perifClkCtrl_clkD3Switch(r16)        _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_perifClkCtrl_clkD3Switch(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_perifClkCtrl_clkSel(r32)             _BFGET_(r32, 3, 1)
    #define   SET32CpuReg_perifClkCtrl_clkSel(r32,v)           _BFSET_(r32, 3, 1,v)
    #define   GET16CpuReg_perifClkCtrl_clkSel(r16)             _BFGET_(r16, 3, 1)
    #define   SET16CpuReg_perifClkCtrl_clkSel(r16,v)           _BFSET_(r16, 3, 1,v)

    #define     w32CpuReg_perifClkCtrl                         {\
            UNSG32 uperifClkCtrl_clkD3Switch                   :  1;\
            UNSG32 uperifClkCtrl_clkSel                        :  3;\
            UNSG32 RSVDx24_b4                                  : 28;\
          }
    union { UNSG32 u32CpuReg_perifClkCtrl;
            struct w32CpuReg_perifClkCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_csClkCtrl_clkD3Switch(r32)           _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_csClkCtrl_clkD3Switch(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_csClkCtrl_clkD3Switch(r16)           _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_csClkCtrl_clkD3Switch(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_csClkCtrl_clkSel(r32)                _BFGET_(r32, 3, 1)
    #define   SET32CpuReg_csClkCtrl_clkSel(r32,v)              _BFSET_(r32, 3, 1,v)
    #define   GET16CpuReg_csClkCtrl_clkSel(r16)                _BFGET_(r16, 3, 1)
    #define   SET16CpuReg_csClkCtrl_clkSel(r16,v)              _BFSET_(r16, 3, 1,v)

    #define     w32CpuReg_csClkCtrl                            {\
            UNSG32 ucsClkCtrl_clkD3Switch                      :  1;\
            UNSG32 ucsClkCtrl_clkSel                           :  3;\
            UNSG32 RSVDx28_b4                                  : 28;\
          }
    union { UNSG32 u32CpuReg_csClkCtrl;
            struct w32CpuReg_csClkCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_L2CTRL0_cache_id(r32)                _BFGET_(r32, 5, 0)
    #define   SET32CpuReg_L2CTRL0_cache_id(r32,v)              _BFSET_(r32, 5, 0,v)
    #define   GET16CpuReg_L2CTRL0_cache_id(r16)                _BFGET_(r16, 5, 0)
    #define   SET16CpuReg_L2CTRL0_cache_id(r16,v)              _BFSET_(r16, 5, 0,v)

    #define   GET32CpuReg_L2CTRL0_associativity(r32)           _BFGET_(r32, 6, 6)
    #define   SET32CpuReg_L2CTRL0_associativity(r32,v)         _BFSET_(r32, 6, 6,v)
    #define   GET16CpuReg_L2CTRL0_associativity(r16)           _BFGET_(r16, 6, 6)
    #define   SET16CpuReg_L2CTRL0_associativity(r16,v)         _BFSET_(r16, 6, 6,v)

    #define   GET32CpuReg_L2CTRL0_waysize(r32)                 _BFGET_(r32, 9, 7)
    #define   SET32CpuReg_L2CTRL0_waysize(r32,v)               _BFSET_(r32, 9, 7,v)
    #define   GET16CpuReg_L2CTRL0_waysize(r16)                 _BFGET_(r16, 9, 7)
    #define   SET16CpuReg_L2CTRL0_waysize(r16,v)               _BFSET_(r16, 9, 7,v)

    #define   GET32CpuReg_L2CTRL0_cfgbigend(r32)               _BFGET_(r32,10,10)
    #define   SET32CpuReg_L2CTRL0_cfgbigend(r32,v)             _BFSET_(r32,10,10,v)
    #define   GET16CpuReg_L2CTRL0_cfgbigend(r16)               _BFGET_(r16,10,10)
    #define   SET16CpuReg_L2CTRL0_cfgbigend(r16,v)             _BFSET_(r16,10,10,v)

    #define   GET32CpuReg_L2CTRL0_spniden(r32)                 _BFGET_(r32,11,11)
    #define   SET32CpuReg_L2CTRL0_spniden(r32,v)               _BFSET_(r32,11,11,v)
    #define   GET16CpuReg_L2CTRL0_spniden(r16)                 _BFGET_(r16,11,11)
    #define   SET16CpuReg_L2CTRL0_spniden(r16,v)               _BFSET_(r16,11,11,v)

    #define     w32CpuReg_L2CTRL0                              {\
            UNSG32 uL2CTRL0_cache_id                           :  6;\
            UNSG32 uL2CTRL0_associativity                      :  1;\
            UNSG32 uL2CTRL0_waysize                            :  3;\
            UNSG32 uL2CTRL0_cfgbigend                          :  1;\
            UNSG32 uL2CTRL0_spniden                            :  1;\
            UNSG32 RSVDx2C_b12                                 : 20;\
          }
    union { UNSG32 u32CpuReg_L2CTRL0;
            struct w32CpuReg_L2CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_L2CTRL1_filter_en(r32)               _BFGET_(r32, 0, 0)
    #define   SET32CpuReg_L2CTRL1_filter_en(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16CpuReg_L2CTRL1_filter_en(r16)               _BFGET_(r16, 0, 0)
    #define   SET16CpuReg_L2CTRL1_filter_en(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32CpuReg_L2CTRL1_filter_start(r32)            _BFGET_(r32,12, 1)
    #define   SET32CpuReg_L2CTRL1_filter_start(r32,v)          _BFSET_(r32,12, 1,v)
    #define   GET16CpuReg_L2CTRL1_filter_start(r16)            _BFGET_(r16,12, 1)
    #define   SET16CpuReg_L2CTRL1_filter_start(r16,v)          _BFSET_(r16,12, 1,v)

    #define   GET32CpuReg_L2CTRL1_filter_end(r32)              _BFGET_(r32,24,13)
    #define   SET32CpuReg_L2CTRL1_filter_end(r32,v)            _BFSET_(r32,24,13,v)

    #define     w32CpuReg_L2CTRL1                              {\
            UNSG32 uL2CTRL1_filter_en                          :  1;\
            UNSG32 uL2CTRL1_filter_start                       : 12;\
            UNSG32 uL2CTRL1_filter_end                         : 12;\
            UNSG32 RSVDx30_b25                                 :  7;\
          }
    union { UNSG32 u32CpuReg_L2CTRL1;
            struct w32CpuReg_L2CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CpuReg_dummy_dummy(r32)                     _BFGET_(r32,31, 0)
    #define   SET32CpuReg_dummy_dummy(r32,v)                   _BFSET_(r32,31, 0,v)

    #define     w32CpuReg_dummy                                {\
            UNSG32 udummy_dummy                                : 32;\
          }
    union { UNSG32 u32CpuReg_dummy;
            struct w32CpuReg_dummy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_CpuReg;

    typedef union  T32CpuReg_CTRL0
          { UNSG32 u32;
            struct w32CpuReg_CTRL0;
                 } T32CpuReg_CTRL0;
    typedef union  T32CpuReg_CTRL1
          { UNSG32 u32;
            struct w32CpuReg_CTRL1;
                 } T32CpuReg_CTRL1;
    typedef union  T32CpuReg_CTRL2
          { UNSG32 u32;
            struct w32CpuReg_CTRL2;
                 } T32CpuReg_CTRL2;
    typedef union  T32CpuReg_CTRL3
          { UNSG32 u32;
            struct w32CpuReg_CTRL3;
                 } T32CpuReg_CTRL3;
    typedef union  T32CpuReg_CTRL4
          { UNSG32 u32;
            struct w32CpuReg_CTRL4;
                 } T32CpuReg_CTRL4;
    typedef union  T32CpuReg_CTRL5
          { UNSG32 u32;
            struct w32CpuReg_CTRL5;
                 } T32CpuReg_CTRL5;
    typedef union  T32CpuReg_ClockEnable
          { UNSG32 u32;
            struct w32CpuReg_ClockEnable;
                 } T32CpuReg_ClockEnable;
    typedef union  T32CpuReg_SoftResetn
          { UNSG32 u32;
            struct w32CpuReg_SoftResetn;
                 } T32CpuReg_SoftResetn;
    typedef union  T32CpuReg_wdResetCtrl
          { UNSG32 u32;
            struct w32CpuReg_wdResetCtrl;
                 } T32CpuReg_wdResetCtrl;
    typedef union  T32CpuReg_perifClkCtrl
          { UNSG32 u32;
            struct w32CpuReg_perifClkCtrl;
                 } T32CpuReg_perifClkCtrl;
    typedef union  T32CpuReg_csClkCtrl
          { UNSG32 u32;
            struct w32CpuReg_csClkCtrl;
                 } T32CpuReg_csClkCtrl;
    typedef union  T32CpuReg_L2CTRL0
          { UNSG32 u32;
            struct w32CpuReg_L2CTRL0;
                 } T32CpuReg_L2CTRL0;
    typedef union  T32CpuReg_L2CTRL1
          { UNSG32 u32;
            struct w32CpuReg_L2CTRL1;
                 } T32CpuReg_L2CTRL1;
    typedef union  T32CpuReg_dummy
          { UNSG32 u32;
            struct w32CpuReg_dummy;
                 } T32CpuReg_dummy;
    ///////////////////////////////////////////////////////////

    typedef union  TCpuReg_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_CTRL0;
                   };
                 } TCpuReg_CTRL0;
    typedef union  TCpuReg_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_CTRL1;
                   };
                 } TCpuReg_CTRL1;
    typedef union  TCpuReg_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_CTRL2;
                   };
                 } TCpuReg_CTRL2;
    typedef union  TCpuReg_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_CTRL3;
                   };
                 } TCpuReg_CTRL3;
    typedef union  TCpuReg_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_CTRL4;
                   };
                 } TCpuReg_CTRL4;
    typedef union  TCpuReg_CTRL5
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_CTRL5;
                   };
                 } TCpuReg_CTRL5;
    typedef union  TCpuReg_ClockEnable
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_ClockEnable;
                   };
                 } TCpuReg_ClockEnable;
    typedef union  TCpuReg_SoftResetn
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_SoftResetn;
                   };
                 } TCpuReg_SoftResetn;
    typedef union  TCpuReg_wdResetCtrl
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_wdResetCtrl;
                   };
                 } TCpuReg_wdResetCtrl;
    typedef union  TCpuReg_perifClkCtrl
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_perifClkCtrl;
                   };
                 } TCpuReg_perifClkCtrl;
    typedef union  TCpuReg_csClkCtrl
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_csClkCtrl;
                   };
                 } TCpuReg_csClkCtrl;
    typedef union  TCpuReg_L2CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_L2CTRL0;
                   };
                 } TCpuReg_L2CTRL0;
    typedef union  TCpuReg_L2CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_L2CTRL1;
                   };
                 } TCpuReg_L2CTRL1;
    typedef union  TCpuReg_dummy
          { UNSG32 u32[1];
            struct {
            struct w32CpuReg_dummy;
                   };
                 } TCpuReg_dummy;

    ///////////////////////////////////////////////////////////
     SIGN32 CpuReg_drvrd(SIE_CpuReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CpuReg_drvwr(SIE_CpuReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CpuReg_reset(SIE_CpuReg *p);
     SIGN32 CpuReg_cmp  (SIE_CpuReg *p, SIE_CpuReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CpuReg_check(p,pie,pfx,hLOG) CpuReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CpuReg_print(p,    pfx,hLOG) CpuReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CpuReg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE PllReg                                   (4,4)
///     ###
///     * SSPLL is a wide range, and low power spread-spectrum PLL that is also capable of
///     * adding in a fixed frequency offset in about 1 ppm/step resolution.
///     * Input Frequency: Fref: 8 MHz ~ 1 GHz.
///     * Output Frequency: Fout: 4 MHz ~ 4 GHz.
///     * Fout(CLKOUT) = (Fref *4*N/M) / CLKOUT_SE_DIV_SEL)
///     * Fout(CLKOUTP, CLKOUTN) = (Fref*4*N/M) / CLKOUT_DIFF_DIV_SEL).
///     * M: Reference Divider: 1 to 511.
///     * N: Feedback Divider: 1 to 511.
///     * VCODIV: VCO differential divider is controlled by CLKOUT_DIFF_DIV_SEL
///     * VCO single-ended divider is controlled by CLKOUT_SE_DIV_SEL.
///     * Divider value = 1,2,3,4….511.
///     * Update Rate: Fref / M = 8 to 24 MHz (to maintain PLL stability).
///     * NOTE: Although VCO can be operated between 1 ~ 4 GHz, the 1 ~ 2 GHz range is applicable
///     * only in the low power mode and cannot be used with the SSC function. In order to use the SSC
///     * function VCO must be operated above 2 GHz.
///     * Cycle to Cycle Jitter (max): <30 ps.
///     * Programmable Reference and Feedback Divider.
///     * 1 ppm/step frequency offset resolution. Up to 50,000 ppm without changing the Feedback Divider setting.
///     * SSC frequency range: 30 KHz ~ 100 KHz
///     * SSC amplitude range: up to +/-5%. (SSC function is disabled by default.)
///     * Supporting both down-spread and center-spread modes.
///     * Locking time: < 50 μm
///     * Process Node: 28 nm
///     * Analog Power Supply: 1.8 V (±10%)
///     * Digital Power Supply: 0.9 V (±10%)
///     * Output Duty Cycle: 50% ± 5% for any post divider ratio
///     * Built-in Bandgap circuit.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * PLL Control register
///               ###
///               %unsigned 1  PU                        0x1
///                                    ###
///                                    * PLL Power-Up
///                                    * 1: power up.
///                                    * 0: power down.
///                                    ###
///               %unsigned 1  RESET                     0x1
///                                    ###
///                                    * Power On Reset. Active high, reset PLL and all logic.
///                                    * 1: reset.
///                                    * 0: no reset.
///                                    ###
///               %unsigned 1  AVDD1815_SEL              0x1
///                                    ###
///                                    * AVDD Select.
///                                    * Selects whether AVDD is 1.8V
///                                    * or 1.5V.
///                                    * 1: 1.8V
///                                    * 0: 1.5V
///                                    ###
///               %unsigned 9  REFDIV                    0x2
///                                    ###
///                                    * Reference Clock Divider
///                                    * Select.
///                                    * Divider = REFDIV[8:0]
///                                    * 9’h000 = divide by 1
///                                    * 9’h001 = divide by 1
///                                    * 9’h002 = divide by 2
///                                    * 9’h003 = divide by 3
///                                    * ...
///                                    * 9’h1FF = divide by 511.
///                                    ###
///               %unsigned 9  FBDIV                     0x30
///                                    ###
///                                    * Feedback Clock Divider Select.
///                                    * Divider= FBDIV [8:0]
///                                    * 9’h000 = divide by 1
///                                    * 9’h001 = divide by 1
///                                    * 9’h002 = divide by 2
///                                    * 9’h003 = divide by 3
///                                    * ...
///                                    * 9’h1FF = divide by 511.
///                                    ###
///               %unsigned 2  VDDM                      0x1
///                                    ###
///                                    * VCO Supply Control.
///                                    * 11: 1.5 V
///                                    * 10: 1.45 V
///                                    * 01: 1.4 V
///                                    * 00: 1.35 V.
///                                    ###
///               %unsigned 3  VDDL                      0x4
///                                    ###
///                                    * Internal VDD Supply Control.
///                                    * 000: 0.7V.
///                                    * 001: 0.75V
///                                    * 010: 0.8V
///                                    * 011: 0.85V
///                                    * 100: 0.9V
///                                    * 101: 0.95V
///                                    * 110: 1.0V
///                                    * 111: 1.05V.
///                                    ###
///               %unsigned 4  ICP                       0x5
///                                    ###
///                                    * Charge-pump Current Control Bits.
///                                    * 0000: 3 uA
///                                    * 0001: 3.75 uA
///                                    * 0010: 4.5 uA
///                                    * 0011: 5.25 uA
///                                    * 0100: 6 uA
///                                    * 0101: 7.5 uA
///                                    * 0110: 9 uA
///                                    * 0111: 10.5 uA
///                                    * 1000: 12 uA
///                                    * 1001: 15 uA
///                                    * 1010: 18 uA
///                                    * 1011: 21 uA
///                                    * 1100: 24 uA
///                                    * 1101: 30 uA
///                                    * 1110: 36 uA
///                                    * 1111: 42 uA.
///                                    * Note : ICP[3:0] = (10 MHz / Update Rate) * Default.
///                                    * If PU_BW_SEL = 1, then increase ICP value by 2x
///                                    ###
///               %unsigned 1  PLL_BW_REL                0x0
///                                    ###
///                                    * PLL Bandwidth Select.
///                                    * 1: BW x 2
///                                    * 0: Normal PLL bandwidth.
///                                    * Note: Use bandwidth x 2 only if update rate is between 16 - 24 MHz.
///                                    * NOTE: Bandwidth x 2 is for special cases only. If used, the update rate must be betweeen 16 MHz - 24 MHz.
///                                    ###
///               %%        1          # Stuffing bits...
///     # 0x00004 ctrl1                
///               %unsigned 4  KVCO                      0x9
///                                    ###
///                                    * KVCO Frequency Range
///                                    * Select.
///                                    * 0000: Reserved
///                                    * 0001: 1.0G ~ 1.15G
///                                    * 0010: 1.15G ~ 1.25G
///                                    * 0011: 1.25G ~ 1.40G
///                                    * 0100: 1.40G ~ 1.55G
///                                    * 0101: 1.55G ~ 1.65G
///                                    * 0110: 1.65G ~ 1.80G
///                                    * 0111: 1.80G ~ 1.95G
///                                    * 1000: 1.95G ~ 2.17G
///                                    * 1001: 2.17G ~ 2.50G
///                                    * 1010: 2.50G ~ 2.80G
///                                    * 1011: 2.80G ~ 3.10G
///                                    * 1100: 3.10G ~ 3.45G
///                                    * 1101: 3.45G ~ 3.75G
///                                    * 1110: 3.75G ~ 4.0G
///                                    * 1111: Reserved.
///                                    * Note: SSC mode is only supported for frequency >=2 GHz
///                                    ###
///               %unsigned 2  CTUNE                     0x2
///                                    ###
///                                    * VCO Capacitor Select.
///                                    * 00: No Cap Loading
///                                    * 01: One Unit Cap Loading
///                                    * 10: Two Unit Cap Loading
///                                    * 11: Three Unit Cap Loading.
///                                    ###
///               %unsigned 9  CLKOUT_DIFF_DIV_SEL       0x6
///                                    ###
///                                    * Post Divider For Differential
///                                    * Output Clock.
///                                    * 9’h000 = 1
///                                    * 9’h001 = 1
///                                    * 9’h002 = 2
///                                    * 9’h003 = 3
///                                    * 9’h004 = 4
///                                    * ...
///                                    * 9’h1FF = 511.
///                                    ###
///               %unsigned 9  CLKOUT_SE_DIV_SEL         0x6
///                                    ###
///                                    * Post Divider For Single-ended
///                                    * Output Clock.
///                                    * 9’h000 = 1
///                                    * 9’h001 = 1
///                                    * 9’h002 = 2
///                                    * 9’h003 = 3
///                                    * 9’h004 = 4
///                                    * ...
///                                    * 9’h1FF = 511.
///                                    ###
///               %unsigned 1  CLKOUT_SOURCE_SEL         0x1
///                                    ###
///                                    * Differential Clock And
///                                    * Single-ended Clock Source Control.
///                                    * 0: from the phase interpolator.
///                                    * 1: from VCO directly.
///                                    * Note: This is used in test mode only. Select ‘1’ for normal operation.
///                                    ###
///               %unsigned 1  CLKOUT_DIFF_EN            0x1
///                                    ###
///                                    * Differential Clock Enable.
///                                    * 0:Disable differential clock
///                                    * 1:Enable differential clock
///                                    ###
///               %unsigned 1  BYPASS_EN                 0x0
///                                    ###
///                                    * PLL Clock Bypass Enable.
///                                    * 1: The PLL is bypassed. CLKOUT is derived from REFCLK.
///                                    * 0: CLKOUT is derived from the PLL clock.
///                                    * NOTE: Bypass only works for the single ended clock.
///                                    * The bypass clock is asynchronous and glitch free.
///                                    ###
///               %unsigned 1  CLKOUT_SE_GATING_EN       0x0
///                                    ###
///                                    * Clock Output Gating Control.
///                                    * Selection for using the PLL lock signal to gate the output clock.
///                                    * 0: The PLL_LOCK signal won't affect the output clock, CLKOUT
///                                    * 1: Use PLL_LOCK signal to gate the output clock, CLKOUT.
///                                    ###
///               %unsigned 1  FBCLK_EXT_SEL             0x0
///                                    ###
///                                    * External Or Internal Feedback
///                                    * Clock Select.
///                                    * 0: select internal feedback clock
///                                    * 1: select external feedback clock.
///                                    * Note: For most applications the external feedback clock is not used. In these cases use the default selection "0".
///                                    ###
///               %%        3          # Stuffing bits...
///     # 0x00008 ctrl2                
///               %unsigned 6  FBCDLY                    0x0
///                                    ###
///                                    * Fine Tune Delay Select
///                                    * Between REFCLK And FBCLK_EXT When FBCLK_EXT_SEL = 1.
///                                    * FBCDLY[5] is the sign bit.
///                                    * 1 = FBCLK_EXT will lag REFCLK.
///                                    * 0 = FBCLK_EXT will lead REFCLK.
///                                    * FBCDLY[4:0] decides the actual amount of delay.
///                                    * 00000: No delay.
///                                    * Each additional step has these
///                                    * delays:
///                                    * 00h = No delay
///                                    * 01h = 15 - 50 ps phase difference
///                                    * 02h = 30 - 100 ps phase difference
///                                    * 03h = 45 - 150 ps phase difference
///                                    * ...
///                                    * 3Fh = 945 ps - 3150 ps phase difference.
///                                    * Note: Used in DSPLL application, do not use in regular PLL application.
///                                    ###
///               %unsigned 3  FD                        0x4
///                                    ###
///                                    * Tune Frequency Detector Precision
///                                    ###
///               %unsigned 4  INTPI                     0x2
///                                    ###
///                                    * Phase Interpolator Bias
///                                    * Current Select.
///                                    * 1 ~ 2 GHz NOT SUPPORTED
///                                    * 0001 = 5 uA (2 ~ 2.75 GHz)
///                                    * 0010 = 7.5 uA (2.75 ~ 3.25 GHz).
///                                    * 0011 = 10 uA (3.25 ~ 4 GHz).
///                                    * NOTE: VCO running frequency below 2 GHz not supported.
///                                    ###
///               %unsigned 3  INTPR                     0x6
///                                    ###
///                                    * Phase Interpolator Resistor Select.
///                                    * 1 ~ 2 GHz Not Supported
///                                    * 110 = 8 K (2 ~ 2.75 GHz)
///                                    * 101 = 6 K (2.75 ~ 3.25 GHz)
///                                    * 011 = 4 K (3.25 ~ 4 GHz).
///                                    * NOTE: VCO running frequency below 2 GHz not supported.
///                                    ###
///               %unsigned 1  PI_EN                     0x1
///                                    ###
///                                    * Phase Interpolator Enable.
///                                    * 1: Enable phase interpolator
///                                    * 0: Disable phase interpolator.
///                                    ###
///               %unsigned 1  PI_LOOP_MODE              0x1
///                                    ###
///                                    * Phase Interpolator Loop Control.
///                                    * 1: PI is in the PLL loop.
///                                    * 0: PI is out of the PLL loop
///                                    ###
///               %unsigned 1  SSC_CLK_EN                0x1
///                                    ###
///                                    * SSC Clock Enable.
///                                    * This selection enables the PI output clock for SSC digital logic.
///                                    ###
///               %unsigned 1  CLK_DET_EN                0x1
///                                    ###
///                                    * PI Output Clock Enable. This selection enables the PI output clock for the internal reset circuit
///                                    ###
///               %unsigned 1  RESET_PI                  0x0
///                                    ###
///                                    * External Interpolator Reset.
///                                    * 1: reset.
///                                    * 0: no reset.
///                                    ###
///               %unsigned 1  FREQ_OFFSET_EN            0x0
///                                    ###
///                                    * Frequency Offset Enable.
///                                    * 0: Disable
///                                    * 1: Enable.
///                                    ###
///               %%        10         # Stuffing bits...
///     # 0x0000C ctrl3                
///               %unsigned 17 FREQ_OFFSET               0x0
///                                    ###
///                                    * Frequency Offset Value
///                                    * Control.
///                                    * [16]: Sign-Bit.
///                                    * 0: Frequency down
///                                    * 1: Frequency up
///                                    * [15:0] : 1 LSB 1 ppm, upto 5%
///                                    * 1LSB=10e6/(4*128 *2048) ppm
///                                    * [16]=0--->Sign= 1
///                                    * [16]=1--->Sign= -1
///                                    * Fout = Fvco/ (1 + Sign* FREQ_OFFSET[15:0] *1LSB)
///                                    ###
///               %unsigned 1  FREQ_OFFSET_MODE_SEL      0x0
///                                    ###
///                                    * Frequency Offset Mode Select.
///                                    * 0: FREQ_OFFSET[16:0] is updated by FREQ_OFFSET_VALID
///                                    * 1: FREQ_OFFSET[16:0] is sampled by CK_DIV64_OUT
///                                    * (It has to be valid at the rising edge of CK_DIV64_OUT).
///                                    * Note: For special application only. Use FREQ_OFFSET_VALID to update FREQ_OFFSET[16:0] by default.
///                                    ###
///               %unsigned 1  FREQ_OFFSET_VALID         0x0
///                                    ###
///                                    * Frequency Offset Value Valid.
///                                    * Indicates that frequency offset value (FREQ_OFFSET[16:0]) is valid.
///                                    * Note:
///                                    * 1) A rising edge will trigger the frequency offset generation circuit to read in the FREQ_OFFSET [16:0] value. The pulse width has to be no less than 50 ns.
///                                    * 2) This signal is only needed when FREQ_OFFSET_MODE_SELECTION=0.
///                                    ###
///               %unsigned 1  SSC_MODE                  0x1
///                                    ###
///                                    * SSC Mode Select.
///                                    * 0: center spread
///                                    * 1: down spread.
///                                    ###
///               %%        12         # Stuffing bits...
///     # 0x00010 ctrl4                
///               %unsigned 16 SSC_FREQ_DIV              0x0
///                                    ###
///                                    * SSC Frequency Select.
///                                    ###
///               %unsigned 11 SSC_RNGE                  0x0
///                                    ###
///                                    * SSC Range Select. SSC_RNGE[10:0] = Desired SSC amplitude /(SSC_FREQ_DIV[14:0]*2^(-28)).
///                                    * Rounding to integer required.
///                                    ###
///               %unsigned 1  RESET_SSC                 0x0
///                                    ###
///                                    * SSC reset
///                                    * 0 : No reset
///                                    * 1 : Reset
///                                    ###
///               %unsigned 4  TEST_ANA                  0x0
///                                    ###
///                                    * Analog test point
///                                    ###
///     # 0x00014 ctrl5                
///               %unsigned 8  RESERVE_IN                0x0
///                                    ###
///                                    * Reserved input pins
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00018 status               (R-)
///               ###
///               * PLL status register
///               ###
///               %unsigned 1  PLL_LOCK                  
///                                    ###
///                                    * PLL Lock Detect.
///                                    * 1: PLL locked.
///                                    * 0: PLL not locked.
///                                    * Note:
///                                    * After PLL is powered up, wait for 50 us to check for the lock status.
///                                    * In normal operation, when PLL_LOCK signal is detected low, sample the signal again after 100 us to confirm the status.
///                                    * This signal is for testing purpose only, do not use it for any functional use.
///                                    ###
///               %unsigned 8  RESERVE_OUT               
///                                    ###
///                                    * Reserve Output Register pins.
///                                    ###
///               %%        23         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     151b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_PllReg
#define h_PllReg (){}

    #define     RA_PllReg_ctrl                                 0x0000

    #define     BA_PllReg_ctrl_PU                              0x0000
    #define     B16PllReg_ctrl_PU                              0x0000
    #define   LSb32PllReg_ctrl_PU                                 0
    #define   LSb16PllReg_ctrl_PU                                 0
    #define       bPllReg_ctrl_PU                              1
    #define   MSK32PllReg_ctrl_PU                                 0x00000001

    #define     BA_PllReg_ctrl_RESET                           0x0000
    #define     B16PllReg_ctrl_RESET                           0x0000
    #define   LSb32PllReg_ctrl_RESET                              1
    #define   LSb16PllReg_ctrl_RESET                              1
    #define       bPllReg_ctrl_RESET                           1
    #define   MSK32PllReg_ctrl_RESET                              0x00000002

    #define     BA_PllReg_ctrl_AVDD1815_SEL                    0x0000
    #define     B16PllReg_ctrl_AVDD1815_SEL                    0x0000
    #define   LSb32PllReg_ctrl_AVDD1815_SEL                       2
    #define   LSb16PllReg_ctrl_AVDD1815_SEL                       2
    #define       bPllReg_ctrl_AVDD1815_SEL                    1
    #define   MSK32PllReg_ctrl_AVDD1815_SEL                       0x00000004

    #define     BA_PllReg_ctrl_REFDIV                          0x0000
    #define     B16PllReg_ctrl_REFDIV                          0x0000
    #define   LSb32PllReg_ctrl_REFDIV                             3
    #define   LSb16PllReg_ctrl_REFDIV                             3
    #define       bPllReg_ctrl_REFDIV                          9
    #define   MSK32PllReg_ctrl_REFDIV                             0x00000FF8

    #define     BA_PllReg_ctrl_FBDIV                           0x0001
    #define     B16PllReg_ctrl_FBDIV                           0x0000
    #define   LSb32PllReg_ctrl_FBDIV                              12
    #define   LSb16PllReg_ctrl_FBDIV                              12
    #define       bPllReg_ctrl_FBDIV                           9
    #define   MSK32PllReg_ctrl_FBDIV                              0x001FF000

    #define     BA_PllReg_ctrl_VDDM                            0x0002
    #define     B16PllReg_ctrl_VDDM                            0x0002
    #define   LSb32PllReg_ctrl_VDDM                               21
    #define   LSb16PllReg_ctrl_VDDM                               5
    #define       bPllReg_ctrl_VDDM                            2
    #define   MSK32PllReg_ctrl_VDDM                               0x00600000

    #define     BA_PllReg_ctrl_VDDL                            0x0002
    #define     B16PllReg_ctrl_VDDL                            0x0002
    #define   LSb32PllReg_ctrl_VDDL                               23
    #define   LSb16PllReg_ctrl_VDDL                               7
    #define       bPllReg_ctrl_VDDL                            3
    #define   MSK32PllReg_ctrl_VDDL                               0x03800000

    #define     BA_PllReg_ctrl_ICP                             0x0003
    #define     B16PllReg_ctrl_ICP                             0x0002
    #define   LSb32PllReg_ctrl_ICP                                26
    #define   LSb16PllReg_ctrl_ICP                                10
    #define       bPllReg_ctrl_ICP                             4
    #define   MSK32PllReg_ctrl_ICP                                0x3C000000

    #define     BA_PllReg_ctrl_PLL_BW_REL                      0x0003
    #define     B16PllReg_ctrl_PLL_BW_REL                      0x0002
    #define   LSb32PllReg_ctrl_PLL_BW_REL                         30
    #define   LSb16PllReg_ctrl_PLL_BW_REL                         14
    #define       bPllReg_ctrl_PLL_BW_REL                      1
    #define   MSK32PllReg_ctrl_PLL_BW_REL                         0x40000000

    #define     RA_PllReg_ctrl1                                0x0004

    #define     BA_PllReg_ctrl_KVCO                            0x0004
    #define     B16PllReg_ctrl_KVCO                            0x0004
    #define   LSb32PllReg_ctrl_KVCO                               0
    #define   LSb16PllReg_ctrl_KVCO                               0
    #define       bPllReg_ctrl_KVCO                            4
    #define   MSK32PllReg_ctrl_KVCO                               0x0000000F

    #define     BA_PllReg_ctrl_CTUNE                           0x0004
    #define     B16PllReg_ctrl_CTUNE                           0x0004
    #define   LSb32PllReg_ctrl_CTUNE                              4
    #define   LSb16PllReg_ctrl_CTUNE                              4
    #define       bPllReg_ctrl_CTUNE                           2
    #define   MSK32PllReg_ctrl_CTUNE                              0x00000030

    #define     BA_PllReg_ctrl_CLKOUT_DIFF_DIV_SEL             0x0004
    #define     B16PllReg_ctrl_CLKOUT_DIFF_DIV_SEL             0x0004
    #define   LSb32PllReg_ctrl_CLKOUT_DIFF_DIV_SEL                6
    #define   LSb16PllReg_ctrl_CLKOUT_DIFF_DIV_SEL                6
    #define       bPllReg_ctrl_CLKOUT_DIFF_DIV_SEL             9
    #define   MSK32PllReg_ctrl_CLKOUT_DIFF_DIV_SEL                0x00007FC0

    #define     BA_PllReg_ctrl_CLKOUT_SE_DIV_SEL               0x0005
    #define     B16PllReg_ctrl_CLKOUT_SE_DIV_SEL               0x0004
    #define   LSb32PllReg_ctrl_CLKOUT_SE_DIV_SEL                  15
    #define   LSb16PllReg_ctrl_CLKOUT_SE_DIV_SEL                  15
    #define       bPllReg_ctrl_CLKOUT_SE_DIV_SEL               9
    #define   MSK32PllReg_ctrl_CLKOUT_SE_DIV_SEL                  0x00FF8000

    #define     BA_PllReg_ctrl_CLKOUT_SOURCE_SEL               0x0007
    #define     B16PllReg_ctrl_CLKOUT_SOURCE_SEL               0x0006
    #define   LSb32PllReg_ctrl_CLKOUT_SOURCE_SEL                  24
    #define   LSb16PllReg_ctrl_CLKOUT_SOURCE_SEL                  8
    #define       bPllReg_ctrl_CLKOUT_SOURCE_SEL               1
    #define   MSK32PllReg_ctrl_CLKOUT_SOURCE_SEL                  0x01000000

    #define     BA_PllReg_ctrl_CLKOUT_DIFF_EN                  0x0007
    #define     B16PllReg_ctrl_CLKOUT_DIFF_EN                  0x0006
    #define   LSb32PllReg_ctrl_CLKOUT_DIFF_EN                     25
    #define   LSb16PllReg_ctrl_CLKOUT_DIFF_EN                     9
    #define       bPllReg_ctrl_CLKOUT_DIFF_EN                  1
    #define   MSK32PllReg_ctrl_CLKOUT_DIFF_EN                     0x02000000

    #define     BA_PllReg_ctrl_BYPASS_EN                       0x0007
    #define     B16PllReg_ctrl_BYPASS_EN                       0x0006
    #define   LSb32PllReg_ctrl_BYPASS_EN                          26
    #define   LSb16PllReg_ctrl_BYPASS_EN                          10
    #define       bPllReg_ctrl_BYPASS_EN                       1
    #define   MSK32PllReg_ctrl_BYPASS_EN                          0x04000000

    #define     BA_PllReg_ctrl_CLKOUT_SE_GATING_EN             0x0007
    #define     B16PllReg_ctrl_CLKOUT_SE_GATING_EN             0x0006
    #define   LSb32PllReg_ctrl_CLKOUT_SE_GATING_EN                27
    #define   LSb16PllReg_ctrl_CLKOUT_SE_GATING_EN                11
    #define       bPllReg_ctrl_CLKOUT_SE_GATING_EN             1
    #define   MSK32PllReg_ctrl_CLKOUT_SE_GATING_EN                0x08000000

    #define     BA_PllReg_ctrl_FBCLK_EXT_SEL                   0x0007
    #define     B16PllReg_ctrl_FBCLK_EXT_SEL                   0x0006
    #define   LSb32PllReg_ctrl_FBCLK_EXT_SEL                      28
    #define   LSb16PllReg_ctrl_FBCLK_EXT_SEL                      12
    #define       bPllReg_ctrl_FBCLK_EXT_SEL                   1
    #define   MSK32PllReg_ctrl_FBCLK_EXT_SEL                      0x10000000

    #define     RA_PllReg_ctrl2                                0x0008

    #define     BA_PllReg_ctrl_FBCDLY                          0x0008
    #define     B16PllReg_ctrl_FBCDLY                          0x0008
    #define   LSb32PllReg_ctrl_FBCDLY                             0
    #define   LSb16PllReg_ctrl_FBCDLY                             0
    #define       bPllReg_ctrl_FBCDLY                          6
    #define   MSK32PllReg_ctrl_FBCDLY                             0x0000003F

    #define     BA_PllReg_ctrl_FD                              0x0008
    #define     B16PllReg_ctrl_FD                              0x0008
    #define   LSb32PllReg_ctrl_FD                                 6
    #define   LSb16PllReg_ctrl_FD                                 6
    #define       bPllReg_ctrl_FD                              3
    #define   MSK32PllReg_ctrl_FD                                 0x000001C0

    #define     BA_PllReg_ctrl_INTPI                           0x0009
    #define     B16PllReg_ctrl_INTPI                           0x0008
    #define   LSb32PllReg_ctrl_INTPI                              9
    #define   LSb16PllReg_ctrl_INTPI                              9
    #define       bPllReg_ctrl_INTPI                           4
    #define   MSK32PllReg_ctrl_INTPI                              0x00001E00

    #define     BA_PllReg_ctrl_INTPR                           0x0009
    #define     B16PllReg_ctrl_INTPR                           0x0008
    #define   LSb32PllReg_ctrl_INTPR                              13
    #define   LSb16PllReg_ctrl_INTPR                              13
    #define       bPllReg_ctrl_INTPR                           3
    #define   MSK32PllReg_ctrl_INTPR                              0x0000E000

    #define     BA_PllReg_ctrl_PI_EN                           0x000A
    #define     B16PllReg_ctrl_PI_EN                           0x000A
    #define   LSb32PllReg_ctrl_PI_EN                              16
    #define   LSb16PllReg_ctrl_PI_EN                              0
    #define       bPllReg_ctrl_PI_EN                           1
    #define   MSK32PllReg_ctrl_PI_EN                              0x00010000

    #define     BA_PllReg_ctrl_PI_LOOP_MODE                    0x000A
    #define     B16PllReg_ctrl_PI_LOOP_MODE                    0x000A
    #define   LSb32PllReg_ctrl_PI_LOOP_MODE                       17
    #define   LSb16PllReg_ctrl_PI_LOOP_MODE                       1
    #define       bPllReg_ctrl_PI_LOOP_MODE                    1
    #define   MSK32PllReg_ctrl_PI_LOOP_MODE                       0x00020000

    #define     BA_PllReg_ctrl_SSC_CLK_EN                      0x000A
    #define     B16PllReg_ctrl_SSC_CLK_EN                      0x000A
    #define   LSb32PllReg_ctrl_SSC_CLK_EN                         18
    #define   LSb16PllReg_ctrl_SSC_CLK_EN                         2
    #define       bPllReg_ctrl_SSC_CLK_EN                      1
    #define   MSK32PllReg_ctrl_SSC_CLK_EN                         0x00040000

    #define     BA_PllReg_ctrl_CLK_DET_EN                      0x000A
    #define     B16PllReg_ctrl_CLK_DET_EN                      0x000A
    #define   LSb32PllReg_ctrl_CLK_DET_EN                         19
    #define   LSb16PllReg_ctrl_CLK_DET_EN                         3
    #define       bPllReg_ctrl_CLK_DET_EN                      1
    #define   MSK32PllReg_ctrl_CLK_DET_EN                         0x00080000

    #define     BA_PllReg_ctrl_RESET_PI                        0x000A
    #define     B16PllReg_ctrl_RESET_PI                        0x000A
    #define   LSb32PllReg_ctrl_RESET_PI                           20
    #define   LSb16PllReg_ctrl_RESET_PI                           4
    #define       bPllReg_ctrl_RESET_PI                        1
    #define   MSK32PllReg_ctrl_RESET_PI                           0x00100000

    #define     BA_PllReg_ctrl_FREQ_OFFSET_EN                  0x000A
    #define     B16PllReg_ctrl_FREQ_OFFSET_EN                  0x000A
    #define   LSb32PllReg_ctrl_FREQ_OFFSET_EN                     21
    #define   LSb16PllReg_ctrl_FREQ_OFFSET_EN                     5
    #define       bPllReg_ctrl_FREQ_OFFSET_EN                  1
    #define   MSK32PllReg_ctrl_FREQ_OFFSET_EN                     0x00200000

    #define     RA_PllReg_ctrl3                                0x000C

    #define     BA_PllReg_ctrl_FREQ_OFFSET                     0x000C
    #define     B16PllReg_ctrl_FREQ_OFFSET                     0x000C
    #define   LSb32PllReg_ctrl_FREQ_OFFSET                        0
    #define   LSb16PllReg_ctrl_FREQ_OFFSET                        0
    #define       bPllReg_ctrl_FREQ_OFFSET                     17
    #define   MSK32PllReg_ctrl_FREQ_OFFSET                        0x0001FFFF

    #define     BA_PllReg_ctrl_FREQ_OFFSET_MODE_SEL            0x000E
    #define     B16PllReg_ctrl_FREQ_OFFSET_MODE_SEL            0x000E
    #define   LSb32PllReg_ctrl_FREQ_OFFSET_MODE_SEL               17
    #define   LSb16PllReg_ctrl_FREQ_OFFSET_MODE_SEL               1
    #define       bPllReg_ctrl_FREQ_OFFSET_MODE_SEL            1
    #define   MSK32PllReg_ctrl_FREQ_OFFSET_MODE_SEL               0x00020000

    #define     BA_PllReg_ctrl_FREQ_OFFSET_VALID               0x000E
    #define     B16PllReg_ctrl_FREQ_OFFSET_VALID               0x000E
    #define   LSb32PllReg_ctrl_FREQ_OFFSET_VALID                  18
    #define   LSb16PllReg_ctrl_FREQ_OFFSET_VALID                  2
    #define       bPllReg_ctrl_FREQ_OFFSET_VALID               1
    #define   MSK32PllReg_ctrl_FREQ_OFFSET_VALID                  0x00040000

    #define     BA_PllReg_ctrl_SSC_MODE                        0x000E
    #define     B16PllReg_ctrl_SSC_MODE                        0x000E
    #define   LSb32PllReg_ctrl_SSC_MODE                           19
    #define   LSb16PllReg_ctrl_SSC_MODE                           3
    #define       bPllReg_ctrl_SSC_MODE                        1
    #define   MSK32PllReg_ctrl_SSC_MODE                           0x00080000

    #define     RA_PllReg_ctrl4                                0x0010

    #define     BA_PllReg_ctrl_SSC_FREQ_DIV                    0x0010
    #define     B16PllReg_ctrl_SSC_FREQ_DIV                    0x0010
    #define   LSb32PllReg_ctrl_SSC_FREQ_DIV                       0
    #define   LSb16PllReg_ctrl_SSC_FREQ_DIV                       0
    #define       bPllReg_ctrl_SSC_FREQ_DIV                    16
    #define   MSK32PllReg_ctrl_SSC_FREQ_DIV                       0x0000FFFF

    #define     BA_PllReg_ctrl_SSC_RNGE                        0x0012
    #define     B16PllReg_ctrl_SSC_RNGE                        0x0012
    #define   LSb32PllReg_ctrl_SSC_RNGE                           16
    #define   LSb16PllReg_ctrl_SSC_RNGE                           0
    #define       bPllReg_ctrl_SSC_RNGE                        11
    #define   MSK32PllReg_ctrl_SSC_RNGE                           0x07FF0000

    #define     BA_PllReg_ctrl_RESET_SSC                       0x0013
    #define     B16PllReg_ctrl_RESET_SSC                       0x0012
    #define   LSb32PllReg_ctrl_RESET_SSC                          27
    #define   LSb16PllReg_ctrl_RESET_SSC                          11
    #define       bPllReg_ctrl_RESET_SSC                       1
    #define   MSK32PllReg_ctrl_RESET_SSC                          0x08000000

    #define     BA_PllReg_ctrl_TEST_ANA                        0x0013
    #define     B16PllReg_ctrl_TEST_ANA                        0x0012
    #define   LSb32PllReg_ctrl_TEST_ANA                           28
    #define   LSb16PllReg_ctrl_TEST_ANA                           12
    #define       bPllReg_ctrl_TEST_ANA                        4
    #define   MSK32PllReg_ctrl_TEST_ANA                           0xF0000000

    #define     RA_PllReg_ctrl5                                0x0014

    #define     BA_PllReg_ctrl_RESERVE_IN                      0x0014
    #define     B16PllReg_ctrl_RESERVE_IN                      0x0014
    #define   LSb32PllReg_ctrl_RESERVE_IN                         0
    #define   LSb16PllReg_ctrl_RESERVE_IN                         0
    #define       bPllReg_ctrl_RESERVE_IN                      8
    #define   MSK32PllReg_ctrl_RESERVE_IN                         0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_PllReg_status                               0x0018

    #define     BA_PllReg_status_PLL_LOCK                      0x0018
    #define     B16PllReg_status_PLL_LOCK                      0x0018
    #define   LSb32PllReg_status_PLL_LOCK                         0
    #define   LSb16PllReg_status_PLL_LOCK                         0
    #define       bPllReg_status_PLL_LOCK                      1
    #define   MSK32PllReg_status_PLL_LOCK                         0x00000001

    #define     BA_PllReg_status_RESERVE_OUT                   0x0018
    #define     B16PllReg_status_RESERVE_OUT                   0x0018
    #define   LSb32PllReg_status_RESERVE_OUT                      1
    #define   LSb16PllReg_status_RESERVE_OUT                      1
    #define       bPllReg_status_RESERVE_OUT                   8
    #define   MSK32PllReg_status_RESERVE_OUT                      0x000001FE
    ///////////////////////////////////////////////////////////

    typedef struct SIE_PllReg {
    ///////////////////////////////////////////////////////////
    #define   GET32PllReg_ctrl_PU(r32)                         _BFGET_(r32, 0, 0)
    #define   SET32PllReg_ctrl_PU(r32,v)                       _BFSET_(r32, 0, 0,v)
    #define   GET16PllReg_ctrl_PU(r16)                         _BFGET_(r16, 0, 0)
    #define   SET16PllReg_ctrl_PU(r16,v)                       _BFSET_(r16, 0, 0,v)

    #define   GET32PllReg_ctrl_RESET(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32PllReg_ctrl_RESET(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16PllReg_ctrl_RESET(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16PllReg_ctrl_RESET(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32PllReg_ctrl_AVDD1815_SEL(r32)               _BFGET_(r32, 2, 2)
    #define   SET32PllReg_ctrl_AVDD1815_SEL(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16PllReg_ctrl_AVDD1815_SEL(r16)               _BFGET_(r16, 2, 2)
    #define   SET16PllReg_ctrl_AVDD1815_SEL(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32PllReg_ctrl_REFDIV(r32)                     _BFGET_(r32,11, 3)
    #define   SET32PllReg_ctrl_REFDIV(r32,v)                   _BFSET_(r32,11, 3,v)
    #define   GET16PllReg_ctrl_REFDIV(r16)                     _BFGET_(r16,11, 3)
    #define   SET16PllReg_ctrl_REFDIV(r16,v)                   _BFSET_(r16,11, 3,v)

    #define   GET32PllReg_ctrl_FBDIV(r32)                      _BFGET_(r32,20,12)
    #define   SET32PllReg_ctrl_FBDIV(r32,v)                    _BFSET_(r32,20,12,v)

    #define   GET32PllReg_ctrl_VDDM(r32)                       _BFGET_(r32,22,21)
    #define   SET32PllReg_ctrl_VDDM(r32,v)                     _BFSET_(r32,22,21,v)
    #define   GET16PllReg_ctrl_VDDM(r16)                       _BFGET_(r16, 6, 5)
    #define   SET16PllReg_ctrl_VDDM(r16,v)                     _BFSET_(r16, 6, 5,v)

    #define   GET32PllReg_ctrl_VDDL(r32)                       _BFGET_(r32,25,23)
    #define   SET32PllReg_ctrl_VDDL(r32,v)                     _BFSET_(r32,25,23,v)
    #define   GET16PllReg_ctrl_VDDL(r16)                       _BFGET_(r16, 9, 7)
    #define   SET16PllReg_ctrl_VDDL(r16,v)                     _BFSET_(r16, 9, 7,v)

    #define   GET32PllReg_ctrl_ICP(r32)                        _BFGET_(r32,29,26)
    #define   SET32PllReg_ctrl_ICP(r32,v)                      _BFSET_(r32,29,26,v)
    #define   GET16PllReg_ctrl_ICP(r16)                        _BFGET_(r16,13,10)
    #define   SET16PllReg_ctrl_ICP(r16,v)                      _BFSET_(r16,13,10,v)

    #define   GET32PllReg_ctrl_PLL_BW_REL(r32)                 _BFGET_(r32,30,30)
    #define   SET32PllReg_ctrl_PLL_BW_REL(r32,v)               _BFSET_(r32,30,30,v)
    #define   GET16PllReg_ctrl_PLL_BW_REL(r16)                 _BFGET_(r16,14,14)
    #define   SET16PllReg_ctrl_PLL_BW_REL(r16,v)               _BFSET_(r16,14,14,v)

    #define     w32PllReg_ctrl                                 {\
            UNSG32 uctrl_PU                                    :  1;\
            UNSG32 uctrl_RESET                                 :  1;\
            UNSG32 uctrl_AVDD1815_SEL                          :  1;\
            UNSG32 uctrl_REFDIV                                :  9;\
            UNSG32 uctrl_FBDIV                                 :  9;\
            UNSG32 uctrl_VDDM                                  :  2;\
            UNSG32 uctrl_VDDL                                  :  3;\
            UNSG32 uctrl_ICP                                   :  4;\
            UNSG32 uctrl_PLL_BW_REL                            :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32PllReg_ctrl;
            struct w32PllReg_ctrl;
          };
    #define   GET32PllReg_ctrl_KVCO(r32)                       _BFGET_(r32, 3, 0)
    #define   SET32PllReg_ctrl_KVCO(r32,v)                     _BFSET_(r32, 3, 0,v)
    #define   GET16PllReg_ctrl_KVCO(r16)                       _BFGET_(r16, 3, 0)
    #define   SET16PllReg_ctrl_KVCO(r16,v)                     _BFSET_(r16, 3, 0,v)

    #define   GET32PllReg_ctrl_CTUNE(r32)                      _BFGET_(r32, 5, 4)
    #define   SET32PllReg_ctrl_CTUNE(r32,v)                    _BFSET_(r32, 5, 4,v)
    #define   GET16PllReg_ctrl_CTUNE(r16)                      _BFGET_(r16, 5, 4)
    #define   SET16PllReg_ctrl_CTUNE(r16,v)                    _BFSET_(r16, 5, 4,v)

    #define   GET32PllReg_ctrl_CLKOUT_DIFF_DIV_SEL(r32)        _BFGET_(r32,14, 6)
    #define   SET32PllReg_ctrl_CLKOUT_DIFF_DIV_SEL(r32,v)      _BFSET_(r32,14, 6,v)
    #define   GET16PllReg_ctrl_CLKOUT_DIFF_DIV_SEL(r16)        _BFGET_(r16,14, 6)
    #define   SET16PllReg_ctrl_CLKOUT_DIFF_DIV_SEL(r16,v)      _BFSET_(r16,14, 6,v)

    #define   GET32PllReg_ctrl_CLKOUT_SE_DIV_SEL(r32)          _BFGET_(r32,23,15)
    #define   SET32PllReg_ctrl_CLKOUT_SE_DIV_SEL(r32,v)        _BFSET_(r32,23,15,v)

    #define   GET32PllReg_ctrl_CLKOUT_SOURCE_SEL(r32)          _BFGET_(r32,24,24)
    #define   SET32PllReg_ctrl_CLKOUT_SOURCE_SEL(r32,v)        _BFSET_(r32,24,24,v)
    #define   GET16PllReg_ctrl_CLKOUT_SOURCE_SEL(r16)          _BFGET_(r16, 8, 8)
    #define   SET16PllReg_ctrl_CLKOUT_SOURCE_SEL(r16,v)        _BFSET_(r16, 8, 8,v)

    #define   GET32PllReg_ctrl_CLKOUT_DIFF_EN(r32)             _BFGET_(r32,25,25)
    #define   SET32PllReg_ctrl_CLKOUT_DIFF_EN(r32,v)           _BFSET_(r32,25,25,v)
    #define   GET16PllReg_ctrl_CLKOUT_DIFF_EN(r16)             _BFGET_(r16, 9, 9)
    #define   SET16PllReg_ctrl_CLKOUT_DIFF_EN(r16,v)           _BFSET_(r16, 9, 9,v)

    #define   GET32PllReg_ctrl_BYPASS_EN(r32)                  _BFGET_(r32,26,26)
    #define   SET32PllReg_ctrl_BYPASS_EN(r32,v)                _BFSET_(r32,26,26,v)
    #define   GET16PllReg_ctrl_BYPASS_EN(r16)                  _BFGET_(r16,10,10)
    #define   SET16PllReg_ctrl_BYPASS_EN(r16,v)                _BFSET_(r16,10,10,v)

    #define   GET32PllReg_ctrl_CLKOUT_SE_GATING_EN(r32)        _BFGET_(r32,27,27)
    #define   SET32PllReg_ctrl_CLKOUT_SE_GATING_EN(r32,v)      _BFSET_(r32,27,27,v)
    #define   GET16PllReg_ctrl_CLKOUT_SE_GATING_EN(r16)        _BFGET_(r16,11,11)
    #define   SET16PllReg_ctrl_CLKOUT_SE_GATING_EN(r16,v)      _BFSET_(r16,11,11,v)

    #define   GET32PllReg_ctrl_FBCLK_EXT_SEL(r32)              _BFGET_(r32,28,28)
    #define   SET32PllReg_ctrl_FBCLK_EXT_SEL(r32,v)            _BFSET_(r32,28,28,v)
    #define   GET16PllReg_ctrl_FBCLK_EXT_SEL(r16)              _BFGET_(r16,12,12)
    #define   SET16PllReg_ctrl_FBCLK_EXT_SEL(r16,v)            _BFSET_(r16,12,12,v)

    #define     w32PllReg_ctrl1                                {\
            UNSG32 uctrl_KVCO                                  :  4;\
            UNSG32 uctrl_CTUNE                                 :  2;\
            UNSG32 uctrl_CLKOUT_DIFF_DIV_SEL                   :  9;\
            UNSG32 uctrl_CLKOUT_SE_DIV_SEL                     :  9;\
            UNSG32 uctrl_CLKOUT_SOURCE_SEL                     :  1;\
            UNSG32 uctrl_CLKOUT_DIFF_EN                        :  1;\
            UNSG32 uctrl_BYPASS_EN                             :  1;\
            UNSG32 uctrl_CLKOUT_SE_GATING_EN                   :  1;\
            UNSG32 uctrl_FBCLK_EXT_SEL                         :  1;\
            UNSG32 RSVDx4_b29                                  :  3;\
          }
    union { UNSG32 u32PllReg_ctrl1;
            struct w32PllReg_ctrl1;
          };
    #define   GET32PllReg_ctrl_FBCDLY(r32)                     _BFGET_(r32, 5, 0)
    #define   SET32PllReg_ctrl_FBCDLY(r32,v)                   _BFSET_(r32, 5, 0,v)
    #define   GET16PllReg_ctrl_FBCDLY(r16)                     _BFGET_(r16, 5, 0)
    #define   SET16PllReg_ctrl_FBCDLY(r16,v)                   _BFSET_(r16, 5, 0,v)

    #define   GET32PllReg_ctrl_FD(r32)                         _BFGET_(r32, 8, 6)
    #define   SET32PllReg_ctrl_FD(r32,v)                       _BFSET_(r32, 8, 6,v)
    #define   GET16PllReg_ctrl_FD(r16)                         _BFGET_(r16, 8, 6)
    #define   SET16PllReg_ctrl_FD(r16,v)                       _BFSET_(r16, 8, 6,v)

    #define   GET32PllReg_ctrl_INTPI(r32)                      _BFGET_(r32,12, 9)
    #define   SET32PllReg_ctrl_INTPI(r32,v)                    _BFSET_(r32,12, 9,v)
    #define   GET16PllReg_ctrl_INTPI(r16)                      _BFGET_(r16,12, 9)
    #define   SET16PllReg_ctrl_INTPI(r16,v)                    _BFSET_(r16,12, 9,v)

    #define   GET32PllReg_ctrl_INTPR(r32)                      _BFGET_(r32,15,13)
    #define   SET32PllReg_ctrl_INTPR(r32,v)                    _BFSET_(r32,15,13,v)
    #define   GET16PllReg_ctrl_INTPR(r16)                      _BFGET_(r16,15,13)
    #define   SET16PllReg_ctrl_INTPR(r16,v)                    _BFSET_(r16,15,13,v)

    #define   GET32PllReg_ctrl_PI_EN(r32)                      _BFGET_(r32,16,16)
    #define   SET32PllReg_ctrl_PI_EN(r32,v)                    _BFSET_(r32,16,16,v)
    #define   GET16PllReg_ctrl_PI_EN(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16PllReg_ctrl_PI_EN(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32PllReg_ctrl_PI_LOOP_MODE(r32)               _BFGET_(r32,17,17)
    #define   SET32PllReg_ctrl_PI_LOOP_MODE(r32,v)             _BFSET_(r32,17,17,v)
    #define   GET16PllReg_ctrl_PI_LOOP_MODE(r16)               _BFGET_(r16, 1, 1)
    #define   SET16PllReg_ctrl_PI_LOOP_MODE(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32PllReg_ctrl_SSC_CLK_EN(r32)                 _BFGET_(r32,18,18)
    #define   SET32PllReg_ctrl_SSC_CLK_EN(r32,v)               _BFSET_(r32,18,18,v)
    #define   GET16PllReg_ctrl_SSC_CLK_EN(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16PllReg_ctrl_SSC_CLK_EN(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32PllReg_ctrl_CLK_DET_EN(r32)                 _BFGET_(r32,19,19)
    #define   SET32PllReg_ctrl_CLK_DET_EN(r32,v)               _BFSET_(r32,19,19,v)
    #define   GET16PllReg_ctrl_CLK_DET_EN(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16PllReg_ctrl_CLK_DET_EN(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32PllReg_ctrl_RESET_PI(r32)                   _BFGET_(r32,20,20)
    #define   SET32PllReg_ctrl_RESET_PI(r32,v)                 _BFSET_(r32,20,20,v)
    #define   GET16PllReg_ctrl_RESET_PI(r16)                   _BFGET_(r16, 4, 4)
    #define   SET16PllReg_ctrl_RESET_PI(r16,v)                 _BFSET_(r16, 4, 4,v)

    #define   GET32PllReg_ctrl_FREQ_OFFSET_EN(r32)             _BFGET_(r32,21,21)
    #define   SET32PllReg_ctrl_FREQ_OFFSET_EN(r32,v)           _BFSET_(r32,21,21,v)
    #define   GET16PllReg_ctrl_FREQ_OFFSET_EN(r16)             _BFGET_(r16, 5, 5)
    #define   SET16PllReg_ctrl_FREQ_OFFSET_EN(r16,v)           _BFSET_(r16, 5, 5,v)

    #define     w32PllReg_ctrl2                                {\
            UNSG32 uctrl_FBCDLY                                :  6;\
            UNSG32 uctrl_FD                                    :  3;\
            UNSG32 uctrl_INTPI                                 :  4;\
            UNSG32 uctrl_INTPR                                 :  3;\
            UNSG32 uctrl_PI_EN                                 :  1;\
            UNSG32 uctrl_PI_LOOP_MODE                          :  1;\
            UNSG32 uctrl_SSC_CLK_EN                            :  1;\
            UNSG32 uctrl_CLK_DET_EN                            :  1;\
            UNSG32 uctrl_RESET_PI                              :  1;\
            UNSG32 uctrl_FREQ_OFFSET_EN                        :  1;\
            UNSG32 RSVDx8_b22                                  : 10;\
          }
    union { UNSG32 u32PllReg_ctrl2;
            struct w32PllReg_ctrl2;
          };
    #define   GET32PllReg_ctrl_FREQ_OFFSET(r32)                _BFGET_(r32,16, 0)
    #define   SET32PllReg_ctrl_FREQ_OFFSET(r32,v)              _BFSET_(r32,16, 0,v)

    #define   GET32PllReg_ctrl_FREQ_OFFSET_MODE_SEL(r32)       _BFGET_(r32,17,17)
    #define   SET32PllReg_ctrl_FREQ_OFFSET_MODE_SEL(r32,v)     _BFSET_(r32,17,17,v)
    #define   GET16PllReg_ctrl_FREQ_OFFSET_MODE_SEL(r16)       _BFGET_(r16, 1, 1)
    #define   SET16PllReg_ctrl_FREQ_OFFSET_MODE_SEL(r16,v)     _BFSET_(r16, 1, 1,v)

    #define   GET32PllReg_ctrl_FREQ_OFFSET_VALID(r32)          _BFGET_(r32,18,18)
    #define   SET32PllReg_ctrl_FREQ_OFFSET_VALID(r32,v)        _BFSET_(r32,18,18,v)
    #define   GET16PllReg_ctrl_FREQ_OFFSET_VALID(r16)          _BFGET_(r16, 2, 2)
    #define   SET16PllReg_ctrl_FREQ_OFFSET_VALID(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32PllReg_ctrl_SSC_MODE(r32)                   _BFGET_(r32,19,19)
    #define   SET32PllReg_ctrl_SSC_MODE(r32,v)                 _BFSET_(r32,19,19,v)
    #define   GET16PllReg_ctrl_SSC_MODE(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16PllReg_ctrl_SSC_MODE(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define     w32PllReg_ctrl3                                {\
            UNSG32 uctrl_FREQ_OFFSET                           : 17;\
            UNSG32 uctrl_FREQ_OFFSET_MODE_SEL                  :  1;\
            UNSG32 uctrl_FREQ_OFFSET_VALID                     :  1;\
            UNSG32 uctrl_SSC_MODE                              :  1;\
            UNSG32 RSVDxC_b20                                  : 12;\
          }
    union { UNSG32 u32PllReg_ctrl3;
            struct w32PllReg_ctrl3;
          };
    #define   GET32PllReg_ctrl_SSC_FREQ_DIV(r32)               _BFGET_(r32,15, 0)
    #define   SET32PllReg_ctrl_SSC_FREQ_DIV(r32,v)             _BFSET_(r32,15, 0,v)
    #define   GET16PllReg_ctrl_SSC_FREQ_DIV(r16)               _BFGET_(r16,15, 0)
    #define   SET16PllReg_ctrl_SSC_FREQ_DIV(r16,v)             _BFSET_(r16,15, 0,v)

    #define   GET32PllReg_ctrl_SSC_RNGE(r32)                   _BFGET_(r32,26,16)
    #define   SET32PllReg_ctrl_SSC_RNGE(r32,v)                 _BFSET_(r32,26,16,v)
    #define   GET16PllReg_ctrl_SSC_RNGE(r16)                   _BFGET_(r16,10, 0)
    #define   SET16PllReg_ctrl_SSC_RNGE(r16,v)                 _BFSET_(r16,10, 0,v)

    #define   GET32PllReg_ctrl_RESET_SSC(r32)                  _BFGET_(r32,27,27)
    #define   SET32PllReg_ctrl_RESET_SSC(r32,v)                _BFSET_(r32,27,27,v)
    #define   GET16PllReg_ctrl_RESET_SSC(r16)                  _BFGET_(r16,11,11)
    #define   SET16PllReg_ctrl_RESET_SSC(r16,v)                _BFSET_(r16,11,11,v)

    #define   GET32PllReg_ctrl_TEST_ANA(r32)                   _BFGET_(r32,31,28)
    #define   SET32PllReg_ctrl_TEST_ANA(r32,v)                 _BFSET_(r32,31,28,v)
    #define   GET16PllReg_ctrl_TEST_ANA(r16)                   _BFGET_(r16,15,12)
    #define   SET16PllReg_ctrl_TEST_ANA(r16,v)                 _BFSET_(r16,15,12,v)

    #define     w32PllReg_ctrl4                                {\
            UNSG32 uctrl_SSC_FREQ_DIV                          : 16;\
            UNSG32 uctrl_SSC_RNGE                              : 11;\
            UNSG32 uctrl_RESET_SSC                             :  1;\
            UNSG32 uctrl_TEST_ANA                              :  4;\
          }
    union { UNSG32 u32PllReg_ctrl4;
            struct w32PllReg_ctrl4;
          };
    #define   GET32PllReg_ctrl_RESERVE_IN(r32)                 _BFGET_(r32, 7, 0)
    #define   SET32PllReg_ctrl_RESERVE_IN(r32,v)               _BFSET_(r32, 7, 0,v)
    #define   GET16PllReg_ctrl_RESERVE_IN(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16PllReg_ctrl_RESERVE_IN(r16,v)               _BFSET_(r16, 7, 0,v)

    #define     w32PllReg_ctrl5                                {\
            UNSG32 uctrl_RESERVE_IN                            :  8;\
            UNSG32 RSVDx14_b8                                  : 24;\
          }
    union { UNSG32 u32PllReg_ctrl5;
            struct w32PllReg_ctrl5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PllReg_status_PLL_LOCK(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32PllReg_status_PLL_LOCK(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16PllReg_status_PLL_LOCK(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16PllReg_status_PLL_LOCK(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32PllReg_status_RESERVE_OUT(r32)              _BFGET_(r32, 8, 1)
    #define   SET32PllReg_status_RESERVE_OUT(r32,v)            _BFSET_(r32, 8, 1,v)
    #define   GET16PllReg_status_RESERVE_OUT(r16)              _BFGET_(r16, 8, 1)
    #define   SET16PllReg_status_RESERVE_OUT(r16,v)            _BFSET_(r16, 8, 1,v)

    #define     w32PllReg_status                               {\
            UNSG32 ustatus_PLL_LOCK                            :  1;\
            UNSG32 ustatus_RESERVE_OUT                         :  8;\
            UNSG32 RSVDx18_b9                                  : 23;\
          }
    union { UNSG32 u32PllReg_status;
            struct w32PllReg_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_PllReg;

    typedef union  T32PllReg_ctrl
          { UNSG32 u32;
            struct w32PllReg_ctrl;
                 } T32PllReg_ctrl;
    typedef union  T32PllReg_ctrl1
          { UNSG32 u32;
            struct w32PllReg_ctrl1;
                 } T32PllReg_ctrl1;
    typedef union  T32PllReg_ctrl2
          { UNSG32 u32;
            struct w32PllReg_ctrl2;
                 } T32PllReg_ctrl2;
    typedef union  T32PllReg_ctrl3
          { UNSG32 u32;
            struct w32PllReg_ctrl3;
                 } T32PllReg_ctrl3;
    typedef union  T32PllReg_ctrl4
          { UNSG32 u32;
            struct w32PllReg_ctrl4;
                 } T32PllReg_ctrl4;
    typedef union  T32PllReg_ctrl5
          { UNSG32 u32;
            struct w32PllReg_ctrl5;
                 } T32PllReg_ctrl5;
    typedef union  T32PllReg_status
          { UNSG32 u32;
            struct w32PllReg_status;
                 } T32PllReg_status;
    ///////////////////////////////////////////////////////////

    typedef union  TPllReg_ctrl
          { UNSG32 u32[6];
            struct {
            struct w32PllReg_ctrl;
            struct w32PllReg_ctrl1;
            struct w32PllReg_ctrl2;
            struct w32PllReg_ctrl3;
            struct w32PllReg_ctrl4;
            struct w32PllReg_ctrl5;
                   };
                 } TPllReg_ctrl;
    typedef union  TPllReg_status
          { UNSG32 u32[1];
            struct {
            struct w32PllReg_status;
                   };
                 } TPllReg_status;

    ///////////////////////////////////////////////////////////
     SIGN32 PllReg_drvrd(SIE_PllReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 PllReg_drvwr(SIE_PllReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void PllReg_reset(SIE_PllReg *p);
     SIGN32 PllReg_cmp  (SIE_PllReg *p, SIE_PllReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define PllReg_check(p,pie,pfx,hLOG) PllReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define PllReg_print(p,    pfx,hLOG) PllReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: PllReg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AVSReg                                   (4,4)
///     ###
///     * All the controls for Adaptive Voltage Scaling (AVS)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P)
///               ###
///               * AVS Control Register 0
///               ###
///               %unsigned 1  avs_porst_rst_in          0x0
///                                    ###
///                                    * Reset signal for analog part.
///                                    * 0: Not Asserted
///                                    * 1: Asserted
///                                    ###
///               %unsigned 1  min_max_val_rst           0x0
///                                    ###
///                                    * Reset value for the following signals:
///                                    * max_dro_count, min_dro_count, max_avs_delta, max_avs_delta.
///                                    * 0: Normal operation
///                                    * 1: Reset the above signals
///                                    ###
///               %unsigned 1  en_avdd_det               0x0
///                                    ###
///                                    * Enable the detection of AVDD power down. When enabled, the AVS will be disabled once AVDD drops below a present threshold.
///                                    * 0: avdd power down detection is disabled
///                                    * 1: avdd power down detection is enabled.
///                                    ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Enable the AVS mechanism
///                                    * 0: vddfb = vdd
///                                    * 1: AVS is on
///                                    ###
///               %unsigned 1  avs_pause                 0x0
///                                    ###
///                                    * Causes AVS to “pause”
///                                    * 0: Normal operation mode
///                                    * 1: Keep last avs_delta values. vddfb follow vdd level + delta level.
///                                    ###
///               %unsigned 1  manual                    0x0
///                                    ###
///                                    * Manual setting of delta voltage (open loop control)
///                                    * 0: Auto operation
///                                    * 1: Manual operation
///                                    ###
///               %unsigned 8  manual_delta              0x80
///                                    ###
///                                    * Manual setting for delta voltage
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               ###
///               * AVS Control Register 1
///               ###
///               %unsigned 4  low_vdd_limit             0xF
///                                    ###
///                                    * Set the lower limit of VDD
///                                    ###
///                                    : 0p725v                    0x0
///                                    : 0p7375v                   0x1
///                                    : 0p75v                     0x2
///                                    : 0p7625v                   0x3
///                                    : 0p775v                    0x4
///                                    : 0p7875v                   0x5
///                                    : 0p8v                      0x6
///                                    : 0p8125v                   0x7
///                                    : 0p825v                    0x8
///                                    : 0p8375v                   0x9
///                                    : 0p85v                     0xA
///                                    : 0p8625v                   0xB
///                                    : 0p875v                    0xC
///                                    : 0p8875v                   0xD
///                                    : 0p9v                      0xE
///                                    : 0p9125v                   0xF
///               %unsigned 4  high_vdd_limit            0xF
///                                    ###
///                                    * Set the upper limit of VDD
///                                    ###
///                                    : 0p9125v                   0x0
///                                    : 0p925v                    0x1
///                                    : 0p9375v                   0x2
///                                    : 0p95v                     0x3
///                                    : 0p9625v                   0x4
///                                    : 0p975v                    0x5
///                                    : 0p9875v                   0x6
///                                    : 1v                        0x7
///                                    : 1p0125v                   0x8
///                                    : 1p025v                    0x9
///                                    : 1p0375v                   0xA
///                                    : 1p05v                     0xB
///                                    : 1p0625v                   0xC
///                                    : 1p075v                    0xD
///                                    : 1p0857v                   0xE
///                                    : 1p1v                      0xF
///               %unsigned 3  div_cal                   0x3
///                                    ###
///                                    * Adjust internal voltage divider
///                                    ###
///               %unsigned 2  bg_trim                   0x1
///                                    ###
///                                    * Adjust internal bandgap voltage by 6mV intervals.
///                                    * 00: -6mV
///                                    * 01: 0mV
///                                    * 10: +6mV
///                                    * 11: +12mV
///                                    ###
///               %unsigned 3  bg_cfg                    0x4
///                                    ###
///                                    * Configurable bits which change the temperature curves of the bandgap circuit
///                                    ###
///               %unsigned 4  tp_cfg                    0x0
///                                    ###
///                                    * Analog test point selection control
///                                    * 0000: High-Z
///                                    * 0001: VDD IN
///                                    * 0010: BG output
///                                    * 0011: PORST VDD input
///                                    * 0100: Low limit
///                                    * 0101: High limit
///                                    * 0110: Below limit indication
///                                    * 0111: Above limit indication
///                                    * 1000: FW voltage
///                                    * 1001: amp_out
///                                    * 1010: inp
///                                    * 1011: ipp25u
///                                    * 1100: avs_porst_rst_in_b
///                                    * 1101: porst_rst_b
///                                    * 1110: not connected
///                                    * 1111: internal avdd_detection threshold
///                                    ###
///               %unsigned 3  avg                       0x0
///                                    ###
///                                    * Average DRO readout for
///                                    * 000: 1
///                                    * 001: 2
///                                    * …
///                                    * 111: 128
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00008 CTRL2                (P)
///               ###
///               * AVS Control Register 2
///               ###
///               %unsigned 16 speed_target              0x4B28
///                                    ###
///                                    * Required DRO readout.
///                                    * For SVT DRO, TT case @ 60o
///                                    * Target to reach 0.90V.
///                                    ###
///               %unsigned 16 dro_count_interval        0x1E1
///                                    ###
///                                    * Number of clk cycles for which the DRO is enabled
///                                    ###
///     @ 0x0000C DROStatus            (R-)
///               ###
///               * DRO Status
///               ###
///               %unsigned 16 inter_dro_count           0x0
///                                    ###
///                                    * Intermediate DRO count value
///                                    ###
///               %unsigned 1  under_speed               0x0
///                                    ###
///                                    * Indicating speed target is too low to achieve (due to limit)
///                                    ###
///               %unsigned 1  over_speed                0x0
///                                    ###
///                                    * Indicating speed target is too high to achieve (due to limit)
///                                    ###
///               %unsigned 8  avs_delta                 0x0
///                                    ###
///                                    * Delta control status
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 DROMinMax            (R-)
///               ###
///               * Statistics of dro_count
///               ###
///               %unsigned 16 max_dro_count             0x0
///                                    ###
///                                    * Max dro count after initiating min_max_val_rst
///                                    ###
///               %unsigned 16 min_dro_count             0x0
///                                    ###
///                                    * Min dro count after initiating min_max_val_rst
///                                    ###
///     @ 0x00014 AVSMinMax            (R-)
///               ###
///               * Statistics of avs_delta
///               ###
///               %unsigned 16 max_avs_delta             0x0
///                                    ###
///                                    * Max avs_delta after initiating min_max_val_rst
///                                    ###
///               %unsigned 16 min_avs_delta             0x0
///                                    ###
///                                    * Min avs_delta after initiating min_max_val_rst
///                                    ###
///     @ 0x00018 dummy                (P)
///               %unsigned 32 dummy                     0x0
///                                    ###
///                                    * Not used. May be used for ECO
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     191b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AVSReg
#define h_AVSReg (){}

    #define     RA_AVSReg_CTRL0                                0x0000

    #define     BA_AVSReg_CTRL0_avs_porst_rst_in               0x0000
    #define     B16AVSReg_CTRL0_avs_porst_rst_in               0x0000
    #define   LSb32AVSReg_CTRL0_avs_porst_rst_in                  0
    #define   LSb16AVSReg_CTRL0_avs_porst_rst_in                  0
    #define       bAVSReg_CTRL0_avs_porst_rst_in               1
    #define   MSK32AVSReg_CTRL0_avs_porst_rst_in                  0x00000001

    #define     BA_AVSReg_CTRL0_min_max_val_rst                0x0000
    #define     B16AVSReg_CTRL0_min_max_val_rst                0x0000
    #define   LSb32AVSReg_CTRL0_min_max_val_rst                   1
    #define   LSb16AVSReg_CTRL0_min_max_val_rst                   1
    #define       bAVSReg_CTRL0_min_max_val_rst                1
    #define   MSK32AVSReg_CTRL0_min_max_val_rst                   0x00000002

    #define     BA_AVSReg_CTRL0_en_avdd_det                    0x0000
    #define     B16AVSReg_CTRL0_en_avdd_det                    0x0000
    #define   LSb32AVSReg_CTRL0_en_avdd_det                       2
    #define   LSb16AVSReg_CTRL0_en_avdd_det                       2
    #define       bAVSReg_CTRL0_en_avdd_det                    1
    #define   MSK32AVSReg_CTRL0_en_avdd_det                       0x00000004

    #define     BA_AVSReg_CTRL0_enable                         0x0000
    #define     B16AVSReg_CTRL0_enable                         0x0000
    #define   LSb32AVSReg_CTRL0_enable                            3
    #define   LSb16AVSReg_CTRL0_enable                            3
    #define       bAVSReg_CTRL0_enable                         1
    #define   MSK32AVSReg_CTRL0_enable                            0x00000008

    #define     BA_AVSReg_CTRL0_avs_pause                      0x0000
    #define     B16AVSReg_CTRL0_avs_pause                      0x0000
    #define   LSb32AVSReg_CTRL0_avs_pause                         4
    #define   LSb16AVSReg_CTRL0_avs_pause                         4
    #define       bAVSReg_CTRL0_avs_pause                      1
    #define   MSK32AVSReg_CTRL0_avs_pause                         0x00000010

    #define     BA_AVSReg_CTRL0_manual                         0x0000
    #define     B16AVSReg_CTRL0_manual                         0x0000
    #define   LSb32AVSReg_CTRL0_manual                            5
    #define   LSb16AVSReg_CTRL0_manual                            5
    #define       bAVSReg_CTRL0_manual                         1
    #define   MSK32AVSReg_CTRL0_manual                            0x00000020

    #define     BA_AVSReg_CTRL0_manual_delta                   0x0000
    #define     B16AVSReg_CTRL0_manual_delta                   0x0000
    #define   LSb32AVSReg_CTRL0_manual_delta                      6
    #define   LSb16AVSReg_CTRL0_manual_delta                      6
    #define       bAVSReg_CTRL0_manual_delta                   8
    #define   MSK32AVSReg_CTRL0_manual_delta                      0x00003FC0
    ///////////////////////////////////////////////////////////
    #define     RA_AVSReg_CTRL1                                0x0004

    #define     BA_AVSReg_CTRL1_low_vdd_limit                  0x0004
    #define     B16AVSReg_CTRL1_low_vdd_limit                  0x0004
    #define   LSb32AVSReg_CTRL1_low_vdd_limit                     0
    #define   LSb16AVSReg_CTRL1_low_vdd_limit                     0
    #define       bAVSReg_CTRL1_low_vdd_limit                  4
    #define   MSK32AVSReg_CTRL1_low_vdd_limit                     0x0000000F
    #define        AVSReg_CTRL1_low_vdd_limit_0p725v                        0x0
    #define        AVSReg_CTRL1_low_vdd_limit_0p7375v                       0x1
    #define        AVSReg_CTRL1_low_vdd_limit_0p75v                         0x2
    #define        AVSReg_CTRL1_low_vdd_limit_0p7625v                       0x3
    #define        AVSReg_CTRL1_low_vdd_limit_0p775v                        0x4
    #define        AVSReg_CTRL1_low_vdd_limit_0p7875v                       0x5
    #define        AVSReg_CTRL1_low_vdd_limit_0p8v                          0x6
    #define        AVSReg_CTRL1_low_vdd_limit_0p8125v                       0x7
    #define        AVSReg_CTRL1_low_vdd_limit_0p825v                        0x8
    #define        AVSReg_CTRL1_low_vdd_limit_0p8375v                       0x9
    #define        AVSReg_CTRL1_low_vdd_limit_0p85v                         0xA
    #define        AVSReg_CTRL1_low_vdd_limit_0p8625v                       0xB
    #define        AVSReg_CTRL1_low_vdd_limit_0p875v                        0xC
    #define        AVSReg_CTRL1_low_vdd_limit_0p8875v                       0xD
    #define        AVSReg_CTRL1_low_vdd_limit_0p9v                          0xE
    #define        AVSReg_CTRL1_low_vdd_limit_0p9125v                       0xF

    #define     BA_AVSReg_CTRL1_high_vdd_limit                 0x0004
    #define     B16AVSReg_CTRL1_high_vdd_limit                 0x0004
    #define   LSb32AVSReg_CTRL1_high_vdd_limit                    4
    #define   LSb16AVSReg_CTRL1_high_vdd_limit                    4
    #define       bAVSReg_CTRL1_high_vdd_limit                 4
    #define   MSK32AVSReg_CTRL1_high_vdd_limit                    0x000000F0
    #define        AVSReg_CTRL1_high_vdd_limit_0p9125v                      0x0
    #define        AVSReg_CTRL1_high_vdd_limit_0p925v                       0x1
    #define        AVSReg_CTRL1_high_vdd_limit_0p9375v                      0x2
    #define        AVSReg_CTRL1_high_vdd_limit_0p95v                        0x3
    #define        AVSReg_CTRL1_high_vdd_limit_0p9625v                      0x4
    #define        AVSReg_CTRL1_high_vdd_limit_0p975v                       0x5
    #define        AVSReg_CTRL1_high_vdd_limit_0p9875v                      0x6
    #define        AVSReg_CTRL1_high_vdd_limit_1v                           0x7
    #define        AVSReg_CTRL1_high_vdd_limit_1p0125v                      0x8
    #define        AVSReg_CTRL1_high_vdd_limit_1p025v                       0x9
    #define        AVSReg_CTRL1_high_vdd_limit_1p0375v                      0xA
    #define        AVSReg_CTRL1_high_vdd_limit_1p05v                        0xB
    #define        AVSReg_CTRL1_high_vdd_limit_1p0625v                      0xC
    #define        AVSReg_CTRL1_high_vdd_limit_1p075v                       0xD
    #define        AVSReg_CTRL1_high_vdd_limit_1p0857v                      0xE
    #define        AVSReg_CTRL1_high_vdd_limit_1p1v                         0xF

    #define     BA_AVSReg_CTRL1_div_cal                        0x0005
    #define     B16AVSReg_CTRL1_div_cal                        0x0004
    #define   LSb32AVSReg_CTRL1_div_cal                           8
    #define   LSb16AVSReg_CTRL1_div_cal                           8
    #define       bAVSReg_CTRL1_div_cal                        3
    #define   MSK32AVSReg_CTRL1_div_cal                           0x00000700

    #define     BA_AVSReg_CTRL1_bg_trim                        0x0005
    #define     B16AVSReg_CTRL1_bg_trim                        0x0004
    #define   LSb32AVSReg_CTRL1_bg_trim                           11
    #define   LSb16AVSReg_CTRL1_bg_trim                           11
    #define       bAVSReg_CTRL1_bg_trim                        2
    #define   MSK32AVSReg_CTRL1_bg_trim                           0x00001800

    #define     BA_AVSReg_CTRL1_bg_cfg                         0x0005
    #define     B16AVSReg_CTRL1_bg_cfg                         0x0004
    #define   LSb32AVSReg_CTRL1_bg_cfg                            13
    #define   LSb16AVSReg_CTRL1_bg_cfg                            13
    #define       bAVSReg_CTRL1_bg_cfg                         3
    #define   MSK32AVSReg_CTRL1_bg_cfg                            0x0000E000

    #define     BA_AVSReg_CTRL1_tp_cfg                         0x0006
    #define     B16AVSReg_CTRL1_tp_cfg                         0x0006
    #define   LSb32AVSReg_CTRL1_tp_cfg                            16
    #define   LSb16AVSReg_CTRL1_tp_cfg                            0
    #define       bAVSReg_CTRL1_tp_cfg                         4
    #define   MSK32AVSReg_CTRL1_tp_cfg                            0x000F0000

    #define     BA_AVSReg_CTRL1_avg                            0x0006
    #define     B16AVSReg_CTRL1_avg                            0x0006
    #define   LSb32AVSReg_CTRL1_avg                               20
    #define   LSb16AVSReg_CTRL1_avg                               4
    #define       bAVSReg_CTRL1_avg                            3
    #define   MSK32AVSReg_CTRL1_avg                               0x00700000
    ///////////////////////////////////////////////////////////
    #define     RA_AVSReg_CTRL2                                0x0008

    #define     BA_AVSReg_CTRL2_speed_target                   0x0008
    #define     B16AVSReg_CTRL2_speed_target                   0x0008
    #define   LSb32AVSReg_CTRL2_speed_target                      0
    #define   LSb16AVSReg_CTRL2_speed_target                      0
    #define       bAVSReg_CTRL2_speed_target                   16
    #define   MSK32AVSReg_CTRL2_speed_target                      0x0000FFFF

    #define     BA_AVSReg_CTRL2_dro_count_interval             0x000A
    #define     B16AVSReg_CTRL2_dro_count_interval             0x000A
    #define   LSb32AVSReg_CTRL2_dro_count_interval                16
    #define   LSb16AVSReg_CTRL2_dro_count_interval                0
    #define       bAVSReg_CTRL2_dro_count_interval             16
    #define   MSK32AVSReg_CTRL2_dro_count_interval                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AVSReg_DROStatus                            0x000C

    #define     BA_AVSReg_DROStatus_inter_dro_count            0x000C
    #define     B16AVSReg_DROStatus_inter_dro_count            0x000C
    #define   LSb32AVSReg_DROStatus_inter_dro_count               0
    #define   LSb16AVSReg_DROStatus_inter_dro_count               0
    #define       bAVSReg_DROStatus_inter_dro_count            16
    #define   MSK32AVSReg_DROStatus_inter_dro_count               0x0000FFFF

    #define     BA_AVSReg_DROStatus_under_speed                0x000E
    #define     B16AVSReg_DROStatus_under_speed                0x000E
    #define   LSb32AVSReg_DROStatus_under_speed                   16
    #define   LSb16AVSReg_DROStatus_under_speed                   0
    #define       bAVSReg_DROStatus_under_speed                1
    #define   MSK32AVSReg_DROStatus_under_speed                   0x00010000

    #define     BA_AVSReg_DROStatus_over_speed                 0x000E
    #define     B16AVSReg_DROStatus_over_speed                 0x000E
    #define   LSb32AVSReg_DROStatus_over_speed                    17
    #define   LSb16AVSReg_DROStatus_over_speed                    1
    #define       bAVSReg_DROStatus_over_speed                 1
    #define   MSK32AVSReg_DROStatus_over_speed                    0x00020000

    #define     BA_AVSReg_DROStatus_avs_delta                  0x000E
    #define     B16AVSReg_DROStatus_avs_delta                  0x000E
    #define   LSb32AVSReg_DROStatus_avs_delta                     18
    #define   LSb16AVSReg_DROStatus_avs_delta                     2
    #define       bAVSReg_DROStatus_avs_delta                  8
    #define   MSK32AVSReg_DROStatus_avs_delta                     0x03FC0000
    ///////////////////////////////////////////////////////////
    #define     RA_AVSReg_DROMinMax                            0x0010

    #define     BA_AVSReg_DROMinMax_max_dro_count              0x0010
    #define     B16AVSReg_DROMinMax_max_dro_count              0x0010
    #define   LSb32AVSReg_DROMinMax_max_dro_count                 0
    #define   LSb16AVSReg_DROMinMax_max_dro_count                 0
    #define       bAVSReg_DROMinMax_max_dro_count              16
    #define   MSK32AVSReg_DROMinMax_max_dro_count                 0x0000FFFF

    #define     BA_AVSReg_DROMinMax_min_dro_count              0x0012
    #define     B16AVSReg_DROMinMax_min_dro_count              0x0012
    #define   LSb32AVSReg_DROMinMax_min_dro_count                 16
    #define   LSb16AVSReg_DROMinMax_min_dro_count                 0
    #define       bAVSReg_DROMinMax_min_dro_count              16
    #define   MSK32AVSReg_DROMinMax_min_dro_count                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AVSReg_AVSMinMax                            0x0014

    #define     BA_AVSReg_AVSMinMax_max_avs_delta              0x0014
    #define     B16AVSReg_AVSMinMax_max_avs_delta              0x0014
    #define   LSb32AVSReg_AVSMinMax_max_avs_delta                 0
    #define   LSb16AVSReg_AVSMinMax_max_avs_delta                 0
    #define       bAVSReg_AVSMinMax_max_avs_delta              16
    #define   MSK32AVSReg_AVSMinMax_max_avs_delta                 0x0000FFFF

    #define     BA_AVSReg_AVSMinMax_min_avs_delta              0x0016
    #define     B16AVSReg_AVSMinMax_min_avs_delta              0x0016
    #define   LSb32AVSReg_AVSMinMax_min_avs_delta                 16
    #define   LSb16AVSReg_AVSMinMax_min_avs_delta                 0
    #define       bAVSReg_AVSMinMax_min_avs_delta              16
    #define   MSK32AVSReg_AVSMinMax_min_avs_delta                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AVSReg_dummy                                0x0018

    #define     BA_AVSReg_dummy_dummy                          0x0018
    #define     B16AVSReg_dummy_dummy                          0x0018
    #define   LSb32AVSReg_dummy_dummy                             0
    #define   LSb16AVSReg_dummy_dummy                             0
    #define       bAVSReg_dummy_dummy                          32
    #define   MSK32AVSReg_dummy_dummy                             0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AVSReg {
    ///////////////////////////////////////////////////////////
    #define   GET32AVSReg_CTRL0_avs_porst_rst_in(r32)          _BFGET_(r32, 0, 0)
    #define   SET32AVSReg_CTRL0_avs_porst_rst_in(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16AVSReg_CTRL0_avs_porst_rst_in(r16)          _BFGET_(r16, 0, 0)
    #define   SET16AVSReg_CTRL0_avs_porst_rst_in(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32AVSReg_CTRL0_min_max_val_rst(r32)           _BFGET_(r32, 1, 1)
    #define   SET32AVSReg_CTRL0_min_max_val_rst(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16AVSReg_CTRL0_min_max_val_rst(r16)           _BFGET_(r16, 1, 1)
    #define   SET16AVSReg_CTRL0_min_max_val_rst(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32AVSReg_CTRL0_en_avdd_det(r32)               _BFGET_(r32, 2, 2)
    #define   SET32AVSReg_CTRL0_en_avdd_det(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16AVSReg_CTRL0_en_avdd_det(r16)               _BFGET_(r16, 2, 2)
    #define   SET16AVSReg_CTRL0_en_avdd_det(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32AVSReg_CTRL0_enable(r32)                    _BFGET_(r32, 3, 3)
    #define   SET32AVSReg_CTRL0_enable(r32,v)                  _BFSET_(r32, 3, 3,v)
    #define   GET16AVSReg_CTRL0_enable(r16)                    _BFGET_(r16, 3, 3)
    #define   SET16AVSReg_CTRL0_enable(r16,v)                  _BFSET_(r16, 3, 3,v)

    #define   GET32AVSReg_CTRL0_avs_pause(r32)                 _BFGET_(r32, 4, 4)
    #define   SET32AVSReg_CTRL0_avs_pause(r32,v)               _BFSET_(r32, 4, 4,v)
    #define   GET16AVSReg_CTRL0_avs_pause(r16)                 _BFGET_(r16, 4, 4)
    #define   SET16AVSReg_CTRL0_avs_pause(r16,v)               _BFSET_(r16, 4, 4,v)

    #define   GET32AVSReg_CTRL0_manual(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32AVSReg_CTRL0_manual(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16AVSReg_CTRL0_manual(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16AVSReg_CTRL0_manual(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define   GET32AVSReg_CTRL0_manual_delta(r32)              _BFGET_(r32,13, 6)
    #define   SET32AVSReg_CTRL0_manual_delta(r32,v)            _BFSET_(r32,13, 6,v)
    #define   GET16AVSReg_CTRL0_manual_delta(r16)              _BFGET_(r16,13, 6)
    #define   SET16AVSReg_CTRL0_manual_delta(r16,v)            _BFSET_(r16,13, 6,v)

    #define     w32AVSReg_CTRL0                                {\
            UNSG32 uCTRL0_avs_porst_rst_in                     :  1;\
            UNSG32 uCTRL0_min_max_val_rst                      :  1;\
            UNSG32 uCTRL0_en_avdd_det                          :  1;\
            UNSG32 uCTRL0_enable                               :  1;\
            UNSG32 uCTRL0_avs_pause                            :  1;\
            UNSG32 uCTRL0_manual                               :  1;\
            UNSG32 uCTRL0_manual_delta                         :  8;\
            UNSG32 RSVDx0_b14                                  : 18;\
          }
    union { UNSG32 u32AVSReg_CTRL0;
            struct w32AVSReg_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVSReg_CTRL1_low_vdd_limit(r32)             _BFGET_(r32, 3, 0)
    #define   SET32AVSReg_CTRL1_low_vdd_limit(r32,v)           _BFSET_(r32, 3, 0,v)
    #define   GET16AVSReg_CTRL1_low_vdd_limit(r16)             _BFGET_(r16, 3, 0)
    #define   SET16AVSReg_CTRL1_low_vdd_limit(r16,v)           _BFSET_(r16, 3, 0,v)

    #define   GET32AVSReg_CTRL1_high_vdd_limit(r32)            _BFGET_(r32, 7, 4)
    #define   SET32AVSReg_CTRL1_high_vdd_limit(r32,v)          _BFSET_(r32, 7, 4,v)
    #define   GET16AVSReg_CTRL1_high_vdd_limit(r16)            _BFGET_(r16, 7, 4)
    #define   SET16AVSReg_CTRL1_high_vdd_limit(r16,v)          _BFSET_(r16, 7, 4,v)

    #define   GET32AVSReg_CTRL1_div_cal(r32)                   _BFGET_(r32,10, 8)
    #define   SET32AVSReg_CTRL1_div_cal(r32,v)                 _BFSET_(r32,10, 8,v)
    #define   GET16AVSReg_CTRL1_div_cal(r16)                   _BFGET_(r16,10, 8)
    #define   SET16AVSReg_CTRL1_div_cal(r16,v)                 _BFSET_(r16,10, 8,v)

    #define   GET32AVSReg_CTRL1_bg_trim(r32)                   _BFGET_(r32,12,11)
    #define   SET32AVSReg_CTRL1_bg_trim(r32,v)                 _BFSET_(r32,12,11,v)
    #define   GET16AVSReg_CTRL1_bg_trim(r16)                   _BFGET_(r16,12,11)
    #define   SET16AVSReg_CTRL1_bg_trim(r16,v)                 _BFSET_(r16,12,11,v)

    #define   GET32AVSReg_CTRL1_bg_cfg(r32)                    _BFGET_(r32,15,13)
    #define   SET32AVSReg_CTRL1_bg_cfg(r32,v)                  _BFSET_(r32,15,13,v)
    #define   GET16AVSReg_CTRL1_bg_cfg(r16)                    _BFGET_(r16,15,13)
    #define   SET16AVSReg_CTRL1_bg_cfg(r16,v)                  _BFSET_(r16,15,13,v)

    #define   GET32AVSReg_CTRL1_tp_cfg(r32)                    _BFGET_(r32,19,16)
    #define   SET32AVSReg_CTRL1_tp_cfg(r32,v)                  _BFSET_(r32,19,16,v)
    #define   GET16AVSReg_CTRL1_tp_cfg(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16AVSReg_CTRL1_tp_cfg(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define   GET32AVSReg_CTRL1_avg(r32)                       _BFGET_(r32,22,20)
    #define   SET32AVSReg_CTRL1_avg(r32,v)                     _BFSET_(r32,22,20,v)
    #define   GET16AVSReg_CTRL1_avg(r16)                       _BFGET_(r16, 6, 4)
    #define   SET16AVSReg_CTRL1_avg(r16,v)                     _BFSET_(r16, 6, 4,v)

    #define     w32AVSReg_CTRL1                                {\
            UNSG32 uCTRL1_low_vdd_limit                        :  4;\
            UNSG32 uCTRL1_high_vdd_limit                       :  4;\
            UNSG32 uCTRL1_div_cal                              :  3;\
            UNSG32 uCTRL1_bg_trim                              :  2;\
            UNSG32 uCTRL1_bg_cfg                               :  3;\
            UNSG32 uCTRL1_tp_cfg                               :  4;\
            UNSG32 uCTRL1_avg                                  :  3;\
            UNSG32 RSVDx4_b23                                  :  9;\
          }
    union { UNSG32 u32AVSReg_CTRL1;
            struct w32AVSReg_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVSReg_CTRL2_speed_target(r32)              _BFGET_(r32,15, 0)
    #define   SET32AVSReg_CTRL2_speed_target(r32,v)            _BFSET_(r32,15, 0,v)
    #define   GET16AVSReg_CTRL2_speed_target(r16)              _BFGET_(r16,15, 0)
    #define   SET16AVSReg_CTRL2_speed_target(r16,v)            _BFSET_(r16,15, 0,v)

    #define   GET32AVSReg_CTRL2_dro_count_interval(r32)        _BFGET_(r32,31,16)
    #define   SET32AVSReg_CTRL2_dro_count_interval(r32,v)      _BFSET_(r32,31,16,v)
    #define   GET16AVSReg_CTRL2_dro_count_interval(r16)        _BFGET_(r16,15, 0)
    #define   SET16AVSReg_CTRL2_dro_count_interval(r16,v)      _BFSET_(r16,15, 0,v)

    #define     w32AVSReg_CTRL2                                {\
            UNSG32 uCTRL2_speed_target                         : 16;\
            UNSG32 uCTRL2_dro_count_interval                   : 16;\
          }
    union { UNSG32 u32AVSReg_CTRL2;
            struct w32AVSReg_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVSReg_DROStatus_inter_dro_count(r32)       _BFGET_(r32,15, 0)
    #define   SET32AVSReg_DROStatus_inter_dro_count(r32,v)     _BFSET_(r32,15, 0,v)
    #define   GET16AVSReg_DROStatus_inter_dro_count(r16)       _BFGET_(r16,15, 0)
    #define   SET16AVSReg_DROStatus_inter_dro_count(r16,v)     _BFSET_(r16,15, 0,v)

    #define   GET32AVSReg_DROStatus_under_speed(r32)           _BFGET_(r32,16,16)
    #define   SET32AVSReg_DROStatus_under_speed(r32,v)         _BFSET_(r32,16,16,v)
    #define   GET16AVSReg_DROStatus_under_speed(r16)           _BFGET_(r16, 0, 0)
    #define   SET16AVSReg_DROStatus_under_speed(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32AVSReg_DROStatus_over_speed(r32)            _BFGET_(r32,17,17)
    #define   SET32AVSReg_DROStatus_over_speed(r32,v)          _BFSET_(r32,17,17,v)
    #define   GET16AVSReg_DROStatus_over_speed(r16)            _BFGET_(r16, 1, 1)
    #define   SET16AVSReg_DROStatus_over_speed(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32AVSReg_DROStatus_avs_delta(r32)             _BFGET_(r32,25,18)
    #define   SET32AVSReg_DROStatus_avs_delta(r32,v)           _BFSET_(r32,25,18,v)
    #define   GET16AVSReg_DROStatus_avs_delta(r16)             _BFGET_(r16, 9, 2)
    #define   SET16AVSReg_DROStatus_avs_delta(r16,v)           _BFSET_(r16, 9, 2,v)

    #define     w32AVSReg_DROStatus                            {\
            UNSG32 uDROStatus_inter_dro_count                  : 16;\
            UNSG32 uDROStatus_under_speed                      :  1;\
            UNSG32 uDROStatus_over_speed                       :  1;\
            UNSG32 uDROStatus_avs_delta                        :  8;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32AVSReg_DROStatus;
            struct w32AVSReg_DROStatus;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVSReg_DROMinMax_max_dro_count(r32)         _BFGET_(r32,15, 0)
    #define   SET32AVSReg_DROMinMax_max_dro_count(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16AVSReg_DROMinMax_max_dro_count(r16)         _BFGET_(r16,15, 0)
    #define   SET16AVSReg_DROMinMax_max_dro_count(r16,v)       _BFSET_(r16,15, 0,v)

    #define   GET32AVSReg_DROMinMax_min_dro_count(r32)         _BFGET_(r32,31,16)
    #define   SET32AVSReg_DROMinMax_min_dro_count(r32,v)       _BFSET_(r32,31,16,v)
    #define   GET16AVSReg_DROMinMax_min_dro_count(r16)         _BFGET_(r16,15, 0)
    #define   SET16AVSReg_DROMinMax_min_dro_count(r16,v)       _BFSET_(r16,15, 0,v)

    #define     w32AVSReg_DROMinMax                            {\
            UNSG32 uDROMinMax_max_dro_count                    : 16;\
            UNSG32 uDROMinMax_min_dro_count                    : 16;\
          }
    union { UNSG32 u32AVSReg_DROMinMax;
            struct w32AVSReg_DROMinMax;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVSReg_AVSMinMax_max_avs_delta(r32)         _BFGET_(r32,15, 0)
    #define   SET32AVSReg_AVSMinMax_max_avs_delta(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16AVSReg_AVSMinMax_max_avs_delta(r16)         _BFGET_(r16,15, 0)
    #define   SET16AVSReg_AVSMinMax_max_avs_delta(r16,v)       _BFSET_(r16,15, 0,v)

    #define   GET32AVSReg_AVSMinMax_min_avs_delta(r32)         _BFGET_(r32,31,16)
    #define   SET32AVSReg_AVSMinMax_min_avs_delta(r32,v)       _BFSET_(r32,31,16,v)
    #define   GET16AVSReg_AVSMinMax_min_avs_delta(r16)         _BFGET_(r16,15, 0)
    #define   SET16AVSReg_AVSMinMax_min_avs_delta(r16,v)       _BFSET_(r16,15, 0,v)

    #define     w32AVSReg_AVSMinMax                            {\
            UNSG32 uAVSMinMax_max_avs_delta                    : 16;\
            UNSG32 uAVSMinMax_min_avs_delta                    : 16;\
          }
    union { UNSG32 u32AVSReg_AVSMinMax;
            struct w32AVSReg_AVSMinMax;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVSReg_dummy_dummy(r32)                     _BFGET_(r32,31, 0)
    #define   SET32AVSReg_dummy_dummy(r32,v)                   _BFSET_(r32,31, 0,v)

    #define     w32AVSReg_dummy                                {\
            UNSG32 udummy_dummy                                : 32;\
          }
    union { UNSG32 u32AVSReg_dummy;
            struct w32AVSReg_dummy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AVSReg;

    typedef union  T32AVSReg_CTRL0
          { UNSG32 u32;
            struct w32AVSReg_CTRL0;
                 } T32AVSReg_CTRL0;
    typedef union  T32AVSReg_CTRL1
          { UNSG32 u32;
            struct w32AVSReg_CTRL1;
                 } T32AVSReg_CTRL1;
    typedef union  T32AVSReg_CTRL2
          { UNSG32 u32;
            struct w32AVSReg_CTRL2;
                 } T32AVSReg_CTRL2;
    typedef union  T32AVSReg_DROStatus
          { UNSG32 u32;
            struct w32AVSReg_DROStatus;
                 } T32AVSReg_DROStatus;
    typedef union  T32AVSReg_DROMinMax
          { UNSG32 u32;
            struct w32AVSReg_DROMinMax;
                 } T32AVSReg_DROMinMax;
    typedef union  T32AVSReg_AVSMinMax
          { UNSG32 u32;
            struct w32AVSReg_AVSMinMax;
                 } T32AVSReg_AVSMinMax;
    typedef union  T32AVSReg_dummy
          { UNSG32 u32;
            struct w32AVSReg_dummy;
                 } T32AVSReg_dummy;
    ///////////////////////////////////////////////////////////

    typedef union  TAVSReg_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32AVSReg_CTRL0;
                   };
                 } TAVSReg_CTRL0;
    typedef union  TAVSReg_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32AVSReg_CTRL1;
                   };
                 } TAVSReg_CTRL1;
    typedef union  TAVSReg_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32AVSReg_CTRL2;
                   };
                 } TAVSReg_CTRL2;
    typedef union  TAVSReg_DROStatus
          { UNSG32 u32[1];
            struct {
            struct w32AVSReg_DROStatus;
                   };
                 } TAVSReg_DROStatus;
    typedef union  TAVSReg_DROMinMax
          { UNSG32 u32[1];
            struct {
            struct w32AVSReg_DROMinMax;
                   };
                 } TAVSReg_DROMinMax;
    typedef union  TAVSReg_AVSMinMax
          { UNSG32 u32[1];
            struct {
            struct w32AVSReg_AVSMinMax;
                   };
                 } TAVSReg_AVSMinMax;
    typedef union  TAVSReg_dummy
          { UNSG32 u32[1];
            struct {
            struct w32AVSReg_dummy;
                   };
                 } TAVSReg_dummy;

    ///////////////////////////////////////////////////////////
     SIGN32 AVSReg_drvrd(SIE_AVSReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AVSReg_drvwr(SIE_AVSReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AVSReg_reset(SIE_AVSReg *p);
     SIGN32 AVSReg_cmp  (SIE_AVSReg *p, SIE_AVSReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AVSReg_check(p,pie,pfx,hLOG) AVSReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AVSReg_print(p,    pfx,hLOG) AVSReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AVSReg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CpuPllReg               biu              (4,4)
///     ###
///     * All the controls for CA9_PLL Wrapper
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 CpuReg               
///               $CpuReg              CpuReg            REG          
///     @ 0x00038                      (P)
///     # 0x00038 PllReg               
///               $PllReg              PllReg            REG          
///     @ 0x00054                      (P)
///     # 0x00054 AVSReg               
///               $AVSReg              AVSReg            REG          
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     112B, bits:     512b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CpuPllReg
#define h_CpuPllReg (){}

    #define     RA_CpuPllReg_CpuReg                            0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_CpuPllReg_PllReg                            0x0038
    ///////////////////////////////////////////////////////////
    #define     RA_CpuPllReg_AVSReg                            0x0054
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CpuPllReg {
    ///////////////////////////////////////////////////////////
              SIE_CpuReg                                       ie_CpuReg;
    ///////////////////////////////////////////////////////////
              SIE_PllReg                                       ie_PllReg;
    ///////////////////////////////////////////////////////////
              SIE_AVSReg                                       ie_AVSReg;
    ///////////////////////////////////////////////////////////
    } SIE_CpuPllReg;

    ///////////////////////////////////////////////////////////
     SIGN32 CpuPllReg_drvrd(SIE_CpuPllReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CpuPllReg_drvwr(SIE_CpuPllReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CpuPllReg_reset(SIE_CpuPllReg *p);
     SIGN32 CpuPllReg_cmp  (SIE_CpuPllReg *p, SIE_CpuPllReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CpuPllReg_check(p,pie,pfx,hLOG) CpuPllReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CpuPllReg_print(p,    pfx,hLOG) CpuPllReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CpuPllReg
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: cpu.h
////////////////////////////////////////////////////////////

