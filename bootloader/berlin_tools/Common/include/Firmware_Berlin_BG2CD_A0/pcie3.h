//////
/// don't edit! auto-generated by docc: pcie3.h
////////////////////////////////////////////////////////////
#ifndef pcie3_h
#define pcie3_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE oneReg                                   (4,4)
///     ###
///     * To create SRAM-like interface creating one 32-bit register (Hier:1)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (R-)
///               %unsigned 32 0x00000000                
///                                    ###
///                                    * One Register in an external IP block (i.e., PEX)
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_oneReg
#define h_oneReg (){}

    #define     BA_oneReg_0x00000000                           0x0000
    #define     B16oneReg_0x00000000                           0x0000
    #define   LSb32oneReg_0x00000000                              0
    #define   LSb16oneReg_0x00000000                              0
    #define       boneReg_0x00000000                           32
    #define   MSK32oneReg_0x00000000                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_oneReg {
    ///////////////////////////////////////////////////////////
    #define   GET32oneReg_0x00000000(r32)                      _BFGET_(r32,31, 0)
    #define   SET32oneReg_0x00000000(r32,v)                    _BFSET_(r32,31, 0,v)

            UNSG32 u_0x00000000                                : 32;
    ///////////////////////////////////////////////////////////
    } SIE_oneReg;

    ///////////////////////////////////////////////////////////
     SIGN32 oneReg_drvrd(SIE_oneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 oneReg_drvwr(SIE_oneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void oneReg_reset(SIE_oneReg *p);
     SIGN32 oneReg_cmp  (SIE_oneReg *p, SIE_oneReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define oneReg_check(p,pie,pfx,hLOG) oneReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define oneReg_print(p,    pfx,hLOG) oneReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: oneReg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE IP_REGSP_0                               (4,4)
///     ###
///     * To create SRAM-like interface for PCI-E 3 IP Register access – Creating 32KB address space (Hier:2)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 dummy                
///               $oneReg              dummy             REG    [8192]
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:   32768B, bits:  262144b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IP_REGSP_0
#define h_IP_REGSP_0 (){}

    #define     RA_IP_REGSP_0_dummy                            0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IP_REGSP_0 {
    ///////////////////////////////////////////////////////////
              SIE_oneReg                                       ie_dummy[8192];
    ///////////////////////////////////////////////////////////
    } SIE_IP_REGSP_0;

    ///////////////////////////////////////////////////////////
     SIGN32 IP_REGSP_0_drvrd(SIE_IP_REGSP_0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IP_REGSP_0_drvwr(SIE_IP_REGSP_0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IP_REGSP_0_reset(SIE_IP_REGSP_0 *p);
     SIGN32 IP_REGSP_0_cmp  (SIE_IP_REGSP_0 *p, SIE_IP_REGSP_0 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IP_REGSP_0_check(p,pie,pfx,hLOG) IP_REGSP_0_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IP_REGSP_0_print(p,    pfx,hLOG) IP_REGSP_0_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IP_REGSP_0
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE IP_REGSP_1                               (4,4)
///     ###
///     * To create SRAM-like interface for PCI-E 3 IP Register access – creating 4KB address space. (Hier:2)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 dummy                
///               $oneReg              dummy             REG    [1024]
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    4096B, bits:   32768b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IP_REGSP_1
#define h_IP_REGSP_1 (){}

    #define     RA_IP_REGSP_1_dummy                            0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IP_REGSP_1 {
    ///////////////////////////////////////////////////////////
              SIE_oneReg                                       ie_dummy[1024];
    ///////////////////////////////////////////////////////////
    } SIE_IP_REGSP_1;

    ///////////////////////////////////////////////////////////
     SIGN32 IP_REGSP_1_drvrd(SIE_IP_REGSP_1 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IP_REGSP_1_drvwr(SIE_IP_REGSP_1 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IP_REGSP_1_reset(SIE_IP_REGSP_1 *p);
     SIGN32 IP_REGSP_1_cmp  (SIE_IP_REGSP_1 *p, SIE_IP_REGSP_1 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IP_REGSP_1_check(p,pie,pfx,hLOG) IP_REGSP_1_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IP_REGSP_1_print(p,    pfx,hLOG) IP_REGSP_1_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IP_REGSP_1
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE Pcie3                   biu              (4,4)
///     ###
///     * PCI-E module register space
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 IP_REGSP_0           
///               $IP_REGSP_0          IP_REGSP_0        MEM          
///                                    ###
///                                    * PCIE 3 IP First 32KB register Space
///                                    ###
///     @ 0x08000                      (P)
///     # 0x08000 IP_REGSP_1           
///               $IP_REGSP_1          IP_REGSP_1        MEM          
///                                    ###
///                                    * PCIE 3 IP Second 4KB register Space, So total IP Register space is 36KB
///                                    ###
///     @ 0x09000 ctrl_0               (RW)
///               ###
///               * Control 0 register
///               ###
///               %unsigned 32 OUTBOUND_MEM_START_ADDR   0xC0800000
///                                    ###
///                                    * Start Address for Outbound Memory Transactions.
///                                    * Total outbound PCIE space is 256MB. By default first 8MB is assigned for the outbound Configuration transactions to the Endpoint.
///                                    * Note:
///                                    * PCIE-0 Start Address is : 0xC000_0000
///                                    * PCIE-1 Start Address is : 0xD000_0000
///                                    * PCIE-2 Start Address is : 0xE000_0000
///                                    ###
///     @ 0x09004 ctrl_1               (RW)
///               ###
///               * Control 1 Register
///               ###
///               %unsigned 1  SYSWREQ                   0x0
///                                    ###
///                                    * AXI Lower power control
///                                    ###
///               %unsigned 1  CPU_INTERFACE_SEL         0x0
///                                    ###
///                                    * CPU Interface selection
///                                    * 0 : Use AHB to access PCIE registers
///                                    * 1 : Use SIF Serial interface to access the registers
///                                    ###
///               %unsigned 1  CFG_TYPE                  0x0
///                                    ###
///                                    * Register bit to indicate whether outbound CFG cycles are Type 0 or Type1
///                                    * 0 :   Type 0 configuration cycles (default)
///                                    * 1 :   Type 1 configuration cycles cd
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x09008 debugMux             (RW)
///               ###
///               * Debug mux select register
///               ###
///               %unsigned 8  SEL                       0x0
///                                    ###
///                                    * Mux select value
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x0900C debugRdData          (R-)
///               ###
///               * Debug Data
///               ###
///               %unsigned 32 VAL                       
///                                    ###
///                                    * Debug Read data
///                                    ###
///     @ 0x09010 status               (R-)
///               ###
///               * AXI low power Status register
///               ###
///               %unsigned 1  DWACK                     
///               %%        31         # Stuffing bits...
///     @ 0x09014 MSI_INTR_RX          (RW-)
///               ###
///               * PCI-E MSI Received register
///               ###
///               %unsigned 32 DATA                      0x0
///                                    ###
///                                    * Data Received register
///                                    * The received data decides which function generated the interrupt. This data is used to set the corresponding bits in the INTR Status register
///                                    ###
///     @ 0x09018 MSI_INTR_STATUS      (WOC-)
///               ###
///               * PCI-E MSI Interrupt Status register
///               * Note: Write-1-to clear the interrupt in this register
///               ###
///               %unsigned 32 VALUE                     0x0
///                                    ###
///                                    * Interrupt Status value
///                                    * 0 : No Interrupt pending
///                                    * 1 : Interrupt pending
///                                    ###
///     @ 0x0901C MSI_INTR_MASK        (RW)
///               ###
///               * PCI-E MSI Interrupt Mask register
///               ###
///               %unsigned 32 VALUE                     0x0
///                                    ###
///                                    *   Mask
///                                    * 0 : Interrupt enabled
///                                    * 1 : Interrupt disabled (masked)
///                                    ###
///     @ 0x09020                      (W-)
///     #         # Stuffing bytes...
///               %% 229120
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:   65536B, bits:     236b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_Pcie3
#define h_Pcie3 (){}

    #define     RA_Pcie3_IP_REGSP_0                            0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_IP_REGSP_1                            0x8000
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_ctrl_0                                0x9000

    #define     BA_Pcie3_ctrl_0_OUTBOUND_MEM_START_ADDR        0x9000
    #define     B16Pcie3_ctrl_0_OUTBOUND_MEM_START_ADDR        0x9000
    #define   LSb32Pcie3_ctrl_0_OUTBOUND_MEM_START_ADDR           0
    #define   LSb16Pcie3_ctrl_0_OUTBOUND_MEM_START_ADDR           0
    #define       bPcie3_ctrl_0_OUTBOUND_MEM_START_ADDR        32
    #define   MSK32Pcie3_ctrl_0_OUTBOUND_MEM_START_ADDR           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_ctrl_1                                0x9004

    #define     BA_Pcie3_ctrl_1_SYSWREQ                        0x9004
    #define     B16Pcie3_ctrl_1_SYSWREQ                        0x9004
    #define   LSb32Pcie3_ctrl_1_SYSWREQ                           0
    #define   LSb16Pcie3_ctrl_1_SYSWREQ                           0
    #define       bPcie3_ctrl_1_SYSWREQ                        1
    #define   MSK32Pcie3_ctrl_1_SYSWREQ                           0x00000001

    #define     BA_Pcie3_ctrl_1_CPU_INTERFACE_SEL              0x9004
    #define     B16Pcie3_ctrl_1_CPU_INTERFACE_SEL              0x9004
    #define   LSb32Pcie3_ctrl_1_CPU_INTERFACE_SEL                 1
    #define   LSb16Pcie3_ctrl_1_CPU_INTERFACE_SEL                 1
    #define       bPcie3_ctrl_1_CPU_INTERFACE_SEL              1
    #define   MSK32Pcie3_ctrl_1_CPU_INTERFACE_SEL                 0x00000002

    #define     BA_Pcie3_ctrl_1_CFG_TYPE                       0x9004
    #define     B16Pcie3_ctrl_1_CFG_TYPE                       0x9004
    #define   LSb32Pcie3_ctrl_1_CFG_TYPE                          2
    #define   LSb16Pcie3_ctrl_1_CFG_TYPE                          2
    #define       bPcie3_ctrl_1_CFG_TYPE                       1
    #define   MSK32Pcie3_ctrl_1_CFG_TYPE                          0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_debugMux                              0x9008

    #define     BA_Pcie3_debugMux_SEL                          0x9008
    #define     B16Pcie3_debugMux_SEL                          0x9008
    #define   LSb32Pcie3_debugMux_SEL                             0
    #define   LSb16Pcie3_debugMux_SEL                             0
    #define       bPcie3_debugMux_SEL                          8
    #define   MSK32Pcie3_debugMux_SEL                             0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_debugRdData                           0x900C

    #define     BA_Pcie3_debugRdData_VAL                       0x900C
    #define     B16Pcie3_debugRdData_VAL                       0x900C
    #define   LSb32Pcie3_debugRdData_VAL                          0
    #define   LSb16Pcie3_debugRdData_VAL                          0
    #define       bPcie3_debugRdData_VAL                       32
    #define   MSK32Pcie3_debugRdData_VAL                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_status                                0x9010

    #define     BA_Pcie3_status_DWACK                          0x9010
    #define     B16Pcie3_status_DWACK                          0x9010
    #define   LSb32Pcie3_status_DWACK                             0
    #define   LSb16Pcie3_status_DWACK                             0
    #define       bPcie3_status_DWACK                          1
    #define   MSK32Pcie3_status_DWACK                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_MSI_INTR_RX                           0x9014

    #define     BA_Pcie3_MSI_INTR_RX_DATA                      0x9014
    #define     B16Pcie3_MSI_INTR_RX_DATA                      0x9014
    #define   LSb32Pcie3_MSI_INTR_RX_DATA                         0
    #define   LSb16Pcie3_MSI_INTR_RX_DATA                         0
    #define       bPcie3_MSI_INTR_RX_DATA                      32
    #define   MSK32Pcie3_MSI_INTR_RX_DATA                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_MSI_INTR_STATUS                       0x9018

    #define     BA_Pcie3_MSI_INTR_STATUS_VALUE                 0x9018
    #define     B16Pcie3_MSI_INTR_STATUS_VALUE                 0x9018
    #define   LSb32Pcie3_MSI_INTR_STATUS_VALUE                    0
    #define   LSb16Pcie3_MSI_INTR_STATUS_VALUE                    0
    #define       bPcie3_MSI_INTR_STATUS_VALUE                 32
    #define   MSK32Pcie3_MSI_INTR_STATUS_VALUE                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_Pcie3_MSI_INTR_MASK                         0x901C

    #define     BA_Pcie3_MSI_INTR_MASK_VALUE                   0x901C
    #define     B16Pcie3_MSI_INTR_MASK_VALUE                   0x901C
    #define   LSb32Pcie3_MSI_INTR_MASK_VALUE                      0
    #define   LSb16Pcie3_MSI_INTR_MASK_VALUE                      0
    #define       bPcie3_MSI_INTR_MASK_VALUE                   32
    #define   MSK32Pcie3_MSI_INTR_MASK_VALUE                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_Pcie3 {
    ///////////////////////////////////////////////////////////
              SIE_IP_REGSP_0                                   ie_IP_REGSP_0;
    ///////////////////////////////////////////////////////////
              SIE_IP_REGSP_1                                   ie_IP_REGSP_1;
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_ctrl_0_OUTBOUND_MEM_START_ADDR(r32)   _BFGET_(r32,31, 0)
    #define   SET32Pcie3_ctrl_0_OUTBOUND_MEM_START_ADDR(r32,v) _BFSET_(r32,31, 0,v)

    #define     w32Pcie3_ctrl_0                                {\
            UNSG32 uctrl_0_OUTBOUND_MEM_START_ADDR             : 32;\
          }
    union { UNSG32 u32Pcie3_ctrl_0;
            struct w32Pcie3_ctrl_0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_ctrl_1_SYSWREQ(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32Pcie3_ctrl_1_SYSWREQ(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16Pcie3_ctrl_1_SYSWREQ(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16Pcie3_ctrl_1_SYSWREQ(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32Pcie3_ctrl_1_CPU_INTERFACE_SEL(r32)         _BFGET_(r32, 1, 1)
    #define   SET32Pcie3_ctrl_1_CPU_INTERFACE_SEL(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16Pcie3_ctrl_1_CPU_INTERFACE_SEL(r16)         _BFGET_(r16, 1, 1)
    #define   SET16Pcie3_ctrl_1_CPU_INTERFACE_SEL(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32Pcie3_ctrl_1_CFG_TYPE(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32Pcie3_ctrl_1_CFG_TYPE(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16Pcie3_ctrl_1_CFG_TYPE(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16Pcie3_ctrl_1_CFG_TYPE(r16,v)                _BFSET_(r16, 2, 2,v)

    #define     w32Pcie3_ctrl_1                                {\
            UNSG32 uctrl_1_SYSWREQ                             :  1;\
            UNSG32 uctrl_1_CPU_INTERFACE_SEL                   :  1;\
            UNSG32 uctrl_1_CFG_TYPE                            :  1;\
            UNSG32 RSVDx9004_b3                                : 29;\
          }
    union { UNSG32 u32Pcie3_ctrl_1;
            struct w32Pcie3_ctrl_1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_debugMux_SEL(r32)                     _BFGET_(r32, 7, 0)
    #define   SET32Pcie3_debugMux_SEL(r32,v)                   _BFSET_(r32, 7, 0,v)
    #define   GET16Pcie3_debugMux_SEL(r16)                     _BFGET_(r16, 7, 0)
    #define   SET16Pcie3_debugMux_SEL(r16,v)                   _BFSET_(r16, 7, 0,v)

    #define     w32Pcie3_debugMux                              {\
            UNSG32 udebugMux_SEL                               :  8;\
            UNSG32 RSVDx9008_b8                                : 24;\
          }
    union { UNSG32 u32Pcie3_debugMux;
            struct w32Pcie3_debugMux;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_debugRdData_VAL(r32)                  _BFGET_(r32,31, 0)
    #define   SET32Pcie3_debugRdData_VAL(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32Pcie3_debugRdData                           {\
            UNSG32 udebugRdData_VAL                            : 32;\
          }
    union { UNSG32 u32Pcie3_debugRdData;
            struct w32Pcie3_debugRdData;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_status_DWACK(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32Pcie3_status_DWACK(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16Pcie3_status_DWACK(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16Pcie3_status_DWACK(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32Pcie3_status                                {\
            UNSG32 ustatus_DWACK                               :  1;\
            UNSG32 RSVDx9010_b1                                : 31;\
          }
    union { UNSG32 u32Pcie3_status;
            struct w32Pcie3_status;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_MSI_INTR_RX_DATA(r32)                 _BFGET_(r32,31, 0)
    #define   SET32Pcie3_MSI_INTR_RX_DATA(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32Pcie3_MSI_INTR_RX                           {\
            UNSG32 uMSI_INTR_RX_DATA                           : 32;\
          }
    union { UNSG32 u32Pcie3_MSI_INTR_RX;
            struct w32Pcie3_MSI_INTR_RX;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_MSI_INTR_STATUS_VALUE(r32)            _BFGET_(r32,31, 0)
    #define   SET32Pcie3_MSI_INTR_STATUS_VALUE(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32Pcie3_MSI_INTR_STATUS                       {\
            UNSG32 uMSI_INTR_STATUS_VALUE                      : 32;\
          }
    union { UNSG32 u32Pcie3_MSI_INTR_STATUS;
            struct w32Pcie3_MSI_INTR_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Pcie3_MSI_INTR_MASK_VALUE(r32)              _BFGET_(r32,31, 0)
    #define   SET32Pcie3_MSI_INTR_MASK_VALUE(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32Pcie3_MSI_INTR_MASK                         {\
            UNSG32 uMSI_INTR_MASK_VALUE                        : 32;\
          }
    union { UNSG32 u32Pcie3_MSI_INTR_MASK;
            struct w32Pcie3_MSI_INTR_MASK;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx9020                                   [28640];
    ///////////////////////////////////////////////////////////
    } SIE_Pcie3;

    typedef union  T32Pcie3_ctrl_0
          { UNSG32 u32;
            struct w32Pcie3_ctrl_0;
                 } T32Pcie3_ctrl_0;
    typedef union  T32Pcie3_ctrl_1
          { UNSG32 u32;
            struct w32Pcie3_ctrl_1;
                 } T32Pcie3_ctrl_1;
    typedef union  T32Pcie3_debugMux
          { UNSG32 u32;
            struct w32Pcie3_debugMux;
                 } T32Pcie3_debugMux;
    typedef union  T32Pcie3_debugRdData
          { UNSG32 u32;
            struct w32Pcie3_debugRdData;
                 } T32Pcie3_debugRdData;
    typedef union  T32Pcie3_status
          { UNSG32 u32;
            struct w32Pcie3_status;
                 } T32Pcie3_status;
    typedef union  T32Pcie3_MSI_INTR_RX
          { UNSG32 u32;
            struct w32Pcie3_MSI_INTR_RX;
                 } T32Pcie3_MSI_INTR_RX;
    typedef union  T32Pcie3_MSI_INTR_STATUS
          { UNSG32 u32;
            struct w32Pcie3_MSI_INTR_STATUS;
                 } T32Pcie3_MSI_INTR_STATUS;
    typedef union  T32Pcie3_MSI_INTR_MASK
          { UNSG32 u32;
            struct w32Pcie3_MSI_INTR_MASK;
                 } T32Pcie3_MSI_INTR_MASK;
    ///////////////////////////////////////////////////////////

    typedef union  TPcie3_ctrl_0
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_ctrl_0;
                   };
                 } TPcie3_ctrl_0;
    typedef union  TPcie3_ctrl_1
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_ctrl_1;
                   };
                 } TPcie3_ctrl_1;
    typedef union  TPcie3_debugMux
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_debugMux;
                   };
                 } TPcie3_debugMux;
    typedef union  TPcie3_debugRdData
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_debugRdData;
                   };
                 } TPcie3_debugRdData;
    typedef union  TPcie3_status
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_status;
                   };
                 } TPcie3_status;
    typedef union  TPcie3_MSI_INTR_RX
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_MSI_INTR_RX;
                   };
                 } TPcie3_MSI_INTR_RX;
    typedef union  TPcie3_MSI_INTR_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_MSI_INTR_STATUS;
                   };
                 } TPcie3_MSI_INTR_STATUS;
    typedef union  TPcie3_MSI_INTR_MASK
          { UNSG32 u32[1];
            struct {
            struct w32Pcie3_MSI_INTR_MASK;
                   };
                 } TPcie3_MSI_INTR_MASK;

    ///////////////////////////////////////////////////////////
     SIGN32 Pcie3_drvrd(SIE_Pcie3 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 Pcie3_drvwr(SIE_Pcie3 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void Pcie3_reset(SIE_Pcie3 *p);
     SIGN32 Pcie3_cmp  (SIE_Pcie3 *p, SIE_Pcie3 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define Pcie3_check(p,pie,pfx,hLOG) Pcie3_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define Pcie3_print(p,    pfx,hLOG) Pcie3_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: Pcie3
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: pcie3.h
////////////////////////////////////////////////////////////

