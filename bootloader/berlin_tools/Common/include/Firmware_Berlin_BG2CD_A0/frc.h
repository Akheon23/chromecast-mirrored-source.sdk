//////
/// don't edit! auto-generated by docc: frc.h
////////////////////////////////////////////////////////////
#ifndef frc_h
#define frc_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE LVDS_TEST_DATA_0                         (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 TEST                 (P)
///               %unsigned 7  DATA                      0x63
///                                    ###
///                                    * Test data
///                                    ###
///               %unsigned 1  DATA_INV_EN               0x0
///                                    ###
///                                    * 1'b0:Test data is output as it is
///                                    * 1'b1:Test data is inverted on alternate clocks
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       8b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_LVDS_TEST_DATA_0
#define h_LVDS_TEST_DATA_0 (){}

    #define     RA_LVDS_TEST_DATA_0_TEST                       0x0000

    #define     BA_LVDS_TEST_DATA_0_TEST_DATA                  0x0000
    #define     B16LVDS_TEST_DATA_0_TEST_DATA                  0x0000
    #define   LSb32LVDS_TEST_DATA_0_TEST_DATA                     0
    #define   LSb16LVDS_TEST_DATA_0_TEST_DATA                     0
    #define       bLVDS_TEST_DATA_0_TEST_DATA                  7
    #define   MSK32LVDS_TEST_DATA_0_TEST_DATA                     0x0000007F

    #define     BA_LVDS_TEST_DATA_0_TEST_DATA_INV_EN           0x0000
    #define     B16LVDS_TEST_DATA_0_TEST_DATA_INV_EN           0x0000
    #define   LSb32LVDS_TEST_DATA_0_TEST_DATA_INV_EN              7
    #define   LSb16LVDS_TEST_DATA_0_TEST_DATA_INV_EN              7
    #define       bLVDS_TEST_DATA_0_TEST_DATA_INV_EN           1
    #define   MSK32LVDS_TEST_DATA_0_TEST_DATA_INV_EN              0x00000080
    ///////////////////////////////////////////////////////////

    typedef struct SIE_LVDS_TEST_DATA_0 {
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_TEST_DATA_0_TEST_DATA(r32)             _BFGET_(r32, 6, 0)
    #define   SET32LVDS_TEST_DATA_0_TEST_DATA(r32,v)           _BFSET_(r32, 6, 0,v)
    #define   GET16LVDS_TEST_DATA_0_TEST_DATA(r16)             _BFGET_(r16, 6, 0)
    #define   SET16LVDS_TEST_DATA_0_TEST_DATA(r16,v)           _BFSET_(r16, 6, 0,v)

    #define   GET32LVDS_TEST_DATA_0_TEST_DATA_INV_EN(r32)      _BFGET_(r32, 7, 7)
    #define   SET32LVDS_TEST_DATA_0_TEST_DATA_INV_EN(r32,v)    _BFSET_(r32, 7, 7,v)
    #define   GET16LVDS_TEST_DATA_0_TEST_DATA_INV_EN(r16)      _BFGET_(r16, 7, 7)
    #define   SET16LVDS_TEST_DATA_0_TEST_DATA_INV_EN(r16,v)    _BFSET_(r16, 7, 7,v)

    #define     w32LVDS_TEST_DATA_0_TEST                       {\
            UNSG32 uTEST_DATA                                  :  7;\
            UNSG32 uTEST_DATA_INV_EN                           :  1;\
            UNSG32 RSVDx0_b8                                   : 24;\
          }
    union { UNSG32 u32LVDS_TEST_DATA_0_TEST;
            struct w32LVDS_TEST_DATA_0_TEST;
          };
    ///////////////////////////////////////////////////////////
    } SIE_LVDS_TEST_DATA_0;

    typedef union  T32LVDS_TEST_DATA_0_TEST
          { UNSG32 u32;
            struct w32LVDS_TEST_DATA_0_TEST;
                 } T32LVDS_TEST_DATA_0_TEST;
    ///////////////////////////////////////////////////////////

    typedef union  TLVDS_TEST_DATA_0_TEST
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_TEST_DATA_0_TEST;
                   };
                 } TLVDS_TEST_DATA_0_TEST;

    ///////////////////////////////////////////////////////////
     SIGN32 LVDS_TEST_DATA_0_drvrd(SIE_LVDS_TEST_DATA_0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 LVDS_TEST_DATA_0_drvwr(SIE_LVDS_TEST_DATA_0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void LVDS_TEST_DATA_0_reset(SIE_LVDS_TEST_DATA_0 *p);
     SIGN32 LVDS_TEST_DATA_0_cmp  (SIE_LVDS_TEST_DATA_0 *p, SIE_LVDS_TEST_DATA_0 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define LVDS_TEST_DATA_0_check(p,pie,pfx,hLOG) LVDS_TEST_DATA_0_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define LVDS_TEST_DATA_0_print(p,    pfx,hLOG) LVDS_TEST_DATA_0_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: LVDS_TEST_DATA_0
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE LVDS_DATA_SEL                            (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 7  DSEL                      0x0
///                                    ###
///                                    * TempDBus = {lr_id, fld, de, vsync, hsync, odata, edata}
///                                    * Width of (even) edata = 30
///                                    * Width of (odd) odata = 30
///                                    * If Packer Mode is disabled, odata == edata
///                                    * If value of this reg is N,
///                                    * chX[1] = TempDBus[N]
///                                    ###
///               %%        25         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       7b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_LVDS_DATA_SEL
#define h_LVDS_DATA_SEL (){}

    #define     RA_LVDS_DATA_SEL_SEL                           0x0000

    #define     BA_LVDS_DATA_SEL_SEL_DSEL                      0x0000
    #define     B16LVDS_DATA_SEL_SEL_DSEL                      0x0000
    #define   LSb32LVDS_DATA_SEL_SEL_DSEL                         0
    #define   LSb16LVDS_DATA_SEL_SEL_DSEL                         0
    #define       bLVDS_DATA_SEL_SEL_DSEL                      7
    #define   MSK32LVDS_DATA_SEL_SEL_DSEL                         0x0000007F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_LVDS_DATA_SEL {
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_DATA_SEL_SEL_DSEL(r32)                 _BFGET_(r32, 6, 0)
    #define   SET32LVDS_DATA_SEL_SEL_DSEL(r32,v)               _BFSET_(r32, 6, 0,v)
    #define   GET16LVDS_DATA_SEL_SEL_DSEL(r16)                 _BFGET_(r16, 6, 0)
    #define   SET16LVDS_DATA_SEL_SEL_DSEL(r16,v)               _BFSET_(r16, 6, 0,v)

    #define     w32LVDS_DATA_SEL_SEL                           {\
            UNSG32 uSEL_DSEL                                   :  7;\
            UNSG32 RSVDx0_b7                                   : 25;\
          }
    union { UNSG32 u32LVDS_DATA_SEL_SEL;
            struct w32LVDS_DATA_SEL_SEL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_LVDS_DATA_SEL;

    typedef union  T32LVDS_DATA_SEL_SEL
          { UNSG32 u32;
            struct w32LVDS_DATA_SEL_SEL;
                 } T32LVDS_DATA_SEL_SEL;
    ///////////////////////////////////////////////////////////

    typedef union  TLVDS_DATA_SEL_SEL
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_DATA_SEL_SEL;
                   };
                 } TLVDS_DATA_SEL_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 LVDS_DATA_SEL_drvrd(SIE_LVDS_DATA_SEL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 LVDS_DATA_SEL_drvwr(SIE_LVDS_DATA_SEL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void LVDS_DATA_SEL_reset(SIE_LVDS_DATA_SEL *p);
     SIGN32 LVDS_DATA_SEL_cmp  (SIE_LVDS_DATA_SEL *p, SIE_LVDS_DATA_SEL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define LVDS_DATA_SEL_check(p,pie,pfx,hLOG) LVDS_DATA_SEL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define LVDS_DATA_SEL_print(p,    pfx,hLOG) LVDS_DATA_SEL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: LVDS_DATA_SEL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE LF                      biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 LVDS_CTRL_0          (P)
///               %unsigned 1  PACK_LEGACY_EN            0x0
///                                    ###
///                                    * 1'b0:LVDS_Packer Legacy Mode Disable
///                                    * 1'b1:LVDS_Packer Legacy Mode Enable
///                                    ###
///               %unsigned 1  LVDS_PCLK_OUT_PC          0x0
///                                    ###
///                                    * 1'b0:Spread-Spectrum clock polarity not inverted
///                                    * 1'b1:Spread-Spectrum clock polarity inverted
///                                    ###
///               %unsigned 1  LVDS_PCLK_OUT_DIS         0x0
///                                    ###
///                                    * Disable control for lvds_pclk_out going to digital core logic
///                                    ###
///               %unsigned 1  LVDS_PCLK_PC              0x0
///                                    ###
///                                    * 1'b0:LVDS PCLK polarity not inverted
///                                    * 1'b1:LVDS PCLK polarity inverted
///                                    ###
///               %unsigned 1  LVDS_PCLK_DIS             0x0
///                                    ###
///                                    * Disable control for lvds_pclk going to LVDS PHY logic
///                                    ###
///               %unsigned 1  PACKER_MODE_EN            0x0
///                                    ###
///                                    * 1'b0:Packer Mode Disabled
///                                    * 1'b1:Packer Mode Enabled
///                                    ###
///               %unsigned 1  PACKER_MODE               0x0
///                                    ###
///                                    * 1'b0:Pack 2 data in one transaction
///                                    * 1'b1:Pack 4 data in one transaction
///                                    ###
///               %unsigned 1  TEST_DATA_EN              0x0
///                                    ###
///                                    * 1'b0:Channel data is output
///                                    * 1'b1:Test data is output
///                                    ###
///               %unsigned 1  reserved                  0x0
///               %%        23         # Stuffing bits...
///     @ 0x00004                      (P)
///     # 0x00004 LVDS_TEST_DATA_0_CH  
///               $LVDS_TEST_DATA_0    LVDS_TEST_DATA_0_CH REG      [24]
///     @ 0x00064                      (P)
///     # 0x00064 LVDS_DATA_SEL_CH0_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH0_ REG       [7]
///     @ 0x00080                      (P)
///     # 0x00080 LVDS_DATA_SEL_CH1_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH1_ REG       [7]
///     @ 0x0009C                      (P)
///     # 0x0009C LVDS_DATA_SEL_CH2_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH2_ REG       [7]
///     @ 0x000B8                      (P)
///     # 0x000B8 LVDS_DATA_SEL_CH3_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH3_ REG       [7]
///     @ 0x000D4                      (P)
///     # 0x000D4 LVDS_DATA_SEL_CH4_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH4_ REG       [7]
///     @ 0x000F0                      (P)
///     # 0x000F0 LVDS_DATA_SEL_CH5_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH5_ REG       [7]
///     @ 0x0010C                      (P)
///     # 0x0010C LVDS_DATA_SEL_CH6_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH6_ REG       [7]
///     @ 0x00128                      (P)
///     # 0x00128 LVDS_DATA_SEL_CH7_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH7_ REG       [7]
///     @ 0x00144                      (P)
///     # 0x00144 LVDS_DATA_SEL_CH8_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH8_ REG       [7]
///     @ 0x00160                      (P)
///     # 0x00160 LVDS_DATA_SEL_CH9_   
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH9_ REG       [7]
///     @ 0x0017C                      (P)
///     # 0x0017C LVDS_DATA_SEL_CH12_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH12_ REG       [7]
///     @ 0x00198                      (P)
///     # 0x00198 LVDS_DATA_SEL_CH13_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH13_ REG       [7]
///     @ 0x001B4                      (P)
///     # 0x001B4 LVDS_DATA_SEL_CH14_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH14_ REG       [7]
///     @ 0x001D0                      (P)
///     # 0x001D0 LVDS_DATA_SEL_CH15_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH15_ REG       [7]
///     @ 0x001EC                      (P)
///     # 0x001EC LVDS_DATA_SEL_CH16_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH16_ REG       [7]
///     @ 0x00208                      (P)
///     # 0x00208 LVDS_DATA_SEL_CH17_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH17_ REG       [7]
///     @ 0x00224                      (P)
///     # 0x00224 LVDS_DATA_SEL_CH18_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH18_ REG       [7]
///     @ 0x00240                      (P)
///     # 0x00240 LVDS_DATA_SEL_CH19_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH19_ REG       [7]
///     @ 0x0025C                      (P)
///     # 0x0025C LVDS_DATA_SEL_CH20_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH20_ REG       [7]
///     @ 0x00278                      (P)
///     # 0x00278 LVDS_DATA_SEL_CH21_  
///               $LVDS_DATA_SEL       LVDS_DATA_SEL_CH21_ REG       [7]
///     @ 0x00294 LVDS_DFIFO_CTRL_0    (P)
///               %unsigned 1  EN                        0x0
///                                    ###
///                                    * 1'b0:FIFO Path Disabled
///                                    * 1'b1:FIFO Path Enabled
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00298 LVDS_DFIFO           (P)
///               %unsigned 8  MAX_OCC_0                 0xF8
///                                    ###
///                                    * Max Occupancy in Fifo at which write is blocked
///                                    * To be programmed value>8
///                                    ###
///               %unsigned 2  MAX_OCC_1                 0x3
///                                    ###
///                                    * Max Occupancy in Fifo at which write is blocked
///                                    * To be programmed value>8
///                                    ###
///               %unsigned 8  MIN_OCC_0                 0x8
///                                    ###
///                                    * Min Occupancy in Fifo at which read is blocked
///                                    ###
///               %unsigned 2  MIN_OCC_1                 0x0
///                                    ###
///                                    * Min Occupancy in Fifo at which read is blocked
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x0029C LVDS_FIFO_OCC        (R-)
///               %unsigned 8  STAT_0                    0x0
///                                    ###
///                                    * Current Occupancy
///                                    ###
///               %unsigned 2  STAT_1                    0x0
///                                    ###
///                                    * Current Occupancy
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     672B, bits:    1212b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_LF
#define h_LF (){}

    #define     RA_LF_LVDS_CTRL_0                              0x0000

    #define     BA_LF_LVDS_CTRL_0_PACK_LEGACY_EN               0x0000
    #define     B16LF_LVDS_CTRL_0_PACK_LEGACY_EN               0x0000
    #define   LSb32LF_LVDS_CTRL_0_PACK_LEGACY_EN                  0
    #define   LSb16LF_LVDS_CTRL_0_PACK_LEGACY_EN                  0
    #define       bLF_LVDS_CTRL_0_PACK_LEGACY_EN               1
    #define   MSK32LF_LVDS_CTRL_0_PACK_LEGACY_EN                  0x00000001

    #define     BA_LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC             0x0000
    #define     B16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC             0x0000
    #define   LSb32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC                1
    #define   LSb16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC                1
    #define       bLF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC             1
    #define   MSK32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC                0x00000002

    #define     BA_LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS            0x0000
    #define     B16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS            0x0000
    #define   LSb32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS               2
    #define   LSb16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS               2
    #define       bLF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS            1
    #define   MSK32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS               0x00000004

    #define     BA_LF_LVDS_CTRL_0_LVDS_PCLK_PC                 0x0000
    #define     B16LF_LVDS_CTRL_0_LVDS_PCLK_PC                 0x0000
    #define   LSb32LF_LVDS_CTRL_0_LVDS_PCLK_PC                    3
    #define   LSb16LF_LVDS_CTRL_0_LVDS_PCLK_PC                    3
    #define       bLF_LVDS_CTRL_0_LVDS_PCLK_PC                 1
    #define   MSK32LF_LVDS_CTRL_0_LVDS_PCLK_PC                    0x00000008

    #define     BA_LF_LVDS_CTRL_0_LVDS_PCLK_DIS                0x0000
    #define     B16LF_LVDS_CTRL_0_LVDS_PCLK_DIS                0x0000
    #define   LSb32LF_LVDS_CTRL_0_LVDS_PCLK_DIS                   4
    #define   LSb16LF_LVDS_CTRL_0_LVDS_PCLK_DIS                   4
    #define       bLF_LVDS_CTRL_0_LVDS_PCLK_DIS                1
    #define   MSK32LF_LVDS_CTRL_0_LVDS_PCLK_DIS                   0x00000010

    #define     BA_LF_LVDS_CTRL_0_PACKER_MODE_EN               0x0000
    #define     B16LF_LVDS_CTRL_0_PACKER_MODE_EN               0x0000
    #define   LSb32LF_LVDS_CTRL_0_PACKER_MODE_EN                  5
    #define   LSb16LF_LVDS_CTRL_0_PACKER_MODE_EN                  5
    #define       bLF_LVDS_CTRL_0_PACKER_MODE_EN               1
    #define   MSK32LF_LVDS_CTRL_0_PACKER_MODE_EN                  0x00000020

    #define     BA_LF_LVDS_CTRL_0_PACKER_MODE                  0x0000
    #define     B16LF_LVDS_CTRL_0_PACKER_MODE                  0x0000
    #define   LSb32LF_LVDS_CTRL_0_PACKER_MODE                     6
    #define   LSb16LF_LVDS_CTRL_0_PACKER_MODE                     6
    #define       bLF_LVDS_CTRL_0_PACKER_MODE                  1
    #define   MSK32LF_LVDS_CTRL_0_PACKER_MODE                     0x00000040

    #define     BA_LF_LVDS_CTRL_0_TEST_DATA_EN                 0x0000
    #define     B16LF_LVDS_CTRL_0_TEST_DATA_EN                 0x0000
    #define   LSb32LF_LVDS_CTRL_0_TEST_DATA_EN                    7
    #define   LSb16LF_LVDS_CTRL_0_TEST_DATA_EN                    7
    #define       bLF_LVDS_CTRL_0_TEST_DATA_EN                 1
    #define   MSK32LF_LVDS_CTRL_0_TEST_DATA_EN                    0x00000080

    #define     BA_LF_LVDS_CTRL_0_reserved                     0x0001
    #define     B16LF_LVDS_CTRL_0_reserved                     0x0000
    #define   LSb32LF_LVDS_CTRL_0_reserved                        8
    #define   LSb16LF_LVDS_CTRL_0_reserved                        8
    #define       bLF_LVDS_CTRL_0_reserved                     1
    #define   MSK32LF_LVDS_CTRL_0_reserved                        0x00000100
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_TEST_DATA_0_CH                      0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH0_                       0x0064
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH1_                       0x0080
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH2_                       0x009C
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH3_                       0x00B8
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH4_                       0x00D4
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH5_                       0x00F0
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH6_                       0x010C
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH7_                       0x0128
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH8_                       0x0144
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH9_                       0x0160
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH12_                      0x017C
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH13_                      0x0198
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH14_                      0x01B4
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH15_                      0x01D0
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH16_                      0x01EC
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH17_                      0x0208
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH18_                      0x0224
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH19_                      0x0240
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH20_                      0x025C
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DATA_SEL_CH21_                      0x0278
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DFIFO_CTRL_0                        0x0294

    #define     BA_LF_LVDS_DFIFO_CTRL_0_EN                     0x0294
    #define     B16LF_LVDS_DFIFO_CTRL_0_EN                     0x0294
    #define   LSb32LF_LVDS_DFIFO_CTRL_0_EN                        0
    #define   LSb16LF_LVDS_DFIFO_CTRL_0_EN                        0
    #define       bLF_LVDS_DFIFO_CTRL_0_EN                     1
    #define   MSK32LF_LVDS_DFIFO_CTRL_0_EN                        0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_DFIFO                               0x0298

    #define     BA_LF_LVDS_DFIFO_MAX_OCC_0                     0x0298
    #define     B16LF_LVDS_DFIFO_MAX_OCC_0                     0x0298
    #define   LSb32LF_LVDS_DFIFO_MAX_OCC_0                        0
    #define   LSb16LF_LVDS_DFIFO_MAX_OCC_0                        0
    #define       bLF_LVDS_DFIFO_MAX_OCC_0                     8
    #define   MSK32LF_LVDS_DFIFO_MAX_OCC_0                        0x000000FF

    #define     BA_LF_LVDS_DFIFO_MAX_OCC_1                     0x0299
    #define     B16LF_LVDS_DFIFO_MAX_OCC_1                     0x0298
    #define   LSb32LF_LVDS_DFIFO_MAX_OCC_1                        8
    #define   LSb16LF_LVDS_DFIFO_MAX_OCC_1                        8
    #define       bLF_LVDS_DFIFO_MAX_OCC_1                     2
    #define   MSK32LF_LVDS_DFIFO_MAX_OCC_1                        0x00000300

    #define     BA_LF_LVDS_DFIFO_MIN_OCC_0                     0x0299
    #define     B16LF_LVDS_DFIFO_MIN_OCC_0                     0x0298
    #define   LSb32LF_LVDS_DFIFO_MIN_OCC_0                        10
    #define   LSb16LF_LVDS_DFIFO_MIN_OCC_0                        10
    #define       bLF_LVDS_DFIFO_MIN_OCC_0                     8
    #define   MSK32LF_LVDS_DFIFO_MIN_OCC_0                        0x0003FC00

    #define     BA_LF_LVDS_DFIFO_MIN_OCC_1                     0x029A
    #define     B16LF_LVDS_DFIFO_MIN_OCC_1                     0x029A
    #define   LSb32LF_LVDS_DFIFO_MIN_OCC_1                        18
    #define   LSb16LF_LVDS_DFIFO_MIN_OCC_1                        2
    #define       bLF_LVDS_DFIFO_MIN_OCC_1                     2
    #define   MSK32LF_LVDS_DFIFO_MIN_OCC_1                        0x000C0000
    ///////////////////////////////////////////////////////////
    #define     RA_LF_LVDS_FIFO_OCC                            0x029C

    #define     BA_LF_LVDS_FIFO_OCC_STAT_0                     0x029C
    #define     B16LF_LVDS_FIFO_OCC_STAT_0                     0x029C
    #define   LSb32LF_LVDS_FIFO_OCC_STAT_0                        0
    #define   LSb16LF_LVDS_FIFO_OCC_STAT_0                        0
    #define       bLF_LVDS_FIFO_OCC_STAT_0                     8
    #define   MSK32LF_LVDS_FIFO_OCC_STAT_0                        0x000000FF

    #define     BA_LF_LVDS_FIFO_OCC_STAT_1                     0x029D
    #define     B16LF_LVDS_FIFO_OCC_STAT_1                     0x029C
    #define   LSb32LF_LVDS_FIFO_OCC_STAT_1                        8
    #define   LSb16LF_LVDS_FIFO_OCC_STAT_1                        8
    #define       bLF_LVDS_FIFO_OCC_STAT_1                     2
    #define   MSK32LF_LVDS_FIFO_OCC_STAT_1                        0x00000300
    ///////////////////////////////////////////////////////////

    typedef struct SIE_LF {
    ///////////////////////////////////////////////////////////
    #define   GET32LF_LVDS_CTRL_0_PACK_LEGACY_EN(r32)          _BFGET_(r32, 0, 0)
    #define   SET32LF_LVDS_CTRL_0_PACK_LEGACY_EN(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16LF_LVDS_CTRL_0_PACK_LEGACY_EN(r16)          _BFGET_(r16, 0, 0)
    #define   SET16LF_LVDS_CTRL_0_PACK_LEGACY_EN(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC(r32)        _BFGET_(r32, 1, 1)
    #define   SET32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC(r16)        _BFGET_(r16, 1, 1)
    #define   SET16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_PC(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS(r32)       _BFGET_(r32, 2, 2)
    #define   SET32LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS(r32,v)     _BFSET_(r32, 2, 2,v)
    #define   GET16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS(r16)       _BFGET_(r16, 2, 2)
    #define   SET16LF_LVDS_CTRL_0_LVDS_PCLK_OUT_DIS(r16,v)     _BFSET_(r16, 2, 2,v)

    #define   GET32LF_LVDS_CTRL_0_LVDS_PCLK_PC(r32)            _BFGET_(r32, 3, 3)
    #define   SET32LF_LVDS_CTRL_0_LVDS_PCLK_PC(r32,v)          _BFSET_(r32, 3, 3,v)
    #define   GET16LF_LVDS_CTRL_0_LVDS_PCLK_PC(r16)            _BFGET_(r16, 3, 3)
    #define   SET16LF_LVDS_CTRL_0_LVDS_PCLK_PC(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32LF_LVDS_CTRL_0_LVDS_PCLK_DIS(r32)           _BFGET_(r32, 4, 4)
    #define   SET32LF_LVDS_CTRL_0_LVDS_PCLK_DIS(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16LF_LVDS_CTRL_0_LVDS_PCLK_DIS(r16)           _BFGET_(r16, 4, 4)
    #define   SET16LF_LVDS_CTRL_0_LVDS_PCLK_DIS(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32LF_LVDS_CTRL_0_PACKER_MODE_EN(r32)          _BFGET_(r32, 5, 5)
    #define   SET32LF_LVDS_CTRL_0_PACKER_MODE_EN(r32,v)        _BFSET_(r32, 5, 5,v)
    #define   GET16LF_LVDS_CTRL_0_PACKER_MODE_EN(r16)          _BFGET_(r16, 5, 5)
    #define   SET16LF_LVDS_CTRL_0_PACKER_MODE_EN(r16,v)        _BFSET_(r16, 5, 5,v)

    #define   GET32LF_LVDS_CTRL_0_PACKER_MODE(r32)             _BFGET_(r32, 6, 6)
    #define   SET32LF_LVDS_CTRL_0_PACKER_MODE(r32,v)           _BFSET_(r32, 6, 6,v)
    #define   GET16LF_LVDS_CTRL_0_PACKER_MODE(r16)             _BFGET_(r16, 6, 6)
    #define   SET16LF_LVDS_CTRL_0_PACKER_MODE(r16,v)           _BFSET_(r16, 6, 6,v)

    #define   GET32LF_LVDS_CTRL_0_TEST_DATA_EN(r32)            _BFGET_(r32, 7, 7)
    #define   SET32LF_LVDS_CTRL_0_TEST_DATA_EN(r32,v)          _BFSET_(r32, 7, 7,v)
    #define   GET16LF_LVDS_CTRL_0_TEST_DATA_EN(r16)            _BFGET_(r16, 7, 7)
    #define   SET16LF_LVDS_CTRL_0_TEST_DATA_EN(r16,v)          _BFSET_(r16, 7, 7,v)

    #define   GET32LF_LVDS_CTRL_0_reserved(r32)                _BFGET_(r32, 8, 8)
    #define   SET32LF_LVDS_CTRL_0_reserved(r32,v)              _BFSET_(r32, 8, 8,v)
    #define   GET16LF_LVDS_CTRL_0_reserved(r16)                _BFGET_(r16, 8, 8)
    #define   SET16LF_LVDS_CTRL_0_reserved(r16,v)              _BFSET_(r16, 8, 8,v)

    #define     w32LF_LVDS_CTRL_0                              {\
            UNSG32 uLVDS_CTRL_0_PACK_LEGACY_EN                 :  1;\
            UNSG32 uLVDS_CTRL_0_LVDS_PCLK_OUT_PC               :  1;\
            UNSG32 uLVDS_CTRL_0_LVDS_PCLK_OUT_DIS              :  1;\
            UNSG32 uLVDS_CTRL_0_LVDS_PCLK_PC                   :  1;\
            UNSG32 uLVDS_CTRL_0_LVDS_PCLK_DIS                  :  1;\
            UNSG32 uLVDS_CTRL_0_PACKER_MODE_EN                 :  1;\
            UNSG32 uLVDS_CTRL_0_PACKER_MODE                    :  1;\
            UNSG32 uLVDS_CTRL_0_TEST_DATA_EN                   :  1;\
            UNSG32 uLVDS_CTRL_0_reserved                       :  1;\
            UNSG32 RSVDx0_b9                                   : 23;\
          }
    union { UNSG32 u32LF_LVDS_CTRL_0;
            struct w32LF_LVDS_CTRL_0;
          };
    ///////////////////////////////////////////////////////////
              SIE_LVDS_TEST_DATA_0                             ie_LVDS_TEST_DATA_0_CH[24];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH0_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH1_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH2_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH3_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH4_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH5_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH6_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH7_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH8_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH9_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH12_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH13_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH14_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH15_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH16_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH17_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH18_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH19_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH20_[7];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_DATA_SEL                                ie_LVDS_DATA_SEL_CH21_[7];
    ///////////////////////////////////////////////////////////
    #define   GET32LF_LVDS_DFIFO_CTRL_0_EN(r32)                _BFGET_(r32, 0, 0)
    #define   SET32LF_LVDS_DFIFO_CTRL_0_EN(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16LF_LVDS_DFIFO_CTRL_0_EN(r16)                _BFGET_(r16, 0, 0)
    #define   SET16LF_LVDS_DFIFO_CTRL_0_EN(r16,v)              _BFSET_(r16, 0, 0,v)

    #define     w32LF_LVDS_DFIFO_CTRL_0                        {\
            UNSG32 uLVDS_DFIFO_CTRL_0_EN                       :  1;\
            UNSG32 RSVDx294_b1                                 : 31;\
          }
    union { UNSG32 u32LF_LVDS_DFIFO_CTRL_0;
            struct w32LF_LVDS_DFIFO_CTRL_0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LF_LVDS_DFIFO_MAX_OCC_0(r32)                _BFGET_(r32, 7, 0)
    #define   SET32LF_LVDS_DFIFO_MAX_OCC_0(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16LF_LVDS_DFIFO_MAX_OCC_0(r16)                _BFGET_(r16, 7, 0)
    #define   SET16LF_LVDS_DFIFO_MAX_OCC_0(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32LF_LVDS_DFIFO_MAX_OCC_1(r32)                _BFGET_(r32, 9, 8)
    #define   SET32LF_LVDS_DFIFO_MAX_OCC_1(r32,v)              _BFSET_(r32, 9, 8,v)
    #define   GET16LF_LVDS_DFIFO_MAX_OCC_1(r16)                _BFGET_(r16, 9, 8)
    #define   SET16LF_LVDS_DFIFO_MAX_OCC_1(r16,v)              _BFSET_(r16, 9, 8,v)

    #define   GET32LF_LVDS_DFIFO_MIN_OCC_0(r32)                _BFGET_(r32,17,10)
    #define   SET32LF_LVDS_DFIFO_MIN_OCC_0(r32,v)              _BFSET_(r32,17,10,v)

    #define   GET32LF_LVDS_DFIFO_MIN_OCC_1(r32)                _BFGET_(r32,19,18)
    #define   SET32LF_LVDS_DFIFO_MIN_OCC_1(r32,v)              _BFSET_(r32,19,18,v)
    #define   GET16LF_LVDS_DFIFO_MIN_OCC_1(r16)                _BFGET_(r16, 3, 2)
    #define   SET16LF_LVDS_DFIFO_MIN_OCC_1(r16,v)              _BFSET_(r16, 3, 2,v)

    #define     w32LF_LVDS_DFIFO                               {\
            UNSG32 uLVDS_DFIFO_MAX_OCC_0                       :  8;\
            UNSG32 uLVDS_DFIFO_MAX_OCC_1                       :  2;\
            UNSG32 uLVDS_DFIFO_MIN_OCC_0                       :  8;\
            UNSG32 uLVDS_DFIFO_MIN_OCC_1                       :  2;\
            UNSG32 RSVDx298_b20                                : 12;\
          }
    union { UNSG32 u32LF_LVDS_DFIFO;
            struct w32LF_LVDS_DFIFO;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LF_LVDS_FIFO_OCC_STAT_0(r32)                _BFGET_(r32, 7, 0)
    #define   SET32LF_LVDS_FIFO_OCC_STAT_0(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16LF_LVDS_FIFO_OCC_STAT_0(r16)                _BFGET_(r16, 7, 0)
    #define   SET16LF_LVDS_FIFO_OCC_STAT_0(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32LF_LVDS_FIFO_OCC_STAT_1(r32)                _BFGET_(r32, 9, 8)
    #define   SET32LF_LVDS_FIFO_OCC_STAT_1(r32,v)              _BFSET_(r32, 9, 8,v)
    #define   GET16LF_LVDS_FIFO_OCC_STAT_1(r16)                _BFGET_(r16, 9, 8)
    #define   SET16LF_LVDS_FIFO_OCC_STAT_1(r16,v)              _BFSET_(r16, 9, 8,v)

    #define     w32LF_LVDS_FIFO_OCC                            {\
            UNSG32 uLVDS_FIFO_OCC_STAT_0                       :  8;\
            UNSG32 uLVDS_FIFO_OCC_STAT_1                       :  2;\
            UNSG32 RSVDx29C_b10                                : 22;\
          }
    union { UNSG32 u32LF_LVDS_FIFO_OCC;
            struct w32LF_LVDS_FIFO_OCC;
          };
    ///////////////////////////////////////////////////////////
    } SIE_LF;

    typedef union  T32LF_LVDS_CTRL_0
          { UNSG32 u32;
            struct w32LF_LVDS_CTRL_0;
                 } T32LF_LVDS_CTRL_0;
    typedef union  T32LF_LVDS_DFIFO_CTRL_0
          { UNSG32 u32;
            struct w32LF_LVDS_DFIFO_CTRL_0;
                 } T32LF_LVDS_DFIFO_CTRL_0;
    typedef union  T32LF_LVDS_DFIFO
          { UNSG32 u32;
            struct w32LF_LVDS_DFIFO;
                 } T32LF_LVDS_DFIFO;
    typedef union  T32LF_LVDS_FIFO_OCC
          { UNSG32 u32;
            struct w32LF_LVDS_FIFO_OCC;
                 } T32LF_LVDS_FIFO_OCC;
    ///////////////////////////////////////////////////////////

    typedef union  TLF_LVDS_CTRL_0
          { UNSG32 u32[1];
            struct {
            struct w32LF_LVDS_CTRL_0;
                   };
                 } TLF_LVDS_CTRL_0;
    typedef union  TLF_LVDS_DFIFO_CTRL_0
          { UNSG32 u32[1];
            struct {
            struct w32LF_LVDS_DFIFO_CTRL_0;
                   };
                 } TLF_LVDS_DFIFO_CTRL_0;
    typedef union  TLF_LVDS_DFIFO
          { UNSG32 u32[1];
            struct {
            struct w32LF_LVDS_DFIFO;
                   };
                 } TLF_LVDS_DFIFO;
    typedef union  TLF_LVDS_FIFO_OCC
          { UNSG32 u32[1];
            struct {
            struct w32LF_LVDS_FIFO_OCC;
                   };
                 } TLF_LVDS_FIFO_OCC;

    ///////////////////////////////////////////////////////////
     SIGN32 LF_drvrd(SIE_LF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 LF_drvwr(SIE_LF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void LF_reset(SIE_LF *p);
     SIGN32 LF_cmp  (SIE_LF *p, SIE_LF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define LF_check(p,pie,pfx,hLOG) LF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define LF_print(p,    pfx,hLOG) LF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: LF
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE LVDS_CH                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ANA_TSTPNT           (P)
///               %unsigned 8  SEL                       0x0
///                                    ###
///                                    * Analog test select + enable. Controls which analog signal appears at ANA_TSTPNT_OUT pin
///                                    * 00h:1'bZ
///                                    * 01h:1'bZ
///                                    * 02h:1'bZ
///                                    * …
///                                    * FFh:1'bZ
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00004 D_NBITS              (P)
///               %unsigned 2  CONTORL                   0x0
///                                    ###
///                                    * Data Mode Control
///                                    * 0h:D<N>[6:0] used (LVDS)
///                                    * 1h:D<N>[9:0] used(VbyOne)
///                                    * 2h:reserved
///                                    * 3h:D<N>[19:0] used(VbyOne)
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00008 DIG_TSTPNT           (P)
///               %unsigned 8  SEL                       0x0
///                                    ###
///                                    * DIGITAL test select + enable
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x0000C PU                   (P)
///               %unsigned 1  POWERON                   0x1
///                                    ###
///                                    * Power-on signal for the Serializer
///                                    * 1h:power on
///                                    * 0h:power-down
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00010 RESERVE_I            (P)
///               %unsigned 8  RI_0i                     0x0
///               %unsigned 8  RI_1i                     0x0
///               %unsigned 8  RI_2i                     0x0
///               %unsigned 8  RI_3i                     0x0
///     # 0x00014 RESERVE_I1           
///               %unsigned 8  RI_4i                     0x0
///               %unsigned 8  RI_5i                     0x0
///                                    ###
///                                    * Reserve digital control (inputs)
///                                    * [7:1] : reserved
///                                    * [1] : DTST_EN (over-ride external data, transmits 2^7-1 PRBS)[Should use D_NBITS[1:0]=0h]
///                                    * [0] : INCR_SLEW (1-> increase slew-rate to 1ns 20-80%)
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00018 TX_EMPH              (P)
///               %unsigned 1  EN_0i                     0x0
///               %unsigned 1  EN_1i                     0x0
///               %unsigned 1  EN_2i                     0x0
///               %unsigned 1  EN_3i                     0x0
///               %unsigned 1  EN_4i                     0x0
///               %unsigned 1  EN_5i                     0x0
///                                    ###
///                                    * Transmit emphasis enable
///                                    * 0h:disable TXP<N>/TXN<N>emphasis
///                                    * 1h:enable
///                                    ###
///               %unsigned 2  SWING_0i                  0x2
///               %unsigned 2  SWING_1i                  0x2
///               %unsigned 2  SWING_2i                  0x2
///               %unsigned 2  SWING_3i                  0x2
///               %unsigned 2  SWING_4i                  0x2
///               %unsigned 2  SWING_5i                  0x2
///                                    ###
///                                    * Transmit emphasis swing control
///                                    * Emphasis (%)= Epct = 0.0417*(1 + TX_EMPH_SWING<N>)
///                                    * Vsw(hi)=Vsw,mn*(1+Epct) Vsw(lo)=Vsw,mn*(1-Epct)
///                                    * (Vsw,mn defined below in TX_SWING<N>)
///                                    * See Table1 for enumeration of swings when emphasis is enabled.
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x0001C TX                   (P)
///               %unsigned 1  LB_EN_0i                  0x0
///               %unsigned 1  LB_EN_1i                  0x0
///               %unsigned 1  LB_EN_2i                  0x0
///               %unsigned 1  LB_EN_3i                  0x0
///               %unsigned 1  LB_EN_4i                  0x0
///               %unsigned 1  LB_EN_5i                  0x0
///                                    ###
///                                    * Serial Loopback enable
///                                    * 1h:Enable(local)
///                                    * 0h:TX_LBS_O=TXP<N>/TXN<N>(pass-through)
///                                    ###
///               %unsigned 1  OE_0i                     0x1
///               %unsigned 1  OE_1i                     0x1
///               %unsigned 1  OE_2i                     0x1
///               %unsigned 1  OE_3i                     0x1
///               %unsigned 1  OE_4i                     0x1
///               %unsigned 1  OE_5i                     0x1
///                                    ###
///                                    * Enable pad output drive
///                                    * 0h:disable drive [TXP<N>==TXN<N>==high impedance]
///                                    * 1h:enable driver
///                                    ###
///               %unsigned 1  POL_INV_0i                0x0
///               %unsigned 1  POL_INV_1i                0x0
///               %unsigned 1  POL_INV_2i                0x0
///               %unsigned 1  POL_INV_3i                0x0
///               %unsigned 1  POL_INV_4i                0x0
///               %unsigned 1  POL_INV_5i                0x0
///                                    ###
///                                    * Swap polarity of (TXP<N>/TXN<N>)transmitted data.
///                                    * 0h:normal operations
///                                    * 1h:reverse polarity
///                                    ###
///               %unsigned 3  SWING_0i                  0x4
///               %unsigned 3  SWING_1i                  0x4
///               %unsigned 3  SWING_2i                  0x4
///               %unsigned 3  SWING_3i                  0x4
///               %%        2          # Stuffing bits...
///     # 0x00020 TX1                  
///               %unsigned 3  SWING_4i                  0x4
///               %unsigned 3  SWING_5i                  0x4
///                                    ###
///                                    * Transmit swing:
///                                    * [v(TXP<N>,hi)-v(TXP<N>,lo)] =
///                                    * Vsw,mn=198mV+33mV*TX_SWING = Vpp/2 (neglecting emphasis)
///                                    * Slew-Rate(20-80%): VbyOne/LVDS=50-150ps, 300-500ps
///                                    * 0h : 198mV ; 4h : 330mV
///                                    * 1h : 231mV ; 5h : 363mV
///                                    * 2h : 264mV ; 6h : 396mV
///                                    * 3h : 297mV ; 7h : 429mV
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00024 RESERVE_O            (R-)
///               %unsigned 4  RO_0i                     0x0
///               %unsigned 4  RO_1i                     0x0
///               %unsigned 4  RO_2i                     0x0
///               %unsigned 4  RO_3i                     0x0
///               %unsigned 4  RO_4i                     0x0
///               %unsigned 4  RO_5i                     0x0
///                                    ###
///                                    * Reserve digital control (output)
///                                    * [3:0]:reserved
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00028 DIG                  (R-)
///               %unsigned 4  TSTPNT_OUT                0x0
///                                    ###
///                                    * DIGITAL test point. Controlled by DIG_TSTPNT[7:0]
///                                    * 00h:0h
///                                    * 01h:reserved
///                                    * 02h:reserved
///                                    * …
///                                    * Ffh:reserved
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      44B, bits:     149b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_LVDS_CH
#define h_LVDS_CH (){}

    #define     RA_LVDS_CH_ANA_TSTPNT                          0x0000

    #define     BA_LVDS_CH_ANA_TSTPNT_SEL                      0x0000
    #define     B16LVDS_CH_ANA_TSTPNT_SEL                      0x0000
    #define   LSb32LVDS_CH_ANA_TSTPNT_SEL                         0
    #define   LSb16LVDS_CH_ANA_TSTPNT_SEL                         0
    #define       bLVDS_CH_ANA_TSTPNT_SEL                      8
    #define   MSK32LVDS_CH_ANA_TSTPNT_SEL                         0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_D_NBITS                             0x0004

    #define     BA_LVDS_CH_D_NBITS_CONTORL                     0x0004
    #define     B16LVDS_CH_D_NBITS_CONTORL                     0x0004
    #define   LSb32LVDS_CH_D_NBITS_CONTORL                        0
    #define   LSb16LVDS_CH_D_NBITS_CONTORL                        0
    #define       bLVDS_CH_D_NBITS_CONTORL                     2
    #define   MSK32LVDS_CH_D_NBITS_CONTORL                        0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_DIG_TSTPNT                          0x0008

    #define     BA_LVDS_CH_DIG_TSTPNT_SEL                      0x0008
    #define     B16LVDS_CH_DIG_TSTPNT_SEL                      0x0008
    #define   LSb32LVDS_CH_DIG_TSTPNT_SEL                         0
    #define   LSb16LVDS_CH_DIG_TSTPNT_SEL                         0
    #define       bLVDS_CH_DIG_TSTPNT_SEL                      8
    #define   MSK32LVDS_CH_DIG_TSTPNT_SEL                         0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_PU                                  0x000C

    #define     BA_LVDS_CH_PU_POWERON                          0x000C
    #define     B16LVDS_CH_PU_POWERON                          0x000C
    #define   LSb32LVDS_CH_PU_POWERON                             0
    #define   LSb16LVDS_CH_PU_POWERON                             0
    #define       bLVDS_CH_PU_POWERON                          1
    #define   MSK32LVDS_CH_PU_POWERON                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_RESERVE_I                           0x0010

    #define     BA_LVDS_CH_RESERVE_I_RI_0i                     0x0010
    #define     B16LVDS_CH_RESERVE_I_RI_0i                     0x0010
    #define   LSb32LVDS_CH_RESERVE_I_RI_0i                        0
    #define   LSb16LVDS_CH_RESERVE_I_RI_0i                        0
    #define       bLVDS_CH_RESERVE_I_RI_0i                     8
    #define   MSK32LVDS_CH_RESERVE_I_RI_0i                        0x000000FF

    #define     BA_LVDS_CH_RESERVE_I_RI_1i                     0x0011
    #define     B16LVDS_CH_RESERVE_I_RI_1i                     0x0010
    #define   LSb32LVDS_CH_RESERVE_I_RI_1i                        8
    #define   LSb16LVDS_CH_RESERVE_I_RI_1i                        8
    #define       bLVDS_CH_RESERVE_I_RI_1i                     8
    #define   MSK32LVDS_CH_RESERVE_I_RI_1i                        0x0000FF00

    #define     BA_LVDS_CH_RESERVE_I_RI_2i                     0x0012
    #define     B16LVDS_CH_RESERVE_I_RI_2i                     0x0012
    #define   LSb32LVDS_CH_RESERVE_I_RI_2i                        16
    #define   LSb16LVDS_CH_RESERVE_I_RI_2i                        0
    #define       bLVDS_CH_RESERVE_I_RI_2i                     8
    #define   MSK32LVDS_CH_RESERVE_I_RI_2i                        0x00FF0000

    #define     BA_LVDS_CH_RESERVE_I_RI_3i                     0x0013
    #define     B16LVDS_CH_RESERVE_I_RI_3i                     0x0012
    #define   LSb32LVDS_CH_RESERVE_I_RI_3i                        24
    #define   LSb16LVDS_CH_RESERVE_I_RI_3i                        8
    #define       bLVDS_CH_RESERVE_I_RI_3i                     8
    #define   MSK32LVDS_CH_RESERVE_I_RI_3i                        0xFF000000

    #define     RA_LVDS_CH_RESERVE_I1                          0x0014

    #define     BA_LVDS_CH_RESERVE_I_RI_4i                     0x0014
    #define     B16LVDS_CH_RESERVE_I_RI_4i                     0x0014
    #define   LSb32LVDS_CH_RESERVE_I_RI_4i                        0
    #define   LSb16LVDS_CH_RESERVE_I_RI_4i                        0
    #define       bLVDS_CH_RESERVE_I_RI_4i                     8
    #define   MSK32LVDS_CH_RESERVE_I_RI_4i                        0x000000FF

    #define     BA_LVDS_CH_RESERVE_I_RI_5i                     0x0015
    #define     B16LVDS_CH_RESERVE_I_RI_5i                     0x0014
    #define   LSb32LVDS_CH_RESERVE_I_RI_5i                        8
    #define   LSb16LVDS_CH_RESERVE_I_RI_5i                        8
    #define       bLVDS_CH_RESERVE_I_RI_5i                     8
    #define   MSK32LVDS_CH_RESERVE_I_RI_5i                        0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_TX_EMPH                             0x0018

    #define     BA_LVDS_CH_TX_EMPH_EN_0i                       0x0018
    #define     B16LVDS_CH_TX_EMPH_EN_0i                       0x0018
    #define   LSb32LVDS_CH_TX_EMPH_EN_0i                          0
    #define   LSb16LVDS_CH_TX_EMPH_EN_0i                          0
    #define       bLVDS_CH_TX_EMPH_EN_0i                       1
    #define   MSK32LVDS_CH_TX_EMPH_EN_0i                          0x00000001

    #define     BA_LVDS_CH_TX_EMPH_EN_1i                       0x0018
    #define     B16LVDS_CH_TX_EMPH_EN_1i                       0x0018
    #define   LSb32LVDS_CH_TX_EMPH_EN_1i                          1
    #define   LSb16LVDS_CH_TX_EMPH_EN_1i                          1
    #define       bLVDS_CH_TX_EMPH_EN_1i                       1
    #define   MSK32LVDS_CH_TX_EMPH_EN_1i                          0x00000002

    #define     BA_LVDS_CH_TX_EMPH_EN_2i                       0x0018
    #define     B16LVDS_CH_TX_EMPH_EN_2i                       0x0018
    #define   LSb32LVDS_CH_TX_EMPH_EN_2i                          2
    #define   LSb16LVDS_CH_TX_EMPH_EN_2i                          2
    #define       bLVDS_CH_TX_EMPH_EN_2i                       1
    #define   MSK32LVDS_CH_TX_EMPH_EN_2i                          0x00000004

    #define     BA_LVDS_CH_TX_EMPH_EN_3i                       0x0018
    #define     B16LVDS_CH_TX_EMPH_EN_3i                       0x0018
    #define   LSb32LVDS_CH_TX_EMPH_EN_3i                          3
    #define   LSb16LVDS_CH_TX_EMPH_EN_3i                          3
    #define       bLVDS_CH_TX_EMPH_EN_3i                       1
    #define   MSK32LVDS_CH_TX_EMPH_EN_3i                          0x00000008

    #define     BA_LVDS_CH_TX_EMPH_EN_4i                       0x0018
    #define     B16LVDS_CH_TX_EMPH_EN_4i                       0x0018
    #define   LSb32LVDS_CH_TX_EMPH_EN_4i                          4
    #define   LSb16LVDS_CH_TX_EMPH_EN_4i                          4
    #define       bLVDS_CH_TX_EMPH_EN_4i                       1
    #define   MSK32LVDS_CH_TX_EMPH_EN_4i                          0x00000010

    #define     BA_LVDS_CH_TX_EMPH_EN_5i                       0x0018
    #define     B16LVDS_CH_TX_EMPH_EN_5i                       0x0018
    #define   LSb32LVDS_CH_TX_EMPH_EN_5i                          5
    #define   LSb16LVDS_CH_TX_EMPH_EN_5i                          5
    #define       bLVDS_CH_TX_EMPH_EN_5i                       1
    #define   MSK32LVDS_CH_TX_EMPH_EN_5i                          0x00000020

    #define     BA_LVDS_CH_TX_EMPH_SWING_0i                    0x0018
    #define     B16LVDS_CH_TX_EMPH_SWING_0i                    0x0018
    #define   LSb32LVDS_CH_TX_EMPH_SWING_0i                       6
    #define   LSb16LVDS_CH_TX_EMPH_SWING_0i                       6
    #define       bLVDS_CH_TX_EMPH_SWING_0i                    2
    #define   MSK32LVDS_CH_TX_EMPH_SWING_0i                       0x000000C0

    #define     BA_LVDS_CH_TX_EMPH_SWING_1i                    0x0019
    #define     B16LVDS_CH_TX_EMPH_SWING_1i                    0x0018
    #define   LSb32LVDS_CH_TX_EMPH_SWING_1i                       8
    #define   LSb16LVDS_CH_TX_EMPH_SWING_1i                       8
    #define       bLVDS_CH_TX_EMPH_SWING_1i                    2
    #define   MSK32LVDS_CH_TX_EMPH_SWING_1i                       0x00000300

    #define     BA_LVDS_CH_TX_EMPH_SWING_2i                    0x0019
    #define     B16LVDS_CH_TX_EMPH_SWING_2i                    0x0018
    #define   LSb32LVDS_CH_TX_EMPH_SWING_2i                       10
    #define   LSb16LVDS_CH_TX_EMPH_SWING_2i                       10
    #define       bLVDS_CH_TX_EMPH_SWING_2i                    2
    #define   MSK32LVDS_CH_TX_EMPH_SWING_2i                       0x00000C00

    #define     BA_LVDS_CH_TX_EMPH_SWING_3i                    0x0019
    #define     B16LVDS_CH_TX_EMPH_SWING_3i                    0x0018
    #define   LSb32LVDS_CH_TX_EMPH_SWING_3i                       12
    #define   LSb16LVDS_CH_TX_EMPH_SWING_3i                       12
    #define       bLVDS_CH_TX_EMPH_SWING_3i                    2
    #define   MSK32LVDS_CH_TX_EMPH_SWING_3i                       0x00003000

    #define     BA_LVDS_CH_TX_EMPH_SWING_4i                    0x0019
    #define     B16LVDS_CH_TX_EMPH_SWING_4i                    0x0018
    #define   LSb32LVDS_CH_TX_EMPH_SWING_4i                       14
    #define   LSb16LVDS_CH_TX_EMPH_SWING_4i                       14
    #define       bLVDS_CH_TX_EMPH_SWING_4i                    2
    #define   MSK32LVDS_CH_TX_EMPH_SWING_4i                       0x0000C000

    #define     BA_LVDS_CH_TX_EMPH_SWING_5i                    0x001A
    #define     B16LVDS_CH_TX_EMPH_SWING_5i                    0x001A
    #define   LSb32LVDS_CH_TX_EMPH_SWING_5i                       16
    #define   LSb16LVDS_CH_TX_EMPH_SWING_5i                       0
    #define       bLVDS_CH_TX_EMPH_SWING_5i                    2
    #define   MSK32LVDS_CH_TX_EMPH_SWING_5i                       0x00030000
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_TX                                  0x001C

    #define     BA_LVDS_CH_TX_LB_EN_0i                         0x001C
    #define     B16LVDS_CH_TX_LB_EN_0i                         0x001C
    #define   LSb32LVDS_CH_TX_LB_EN_0i                            0
    #define   LSb16LVDS_CH_TX_LB_EN_0i                            0
    #define       bLVDS_CH_TX_LB_EN_0i                         1
    #define   MSK32LVDS_CH_TX_LB_EN_0i                            0x00000001

    #define     BA_LVDS_CH_TX_LB_EN_1i                         0x001C
    #define     B16LVDS_CH_TX_LB_EN_1i                         0x001C
    #define   LSb32LVDS_CH_TX_LB_EN_1i                            1
    #define   LSb16LVDS_CH_TX_LB_EN_1i                            1
    #define       bLVDS_CH_TX_LB_EN_1i                         1
    #define   MSK32LVDS_CH_TX_LB_EN_1i                            0x00000002

    #define     BA_LVDS_CH_TX_LB_EN_2i                         0x001C
    #define     B16LVDS_CH_TX_LB_EN_2i                         0x001C
    #define   LSb32LVDS_CH_TX_LB_EN_2i                            2
    #define   LSb16LVDS_CH_TX_LB_EN_2i                            2
    #define       bLVDS_CH_TX_LB_EN_2i                         1
    #define   MSK32LVDS_CH_TX_LB_EN_2i                            0x00000004

    #define     BA_LVDS_CH_TX_LB_EN_3i                         0x001C
    #define     B16LVDS_CH_TX_LB_EN_3i                         0x001C
    #define   LSb32LVDS_CH_TX_LB_EN_3i                            3
    #define   LSb16LVDS_CH_TX_LB_EN_3i                            3
    #define       bLVDS_CH_TX_LB_EN_3i                         1
    #define   MSK32LVDS_CH_TX_LB_EN_3i                            0x00000008

    #define     BA_LVDS_CH_TX_LB_EN_4i                         0x001C
    #define     B16LVDS_CH_TX_LB_EN_4i                         0x001C
    #define   LSb32LVDS_CH_TX_LB_EN_4i                            4
    #define   LSb16LVDS_CH_TX_LB_EN_4i                            4
    #define       bLVDS_CH_TX_LB_EN_4i                         1
    #define   MSK32LVDS_CH_TX_LB_EN_4i                            0x00000010

    #define     BA_LVDS_CH_TX_LB_EN_5i                         0x001C
    #define     B16LVDS_CH_TX_LB_EN_5i                         0x001C
    #define   LSb32LVDS_CH_TX_LB_EN_5i                            5
    #define   LSb16LVDS_CH_TX_LB_EN_5i                            5
    #define       bLVDS_CH_TX_LB_EN_5i                         1
    #define   MSK32LVDS_CH_TX_LB_EN_5i                            0x00000020

    #define     BA_LVDS_CH_TX_OE_0i                            0x001C
    #define     B16LVDS_CH_TX_OE_0i                            0x001C
    #define   LSb32LVDS_CH_TX_OE_0i                               6
    #define   LSb16LVDS_CH_TX_OE_0i                               6
    #define       bLVDS_CH_TX_OE_0i                            1
    #define   MSK32LVDS_CH_TX_OE_0i                               0x00000040

    #define     BA_LVDS_CH_TX_OE_1i                            0x001C
    #define     B16LVDS_CH_TX_OE_1i                            0x001C
    #define   LSb32LVDS_CH_TX_OE_1i                               7
    #define   LSb16LVDS_CH_TX_OE_1i                               7
    #define       bLVDS_CH_TX_OE_1i                            1
    #define   MSK32LVDS_CH_TX_OE_1i                               0x00000080

    #define     BA_LVDS_CH_TX_OE_2i                            0x001D
    #define     B16LVDS_CH_TX_OE_2i                            0x001C
    #define   LSb32LVDS_CH_TX_OE_2i                               8
    #define   LSb16LVDS_CH_TX_OE_2i                               8
    #define       bLVDS_CH_TX_OE_2i                            1
    #define   MSK32LVDS_CH_TX_OE_2i                               0x00000100

    #define     BA_LVDS_CH_TX_OE_3i                            0x001D
    #define     B16LVDS_CH_TX_OE_3i                            0x001C
    #define   LSb32LVDS_CH_TX_OE_3i                               9
    #define   LSb16LVDS_CH_TX_OE_3i                               9
    #define       bLVDS_CH_TX_OE_3i                            1
    #define   MSK32LVDS_CH_TX_OE_3i                               0x00000200

    #define     BA_LVDS_CH_TX_OE_4i                            0x001D
    #define     B16LVDS_CH_TX_OE_4i                            0x001C
    #define   LSb32LVDS_CH_TX_OE_4i                               10
    #define   LSb16LVDS_CH_TX_OE_4i                               10
    #define       bLVDS_CH_TX_OE_4i                            1
    #define   MSK32LVDS_CH_TX_OE_4i                               0x00000400

    #define     BA_LVDS_CH_TX_OE_5i                            0x001D
    #define     B16LVDS_CH_TX_OE_5i                            0x001C
    #define   LSb32LVDS_CH_TX_OE_5i                               11
    #define   LSb16LVDS_CH_TX_OE_5i                               11
    #define       bLVDS_CH_TX_OE_5i                            1
    #define   MSK32LVDS_CH_TX_OE_5i                               0x00000800

    #define     BA_LVDS_CH_TX_POL_INV_0i                       0x001D
    #define     B16LVDS_CH_TX_POL_INV_0i                       0x001C
    #define   LSb32LVDS_CH_TX_POL_INV_0i                          12
    #define   LSb16LVDS_CH_TX_POL_INV_0i                          12
    #define       bLVDS_CH_TX_POL_INV_0i                       1
    #define   MSK32LVDS_CH_TX_POL_INV_0i                          0x00001000

    #define     BA_LVDS_CH_TX_POL_INV_1i                       0x001D
    #define     B16LVDS_CH_TX_POL_INV_1i                       0x001C
    #define   LSb32LVDS_CH_TX_POL_INV_1i                          13
    #define   LSb16LVDS_CH_TX_POL_INV_1i                          13
    #define       bLVDS_CH_TX_POL_INV_1i                       1
    #define   MSK32LVDS_CH_TX_POL_INV_1i                          0x00002000

    #define     BA_LVDS_CH_TX_POL_INV_2i                       0x001D
    #define     B16LVDS_CH_TX_POL_INV_2i                       0x001C
    #define   LSb32LVDS_CH_TX_POL_INV_2i                          14
    #define   LSb16LVDS_CH_TX_POL_INV_2i                          14
    #define       bLVDS_CH_TX_POL_INV_2i                       1
    #define   MSK32LVDS_CH_TX_POL_INV_2i                          0x00004000

    #define     BA_LVDS_CH_TX_POL_INV_3i                       0x001D
    #define     B16LVDS_CH_TX_POL_INV_3i                       0x001C
    #define   LSb32LVDS_CH_TX_POL_INV_3i                          15
    #define   LSb16LVDS_CH_TX_POL_INV_3i                          15
    #define       bLVDS_CH_TX_POL_INV_3i                       1
    #define   MSK32LVDS_CH_TX_POL_INV_3i                          0x00008000

    #define     BA_LVDS_CH_TX_POL_INV_4i                       0x001E
    #define     B16LVDS_CH_TX_POL_INV_4i                       0x001E
    #define   LSb32LVDS_CH_TX_POL_INV_4i                          16
    #define   LSb16LVDS_CH_TX_POL_INV_4i                          0
    #define       bLVDS_CH_TX_POL_INV_4i                       1
    #define   MSK32LVDS_CH_TX_POL_INV_4i                          0x00010000

    #define     BA_LVDS_CH_TX_POL_INV_5i                       0x001E
    #define     B16LVDS_CH_TX_POL_INV_5i                       0x001E
    #define   LSb32LVDS_CH_TX_POL_INV_5i                          17
    #define   LSb16LVDS_CH_TX_POL_INV_5i                          1
    #define       bLVDS_CH_TX_POL_INV_5i                       1
    #define   MSK32LVDS_CH_TX_POL_INV_5i                          0x00020000

    #define     BA_LVDS_CH_TX_SWING_0i                         0x001E
    #define     B16LVDS_CH_TX_SWING_0i                         0x001E
    #define   LSb32LVDS_CH_TX_SWING_0i                            18
    #define   LSb16LVDS_CH_TX_SWING_0i                            2
    #define       bLVDS_CH_TX_SWING_0i                         3
    #define   MSK32LVDS_CH_TX_SWING_0i                            0x001C0000

    #define     BA_LVDS_CH_TX_SWING_1i                         0x001E
    #define     B16LVDS_CH_TX_SWING_1i                         0x001E
    #define   LSb32LVDS_CH_TX_SWING_1i                            21
    #define   LSb16LVDS_CH_TX_SWING_1i                            5
    #define       bLVDS_CH_TX_SWING_1i                         3
    #define   MSK32LVDS_CH_TX_SWING_1i                            0x00E00000

    #define     BA_LVDS_CH_TX_SWING_2i                         0x001F
    #define     B16LVDS_CH_TX_SWING_2i                         0x001E
    #define   LSb32LVDS_CH_TX_SWING_2i                            24
    #define   LSb16LVDS_CH_TX_SWING_2i                            8
    #define       bLVDS_CH_TX_SWING_2i                         3
    #define   MSK32LVDS_CH_TX_SWING_2i                            0x07000000

    #define     BA_LVDS_CH_TX_SWING_3i                         0x001F
    #define     B16LVDS_CH_TX_SWING_3i                         0x001E
    #define   LSb32LVDS_CH_TX_SWING_3i                            27
    #define   LSb16LVDS_CH_TX_SWING_3i                            11
    #define       bLVDS_CH_TX_SWING_3i                         3
    #define   MSK32LVDS_CH_TX_SWING_3i                            0x38000000

    #define     RA_LVDS_CH_TX1                                 0x0020

    #define     BA_LVDS_CH_TX_SWING_4i                         0x0020
    #define     B16LVDS_CH_TX_SWING_4i                         0x0020
    #define   LSb32LVDS_CH_TX_SWING_4i                            0
    #define   LSb16LVDS_CH_TX_SWING_4i                            0
    #define       bLVDS_CH_TX_SWING_4i                         3
    #define   MSK32LVDS_CH_TX_SWING_4i                            0x00000007

    #define     BA_LVDS_CH_TX_SWING_5i                         0x0020
    #define     B16LVDS_CH_TX_SWING_5i                         0x0020
    #define   LSb32LVDS_CH_TX_SWING_5i                            3
    #define   LSb16LVDS_CH_TX_SWING_5i                            3
    #define       bLVDS_CH_TX_SWING_5i                         3
    #define   MSK32LVDS_CH_TX_SWING_5i                            0x00000038
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_RESERVE_O                           0x0024

    #define     BA_LVDS_CH_RESERVE_O_RO_0i                     0x0024
    #define     B16LVDS_CH_RESERVE_O_RO_0i                     0x0024
    #define   LSb32LVDS_CH_RESERVE_O_RO_0i                        0
    #define   LSb16LVDS_CH_RESERVE_O_RO_0i                        0
    #define       bLVDS_CH_RESERVE_O_RO_0i                     4
    #define   MSK32LVDS_CH_RESERVE_O_RO_0i                        0x0000000F

    #define     BA_LVDS_CH_RESERVE_O_RO_1i                     0x0024
    #define     B16LVDS_CH_RESERVE_O_RO_1i                     0x0024
    #define   LSb32LVDS_CH_RESERVE_O_RO_1i                        4
    #define   LSb16LVDS_CH_RESERVE_O_RO_1i                        4
    #define       bLVDS_CH_RESERVE_O_RO_1i                     4
    #define   MSK32LVDS_CH_RESERVE_O_RO_1i                        0x000000F0

    #define     BA_LVDS_CH_RESERVE_O_RO_2i                     0x0025
    #define     B16LVDS_CH_RESERVE_O_RO_2i                     0x0024
    #define   LSb32LVDS_CH_RESERVE_O_RO_2i                        8
    #define   LSb16LVDS_CH_RESERVE_O_RO_2i                        8
    #define       bLVDS_CH_RESERVE_O_RO_2i                     4
    #define   MSK32LVDS_CH_RESERVE_O_RO_2i                        0x00000F00

    #define     BA_LVDS_CH_RESERVE_O_RO_3i                     0x0025
    #define     B16LVDS_CH_RESERVE_O_RO_3i                     0x0024
    #define   LSb32LVDS_CH_RESERVE_O_RO_3i                        12
    #define   LSb16LVDS_CH_RESERVE_O_RO_3i                        12
    #define       bLVDS_CH_RESERVE_O_RO_3i                     4
    #define   MSK32LVDS_CH_RESERVE_O_RO_3i                        0x0000F000

    #define     BA_LVDS_CH_RESERVE_O_RO_4i                     0x0026
    #define     B16LVDS_CH_RESERVE_O_RO_4i                     0x0026
    #define   LSb32LVDS_CH_RESERVE_O_RO_4i                        16
    #define   LSb16LVDS_CH_RESERVE_O_RO_4i                        0
    #define       bLVDS_CH_RESERVE_O_RO_4i                     4
    #define   MSK32LVDS_CH_RESERVE_O_RO_4i                        0x000F0000

    #define     BA_LVDS_CH_RESERVE_O_RO_5i                     0x0026
    #define     B16LVDS_CH_RESERVE_O_RO_5i                     0x0026
    #define   LSb32LVDS_CH_RESERVE_O_RO_5i                        20
    #define   LSb16LVDS_CH_RESERVE_O_RO_5i                        4
    #define       bLVDS_CH_RESERVE_O_RO_5i                     4
    #define   MSK32LVDS_CH_RESERVE_O_RO_5i                        0x00F00000
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_CH_DIG                                 0x0028

    #define     BA_LVDS_CH_DIG_TSTPNT_OUT                      0x0028
    #define     B16LVDS_CH_DIG_TSTPNT_OUT                      0x0028
    #define   LSb32LVDS_CH_DIG_TSTPNT_OUT                         0
    #define   LSb16LVDS_CH_DIG_TSTPNT_OUT                         0
    #define       bLVDS_CH_DIG_TSTPNT_OUT                      4
    #define   MSK32LVDS_CH_DIG_TSTPNT_OUT                         0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_LVDS_CH {
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_ANA_TSTPNT_SEL(r32)                 _BFGET_(r32, 7, 0)
    #define   SET32LVDS_CH_ANA_TSTPNT_SEL(r32,v)               _BFSET_(r32, 7, 0,v)
    #define   GET16LVDS_CH_ANA_TSTPNT_SEL(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16LVDS_CH_ANA_TSTPNT_SEL(r16,v)               _BFSET_(r16, 7, 0,v)

    #define     w32LVDS_CH_ANA_TSTPNT                          {\
            UNSG32 uANA_TSTPNT_SEL                             :  8;\
            UNSG32 RSVDx0_b8                                   : 24;\
          }
    union { UNSG32 u32LVDS_CH_ANA_TSTPNT;
            struct w32LVDS_CH_ANA_TSTPNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_D_NBITS_CONTORL(r32)                _BFGET_(r32, 1, 0)
    #define   SET32LVDS_CH_D_NBITS_CONTORL(r32,v)              _BFSET_(r32, 1, 0,v)
    #define   GET16LVDS_CH_D_NBITS_CONTORL(r16)                _BFGET_(r16, 1, 0)
    #define   SET16LVDS_CH_D_NBITS_CONTORL(r16,v)              _BFSET_(r16, 1, 0,v)

    #define     w32LVDS_CH_D_NBITS                             {\
            UNSG32 uD_NBITS_CONTORL                            :  2;\
            UNSG32 RSVDx4_b2                                   : 30;\
          }
    union { UNSG32 u32LVDS_CH_D_NBITS;
            struct w32LVDS_CH_D_NBITS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_DIG_TSTPNT_SEL(r32)                 _BFGET_(r32, 7, 0)
    #define   SET32LVDS_CH_DIG_TSTPNT_SEL(r32,v)               _BFSET_(r32, 7, 0,v)
    #define   GET16LVDS_CH_DIG_TSTPNT_SEL(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16LVDS_CH_DIG_TSTPNT_SEL(r16,v)               _BFSET_(r16, 7, 0,v)

    #define     w32LVDS_CH_DIG_TSTPNT                          {\
            UNSG32 uDIG_TSTPNT_SEL                             :  8;\
            UNSG32 RSVDx8_b8                                   : 24;\
          }
    union { UNSG32 u32LVDS_CH_DIG_TSTPNT;
            struct w32LVDS_CH_DIG_TSTPNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_PU_POWERON(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32LVDS_CH_PU_POWERON(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_CH_PU_POWERON(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16LVDS_CH_PU_POWERON(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32LVDS_CH_PU                                  {\
            UNSG32 uPU_POWERON                                 :  1;\
            UNSG32 RSVDxC_b1                                   : 31;\
          }
    union { UNSG32 u32LVDS_CH_PU;
            struct w32LVDS_CH_PU;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_RESERVE_I_RI_0i(r32)                _BFGET_(r32, 7, 0)
    #define   SET32LVDS_CH_RESERVE_I_RI_0i(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16LVDS_CH_RESERVE_I_RI_0i(r16)                _BFGET_(r16, 7, 0)
    #define   SET16LVDS_CH_RESERVE_I_RI_0i(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32LVDS_CH_RESERVE_I_RI_1i(r32)                _BFGET_(r32,15, 8)
    #define   SET32LVDS_CH_RESERVE_I_RI_1i(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16LVDS_CH_RESERVE_I_RI_1i(r16)                _BFGET_(r16,15, 8)
    #define   SET16LVDS_CH_RESERVE_I_RI_1i(r16,v)              _BFSET_(r16,15, 8,v)

    #define   GET32LVDS_CH_RESERVE_I_RI_2i(r32)                _BFGET_(r32,23,16)
    #define   SET32LVDS_CH_RESERVE_I_RI_2i(r32,v)              _BFSET_(r32,23,16,v)
    #define   GET16LVDS_CH_RESERVE_I_RI_2i(r16)                _BFGET_(r16, 7, 0)
    #define   SET16LVDS_CH_RESERVE_I_RI_2i(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32LVDS_CH_RESERVE_I_RI_3i(r32)                _BFGET_(r32,31,24)
    #define   SET32LVDS_CH_RESERVE_I_RI_3i(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16LVDS_CH_RESERVE_I_RI_3i(r16)                _BFGET_(r16,15, 8)
    #define   SET16LVDS_CH_RESERVE_I_RI_3i(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32LVDS_CH_RESERVE_I                           {\
            UNSG32 uRESERVE_I_RI_0i                            :  8;\
            UNSG32 uRESERVE_I_RI_1i                            :  8;\
            UNSG32 uRESERVE_I_RI_2i                            :  8;\
            UNSG32 uRESERVE_I_RI_3i                            :  8;\
          }
    union { UNSG32 u32LVDS_CH_RESERVE_I;
            struct w32LVDS_CH_RESERVE_I;
          };
    #define   GET32LVDS_CH_RESERVE_I_RI_4i(r32)                _BFGET_(r32, 7, 0)
    #define   SET32LVDS_CH_RESERVE_I_RI_4i(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16LVDS_CH_RESERVE_I_RI_4i(r16)                _BFGET_(r16, 7, 0)
    #define   SET16LVDS_CH_RESERVE_I_RI_4i(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32LVDS_CH_RESERVE_I_RI_5i(r32)                _BFGET_(r32,15, 8)
    #define   SET32LVDS_CH_RESERVE_I_RI_5i(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16LVDS_CH_RESERVE_I_RI_5i(r16)                _BFGET_(r16,15, 8)
    #define   SET16LVDS_CH_RESERVE_I_RI_5i(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32LVDS_CH_RESERVE_I1                          {\
            UNSG32 uRESERVE_I_RI_4i                            :  8;\
            UNSG32 uRESERVE_I_RI_5i                            :  8;\
            UNSG32 RSVDx14_b16                                 : 16;\
          }
    union { UNSG32 u32LVDS_CH_RESERVE_I1;
            struct w32LVDS_CH_RESERVE_I1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_TX_EMPH_EN_0i(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32LVDS_CH_TX_EMPH_EN_0i(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_CH_TX_EMPH_EN_0i(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16LVDS_CH_TX_EMPH_EN_0i(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32LVDS_CH_TX_EMPH_EN_1i(r32)                  _BFGET_(r32, 1, 1)
    #define   SET32LVDS_CH_TX_EMPH_EN_1i(r32,v)                _BFSET_(r32, 1, 1,v)
    #define   GET16LVDS_CH_TX_EMPH_EN_1i(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16LVDS_CH_TX_EMPH_EN_1i(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32LVDS_CH_TX_EMPH_EN_2i(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32LVDS_CH_TX_EMPH_EN_2i(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16LVDS_CH_TX_EMPH_EN_2i(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16LVDS_CH_TX_EMPH_EN_2i(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32LVDS_CH_TX_EMPH_EN_3i(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32LVDS_CH_TX_EMPH_EN_3i(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16LVDS_CH_TX_EMPH_EN_3i(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16LVDS_CH_TX_EMPH_EN_3i(r16,v)                _BFSET_(r16, 3, 3,v)

    #define   GET32LVDS_CH_TX_EMPH_EN_4i(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32LVDS_CH_TX_EMPH_EN_4i(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16LVDS_CH_TX_EMPH_EN_4i(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16LVDS_CH_TX_EMPH_EN_4i(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32LVDS_CH_TX_EMPH_EN_5i(r32)                  _BFGET_(r32, 5, 5)
    #define   SET32LVDS_CH_TX_EMPH_EN_5i(r32,v)                _BFSET_(r32, 5, 5,v)
    #define   GET16LVDS_CH_TX_EMPH_EN_5i(r16)                  _BFGET_(r16, 5, 5)
    #define   SET16LVDS_CH_TX_EMPH_EN_5i(r16,v)                _BFSET_(r16, 5, 5,v)

    #define   GET32LVDS_CH_TX_EMPH_SWING_0i(r32)               _BFGET_(r32, 7, 6)
    #define   SET32LVDS_CH_TX_EMPH_SWING_0i(r32,v)             _BFSET_(r32, 7, 6,v)
    #define   GET16LVDS_CH_TX_EMPH_SWING_0i(r16)               _BFGET_(r16, 7, 6)
    #define   SET16LVDS_CH_TX_EMPH_SWING_0i(r16,v)             _BFSET_(r16, 7, 6,v)

    #define   GET32LVDS_CH_TX_EMPH_SWING_1i(r32)               _BFGET_(r32, 9, 8)
    #define   SET32LVDS_CH_TX_EMPH_SWING_1i(r32,v)             _BFSET_(r32, 9, 8,v)
    #define   GET16LVDS_CH_TX_EMPH_SWING_1i(r16)               _BFGET_(r16, 9, 8)
    #define   SET16LVDS_CH_TX_EMPH_SWING_1i(r16,v)             _BFSET_(r16, 9, 8,v)

    #define   GET32LVDS_CH_TX_EMPH_SWING_2i(r32)               _BFGET_(r32,11,10)
    #define   SET32LVDS_CH_TX_EMPH_SWING_2i(r32,v)             _BFSET_(r32,11,10,v)
    #define   GET16LVDS_CH_TX_EMPH_SWING_2i(r16)               _BFGET_(r16,11,10)
    #define   SET16LVDS_CH_TX_EMPH_SWING_2i(r16,v)             _BFSET_(r16,11,10,v)

    #define   GET32LVDS_CH_TX_EMPH_SWING_3i(r32)               _BFGET_(r32,13,12)
    #define   SET32LVDS_CH_TX_EMPH_SWING_3i(r32,v)             _BFSET_(r32,13,12,v)
    #define   GET16LVDS_CH_TX_EMPH_SWING_3i(r16)               _BFGET_(r16,13,12)
    #define   SET16LVDS_CH_TX_EMPH_SWING_3i(r16,v)             _BFSET_(r16,13,12,v)

    #define   GET32LVDS_CH_TX_EMPH_SWING_4i(r32)               _BFGET_(r32,15,14)
    #define   SET32LVDS_CH_TX_EMPH_SWING_4i(r32,v)             _BFSET_(r32,15,14,v)
    #define   GET16LVDS_CH_TX_EMPH_SWING_4i(r16)               _BFGET_(r16,15,14)
    #define   SET16LVDS_CH_TX_EMPH_SWING_4i(r16,v)             _BFSET_(r16,15,14,v)

    #define   GET32LVDS_CH_TX_EMPH_SWING_5i(r32)               _BFGET_(r32,17,16)
    #define   SET32LVDS_CH_TX_EMPH_SWING_5i(r32,v)             _BFSET_(r32,17,16,v)
    #define   GET16LVDS_CH_TX_EMPH_SWING_5i(r16)               _BFGET_(r16, 1, 0)
    #define   SET16LVDS_CH_TX_EMPH_SWING_5i(r16,v)             _BFSET_(r16, 1, 0,v)

    #define     w32LVDS_CH_TX_EMPH                             {\
            UNSG32 uTX_EMPH_EN_0i                              :  1;\
            UNSG32 uTX_EMPH_EN_1i                              :  1;\
            UNSG32 uTX_EMPH_EN_2i                              :  1;\
            UNSG32 uTX_EMPH_EN_3i                              :  1;\
            UNSG32 uTX_EMPH_EN_4i                              :  1;\
            UNSG32 uTX_EMPH_EN_5i                              :  1;\
            UNSG32 uTX_EMPH_SWING_0i                           :  2;\
            UNSG32 uTX_EMPH_SWING_1i                           :  2;\
            UNSG32 uTX_EMPH_SWING_2i                           :  2;\
            UNSG32 uTX_EMPH_SWING_3i                           :  2;\
            UNSG32 uTX_EMPH_SWING_4i                           :  2;\
            UNSG32 uTX_EMPH_SWING_5i                           :  2;\
            UNSG32 RSVDx18_b18                                 : 14;\
          }
    union { UNSG32 u32LVDS_CH_TX_EMPH;
            struct w32LVDS_CH_TX_EMPH;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_TX_LB_EN_0i(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32LVDS_CH_TX_LB_EN_0i(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_CH_TX_LB_EN_0i(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16LVDS_CH_TX_LB_EN_0i(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32LVDS_CH_TX_LB_EN_1i(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32LVDS_CH_TX_LB_EN_1i(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16LVDS_CH_TX_LB_EN_1i(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16LVDS_CH_TX_LB_EN_1i(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32LVDS_CH_TX_LB_EN_2i(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32LVDS_CH_TX_LB_EN_2i(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16LVDS_CH_TX_LB_EN_2i(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16LVDS_CH_TX_LB_EN_2i(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32LVDS_CH_TX_LB_EN_3i(r32)                    _BFGET_(r32, 3, 3)
    #define   SET32LVDS_CH_TX_LB_EN_3i(r32,v)                  _BFSET_(r32, 3, 3,v)
    #define   GET16LVDS_CH_TX_LB_EN_3i(r16)                    _BFGET_(r16, 3, 3)
    #define   SET16LVDS_CH_TX_LB_EN_3i(r16,v)                  _BFSET_(r16, 3, 3,v)

    #define   GET32LVDS_CH_TX_LB_EN_4i(r32)                    _BFGET_(r32, 4, 4)
    #define   SET32LVDS_CH_TX_LB_EN_4i(r32,v)                  _BFSET_(r32, 4, 4,v)
    #define   GET16LVDS_CH_TX_LB_EN_4i(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16LVDS_CH_TX_LB_EN_4i(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define   GET32LVDS_CH_TX_LB_EN_5i(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32LVDS_CH_TX_LB_EN_5i(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16LVDS_CH_TX_LB_EN_5i(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16LVDS_CH_TX_LB_EN_5i(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define   GET32LVDS_CH_TX_OE_0i(r32)                       _BFGET_(r32, 6, 6)
    #define   SET32LVDS_CH_TX_OE_0i(r32,v)                     _BFSET_(r32, 6, 6,v)
    #define   GET16LVDS_CH_TX_OE_0i(r16)                       _BFGET_(r16, 6, 6)
    #define   SET16LVDS_CH_TX_OE_0i(r16,v)                     _BFSET_(r16, 6, 6,v)

    #define   GET32LVDS_CH_TX_OE_1i(r32)                       _BFGET_(r32, 7, 7)
    #define   SET32LVDS_CH_TX_OE_1i(r32,v)                     _BFSET_(r32, 7, 7,v)
    #define   GET16LVDS_CH_TX_OE_1i(r16)                       _BFGET_(r16, 7, 7)
    #define   SET16LVDS_CH_TX_OE_1i(r16,v)                     _BFSET_(r16, 7, 7,v)

    #define   GET32LVDS_CH_TX_OE_2i(r32)                       _BFGET_(r32, 8, 8)
    #define   SET32LVDS_CH_TX_OE_2i(r32,v)                     _BFSET_(r32, 8, 8,v)
    #define   GET16LVDS_CH_TX_OE_2i(r16)                       _BFGET_(r16, 8, 8)
    #define   SET16LVDS_CH_TX_OE_2i(r16,v)                     _BFSET_(r16, 8, 8,v)

    #define   GET32LVDS_CH_TX_OE_3i(r32)                       _BFGET_(r32, 9, 9)
    #define   SET32LVDS_CH_TX_OE_3i(r32,v)                     _BFSET_(r32, 9, 9,v)
    #define   GET16LVDS_CH_TX_OE_3i(r16)                       _BFGET_(r16, 9, 9)
    #define   SET16LVDS_CH_TX_OE_3i(r16,v)                     _BFSET_(r16, 9, 9,v)

    #define   GET32LVDS_CH_TX_OE_4i(r32)                       _BFGET_(r32,10,10)
    #define   SET32LVDS_CH_TX_OE_4i(r32,v)                     _BFSET_(r32,10,10,v)
    #define   GET16LVDS_CH_TX_OE_4i(r16)                       _BFGET_(r16,10,10)
    #define   SET16LVDS_CH_TX_OE_4i(r16,v)                     _BFSET_(r16,10,10,v)

    #define   GET32LVDS_CH_TX_OE_5i(r32)                       _BFGET_(r32,11,11)
    #define   SET32LVDS_CH_TX_OE_5i(r32,v)                     _BFSET_(r32,11,11,v)
    #define   GET16LVDS_CH_TX_OE_5i(r16)                       _BFGET_(r16,11,11)
    #define   SET16LVDS_CH_TX_OE_5i(r16,v)                     _BFSET_(r16,11,11,v)

    #define   GET32LVDS_CH_TX_POL_INV_0i(r32)                  _BFGET_(r32,12,12)
    #define   SET32LVDS_CH_TX_POL_INV_0i(r32,v)                _BFSET_(r32,12,12,v)
    #define   GET16LVDS_CH_TX_POL_INV_0i(r16)                  _BFGET_(r16,12,12)
    #define   SET16LVDS_CH_TX_POL_INV_0i(r16,v)                _BFSET_(r16,12,12,v)

    #define   GET32LVDS_CH_TX_POL_INV_1i(r32)                  _BFGET_(r32,13,13)
    #define   SET32LVDS_CH_TX_POL_INV_1i(r32,v)                _BFSET_(r32,13,13,v)
    #define   GET16LVDS_CH_TX_POL_INV_1i(r16)                  _BFGET_(r16,13,13)
    #define   SET16LVDS_CH_TX_POL_INV_1i(r16,v)                _BFSET_(r16,13,13,v)

    #define   GET32LVDS_CH_TX_POL_INV_2i(r32)                  _BFGET_(r32,14,14)
    #define   SET32LVDS_CH_TX_POL_INV_2i(r32,v)                _BFSET_(r32,14,14,v)
    #define   GET16LVDS_CH_TX_POL_INV_2i(r16)                  _BFGET_(r16,14,14)
    #define   SET16LVDS_CH_TX_POL_INV_2i(r16,v)                _BFSET_(r16,14,14,v)

    #define   GET32LVDS_CH_TX_POL_INV_3i(r32)                  _BFGET_(r32,15,15)
    #define   SET32LVDS_CH_TX_POL_INV_3i(r32,v)                _BFSET_(r32,15,15,v)
    #define   GET16LVDS_CH_TX_POL_INV_3i(r16)                  _BFGET_(r16,15,15)
    #define   SET16LVDS_CH_TX_POL_INV_3i(r16,v)                _BFSET_(r16,15,15,v)

    #define   GET32LVDS_CH_TX_POL_INV_4i(r32)                  _BFGET_(r32,16,16)
    #define   SET32LVDS_CH_TX_POL_INV_4i(r32,v)                _BFSET_(r32,16,16,v)
    #define   GET16LVDS_CH_TX_POL_INV_4i(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16LVDS_CH_TX_POL_INV_4i(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32LVDS_CH_TX_POL_INV_5i(r32)                  _BFGET_(r32,17,17)
    #define   SET32LVDS_CH_TX_POL_INV_5i(r32,v)                _BFSET_(r32,17,17,v)
    #define   GET16LVDS_CH_TX_POL_INV_5i(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16LVDS_CH_TX_POL_INV_5i(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32LVDS_CH_TX_SWING_0i(r32)                    _BFGET_(r32,20,18)
    #define   SET32LVDS_CH_TX_SWING_0i(r32,v)                  _BFSET_(r32,20,18,v)
    #define   GET16LVDS_CH_TX_SWING_0i(r16)                    _BFGET_(r16, 4, 2)
    #define   SET16LVDS_CH_TX_SWING_0i(r16,v)                  _BFSET_(r16, 4, 2,v)

    #define   GET32LVDS_CH_TX_SWING_1i(r32)                    _BFGET_(r32,23,21)
    #define   SET32LVDS_CH_TX_SWING_1i(r32,v)                  _BFSET_(r32,23,21,v)
    #define   GET16LVDS_CH_TX_SWING_1i(r16)                    _BFGET_(r16, 7, 5)
    #define   SET16LVDS_CH_TX_SWING_1i(r16,v)                  _BFSET_(r16, 7, 5,v)

    #define   GET32LVDS_CH_TX_SWING_2i(r32)                    _BFGET_(r32,26,24)
    #define   SET32LVDS_CH_TX_SWING_2i(r32,v)                  _BFSET_(r32,26,24,v)
    #define   GET16LVDS_CH_TX_SWING_2i(r16)                    _BFGET_(r16,10, 8)
    #define   SET16LVDS_CH_TX_SWING_2i(r16,v)                  _BFSET_(r16,10, 8,v)

    #define   GET32LVDS_CH_TX_SWING_3i(r32)                    _BFGET_(r32,29,27)
    #define   SET32LVDS_CH_TX_SWING_3i(r32,v)                  _BFSET_(r32,29,27,v)
    #define   GET16LVDS_CH_TX_SWING_3i(r16)                    _BFGET_(r16,13,11)
    #define   SET16LVDS_CH_TX_SWING_3i(r16,v)                  _BFSET_(r16,13,11,v)

    #define     w32LVDS_CH_TX                                  {\
            UNSG32 uTX_LB_EN_0i                                :  1;\
            UNSG32 uTX_LB_EN_1i                                :  1;\
            UNSG32 uTX_LB_EN_2i                                :  1;\
            UNSG32 uTX_LB_EN_3i                                :  1;\
            UNSG32 uTX_LB_EN_4i                                :  1;\
            UNSG32 uTX_LB_EN_5i                                :  1;\
            UNSG32 uTX_OE_0i                                   :  1;\
            UNSG32 uTX_OE_1i                                   :  1;\
            UNSG32 uTX_OE_2i                                   :  1;\
            UNSG32 uTX_OE_3i                                   :  1;\
            UNSG32 uTX_OE_4i                                   :  1;\
            UNSG32 uTX_OE_5i                                   :  1;\
            UNSG32 uTX_POL_INV_0i                              :  1;\
            UNSG32 uTX_POL_INV_1i                              :  1;\
            UNSG32 uTX_POL_INV_2i                              :  1;\
            UNSG32 uTX_POL_INV_3i                              :  1;\
            UNSG32 uTX_POL_INV_4i                              :  1;\
            UNSG32 uTX_POL_INV_5i                              :  1;\
            UNSG32 uTX_SWING_0i                                :  3;\
            UNSG32 uTX_SWING_1i                                :  3;\
            UNSG32 uTX_SWING_2i                                :  3;\
            UNSG32 uTX_SWING_3i                                :  3;\
            UNSG32 RSVDx1C_b30                                 :  2;\
          }
    union { UNSG32 u32LVDS_CH_TX;
            struct w32LVDS_CH_TX;
          };
    #define   GET32LVDS_CH_TX_SWING_4i(r32)                    _BFGET_(r32, 2, 0)
    #define   SET32LVDS_CH_TX_SWING_4i(r32,v)                  _BFSET_(r32, 2, 0,v)
    #define   GET16LVDS_CH_TX_SWING_4i(r16)                    _BFGET_(r16, 2, 0)
    #define   SET16LVDS_CH_TX_SWING_4i(r16,v)                  _BFSET_(r16, 2, 0,v)

    #define   GET32LVDS_CH_TX_SWING_5i(r32)                    _BFGET_(r32, 5, 3)
    #define   SET32LVDS_CH_TX_SWING_5i(r32,v)                  _BFSET_(r32, 5, 3,v)
    #define   GET16LVDS_CH_TX_SWING_5i(r16)                    _BFGET_(r16, 5, 3)
    #define   SET16LVDS_CH_TX_SWING_5i(r16,v)                  _BFSET_(r16, 5, 3,v)

    #define     w32LVDS_CH_TX1                                 {\
            UNSG32 uTX_SWING_4i                                :  3;\
            UNSG32 uTX_SWING_5i                                :  3;\
            UNSG32 RSVDx20_b6                                  : 26;\
          }
    union { UNSG32 u32LVDS_CH_TX1;
            struct w32LVDS_CH_TX1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_RESERVE_O_RO_0i(r32)                _BFGET_(r32, 3, 0)
    #define   SET32LVDS_CH_RESERVE_O_RO_0i(r32,v)              _BFSET_(r32, 3, 0,v)
    #define   GET16LVDS_CH_RESERVE_O_RO_0i(r16)                _BFGET_(r16, 3, 0)
    #define   SET16LVDS_CH_RESERVE_O_RO_0i(r16,v)              _BFSET_(r16, 3, 0,v)

    #define   GET32LVDS_CH_RESERVE_O_RO_1i(r32)                _BFGET_(r32, 7, 4)
    #define   SET32LVDS_CH_RESERVE_O_RO_1i(r32,v)              _BFSET_(r32, 7, 4,v)
    #define   GET16LVDS_CH_RESERVE_O_RO_1i(r16)                _BFGET_(r16, 7, 4)
    #define   SET16LVDS_CH_RESERVE_O_RO_1i(r16,v)              _BFSET_(r16, 7, 4,v)

    #define   GET32LVDS_CH_RESERVE_O_RO_2i(r32)                _BFGET_(r32,11, 8)
    #define   SET32LVDS_CH_RESERVE_O_RO_2i(r32,v)              _BFSET_(r32,11, 8,v)
    #define   GET16LVDS_CH_RESERVE_O_RO_2i(r16)                _BFGET_(r16,11, 8)
    #define   SET16LVDS_CH_RESERVE_O_RO_2i(r16,v)              _BFSET_(r16,11, 8,v)

    #define   GET32LVDS_CH_RESERVE_O_RO_3i(r32)                _BFGET_(r32,15,12)
    #define   SET32LVDS_CH_RESERVE_O_RO_3i(r32,v)              _BFSET_(r32,15,12,v)
    #define   GET16LVDS_CH_RESERVE_O_RO_3i(r16)                _BFGET_(r16,15,12)
    #define   SET16LVDS_CH_RESERVE_O_RO_3i(r16,v)              _BFSET_(r16,15,12,v)

    #define   GET32LVDS_CH_RESERVE_O_RO_4i(r32)                _BFGET_(r32,19,16)
    #define   SET32LVDS_CH_RESERVE_O_RO_4i(r32,v)              _BFSET_(r32,19,16,v)
    #define   GET16LVDS_CH_RESERVE_O_RO_4i(r16)                _BFGET_(r16, 3, 0)
    #define   SET16LVDS_CH_RESERVE_O_RO_4i(r16,v)              _BFSET_(r16, 3, 0,v)

    #define   GET32LVDS_CH_RESERVE_O_RO_5i(r32)                _BFGET_(r32,23,20)
    #define   SET32LVDS_CH_RESERVE_O_RO_5i(r32,v)              _BFSET_(r32,23,20,v)
    #define   GET16LVDS_CH_RESERVE_O_RO_5i(r16)                _BFGET_(r16, 7, 4)
    #define   SET16LVDS_CH_RESERVE_O_RO_5i(r16,v)              _BFSET_(r16, 7, 4,v)

    #define     w32LVDS_CH_RESERVE_O                           {\
            UNSG32 uRESERVE_O_RO_0i                            :  4;\
            UNSG32 uRESERVE_O_RO_1i                            :  4;\
            UNSG32 uRESERVE_O_RO_2i                            :  4;\
            UNSG32 uRESERVE_O_RO_3i                            :  4;\
            UNSG32 uRESERVE_O_RO_4i                            :  4;\
            UNSG32 uRESERVE_O_RO_5i                            :  4;\
            UNSG32 RSVDx24_b24                                 :  8;\
          }
    union { UNSG32 u32LVDS_CH_RESERVE_O;
            struct w32LVDS_CH_RESERVE_O;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_CH_DIG_TSTPNT_OUT(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32LVDS_CH_DIG_TSTPNT_OUT(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16LVDS_CH_DIG_TSTPNT_OUT(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16LVDS_CH_DIG_TSTPNT_OUT(r16,v)               _BFSET_(r16, 3, 0,v)

    #define     w32LVDS_CH_DIG                                 {\
            UNSG32 uDIG_TSTPNT_OUT                             :  4;\
            UNSG32 RSVDx28_b4                                  : 28;\
          }
    union { UNSG32 u32LVDS_CH_DIG;
            struct w32LVDS_CH_DIG;
          };
    ///////////////////////////////////////////////////////////
    } SIE_LVDS_CH;

    typedef union  T32LVDS_CH_ANA_TSTPNT
          { UNSG32 u32;
            struct w32LVDS_CH_ANA_TSTPNT;
                 } T32LVDS_CH_ANA_TSTPNT;
    typedef union  T32LVDS_CH_D_NBITS
          { UNSG32 u32;
            struct w32LVDS_CH_D_NBITS;
                 } T32LVDS_CH_D_NBITS;
    typedef union  T32LVDS_CH_DIG_TSTPNT
          { UNSG32 u32;
            struct w32LVDS_CH_DIG_TSTPNT;
                 } T32LVDS_CH_DIG_TSTPNT;
    typedef union  T32LVDS_CH_PU
          { UNSG32 u32;
            struct w32LVDS_CH_PU;
                 } T32LVDS_CH_PU;
    typedef union  T32LVDS_CH_RESERVE_I
          { UNSG32 u32;
            struct w32LVDS_CH_RESERVE_I;
                 } T32LVDS_CH_RESERVE_I;
    typedef union  T32LVDS_CH_RESERVE_I1
          { UNSG32 u32;
            struct w32LVDS_CH_RESERVE_I1;
                 } T32LVDS_CH_RESERVE_I1;
    typedef union  T32LVDS_CH_TX_EMPH
          { UNSG32 u32;
            struct w32LVDS_CH_TX_EMPH;
                 } T32LVDS_CH_TX_EMPH;
    typedef union  T32LVDS_CH_TX
          { UNSG32 u32;
            struct w32LVDS_CH_TX;
                 } T32LVDS_CH_TX;
    typedef union  T32LVDS_CH_TX1
          { UNSG32 u32;
            struct w32LVDS_CH_TX1;
                 } T32LVDS_CH_TX1;
    typedef union  T32LVDS_CH_RESERVE_O
          { UNSG32 u32;
            struct w32LVDS_CH_RESERVE_O;
                 } T32LVDS_CH_RESERVE_O;
    typedef union  T32LVDS_CH_DIG
          { UNSG32 u32;
            struct w32LVDS_CH_DIG;
                 } T32LVDS_CH_DIG;
    ///////////////////////////////////////////////////////////

    typedef union  TLVDS_CH_ANA_TSTPNT
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_CH_ANA_TSTPNT;
                   };
                 } TLVDS_CH_ANA_TSTPNT;
    typedef union  TLVDS_CH_D_NBITS
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_CH_D_NBITS;
                   };
                 } TLVDS_CH_D_NBITS;
    typedef union  TLVDS_CH_DIG_TSTPNT
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_CH_DIG_TSTPNT;
                   };
                 } TLVDS_CH_DIG_TSTPNT;
    typedef union  TLVDS_CH_PU
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_CH_PU;
                   };
                 } TLVDS_CH_PU;
    typedef union  TLVDS_CH_RESERVE_I
          { UNSG32 u32[2];
            struct {
            struct w32LVDS_CH_RESERVE_I;
            struct w32LVDS_CH_RESERVE_I1;
                   };
                 } TLVDS_CH_RESERVE_I;
    typedef union  TLVDS_CH_TX_EMPH
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_CH_TX_EMPH;
                   };
                 } TLVDS_CH_TX_EMPH;
    typedef union  TLVDS_CH_TX
          { UNSG32 u32[2];
            struct {
            struct w32LVDS_CH_TX;
            struct w32LVDS_CH_TX1;
                   };
                 } TLVDS_CH_TX;
    typedef union  TLVDS_CH_RESERVE_O
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_CH_RESERVE_O;
                   };
                 } TLVDS_CH_RESERVE_O;
    typedef union  TLVDS_CH_DIG
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_CH_DIG;
                   };
                 } TLVDS_CH_DIG;

    ///////////////////////////////////////////////////////////
     SIGN32 LVDS_CH_drvrd(SIE_LVDS_CH *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 LVDS_CH_drvwr(SIE_LVDS_CH *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void LVDS_CH_reset(SIE_LVDS_CH *p);
     SIGN32 LVDS_CH_cmp  (SIE_LVDS_CH *p, SIE_LVDS_CH *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define LVDS_CH_check(p,pie,pfx,hLOG) LVDS_CH_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define LVDS_CH_print(p,    pfx,hLOG) LVDS_CH_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: LVDS_CH
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE LVDS_IMPCAL                              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 IMP                  (P)
///               %unsigned 1  TUNE                      0x0
///                                    ###
///                                    * Positive edge → initiate IMP calibration
///                                    ###
///               %unsigned 3  SET                       0x2
///                                    ###
///                                    * What DC impedance to tune to
///                                    * 0h : 47.5 ohms
///                                    * 1h : 50 ohms
///                                    * 2h : 52.5 ohms
///                                    * 3h : 55 ohms
///                                    * 4h : 57.5 ohms
///                                    * 5h : 60 ohms
///                                    * 6h : 62.5 ohms
///                                    * 7h : 65 ohms
///                                    ###
///               %unsigned 6  EXT                       0xA
///                                    ###
///                                    * External IMP value
///                                    * 00h:lowest impedance
///                                    * …
///                                    * 3Fh:highest impedance
///                                    ###
///               %unsigned 1  OR                        0x0
///                                    ###
///                                    * TX_IMP over-ride
///                                    * 0h:TX_IMP generated internally
///                                    * 1h:TX_IMP = IMP_EXT
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00004 RESERVE_IR           (P)
///               %unsigned 8  RIR                       0x3
///                                    ###
///                                    * Reserve digital control (inputs/IMPCAL)
///                                    * [7] : DLY_CK_SIGN (1-> invert D_CK)
///                                    * [6:3]: DLY_D_CK[3:0] (delay D_CK = (16-51ps)*DLY_D_CK[3:0]
///                                    * [2:0]: DLY_TX_CK[2:0] (delay of TX_CKP/N wrt D_SYNCP/N=15-33ps/step) [to make sure we can meet timing to synchronize all channels]
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00008 VCM_SET              (P)
///               %unsigned 3  SET                       0x3
///                                    ###
///                                    * Common-mode control
///                                    * See TX_VCM pin for full desription
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0000C TX_IMP               (R-)
///               %unsigned 6  IMP                       0x0
///                                    ###
///                                    * For controlling (TXP/TXN) termination.[So can tune once and re-use]
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00010 IMP_STATUS           (R-)
///               %unsigned 1  BUSY                      0x0
///                                    ###
///                                    * 1 → IMP tune in progress
///                                    * 0->no IMP tune being done
///                                    * Negative edge->calibration complete
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      20B, bits:      29b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_LVDS_IMPCAL
#define h_LVDS_IMPCAL (){}

    #define     RA_LVDS_IMPCAL_IMP                             0x0000

    #define     BA_LVDS_IMPCAL_IMP_TUNE                        0x0000
    #define     B16LVDS_IMPCAL_IMP_TUNE                        0x0000
    #define   LSb32LVDS_IMPCAL_IMP_TUNE                           0
    #define   LSb16LVDS_IMPCAL_IMP_TUNE                           0
    #define       bLVDS_IMPCAL_IMP_TUNE                        1
    #define   MSK32LVDS_IMPCAL_IMP_TUNE                           0x00000001

    #define     BA_LVDS_IMPCAL_IMP_SET                         0x0000
    #define     B16LVDS_IMPCAL_IMP_SET                         0x0000
    #define   LSb32LVDS_IMPCAL_IMP_SET                            1
    #define   LSb16LVDS_IMPCAL_IMP_SET                            1
    #define       bLVDS_IMPCAL_IMP_SET                         3
    #define   MSK32LVDS_IMPCAL_IMP_SET                            0x0000000E

    #define     BA_LVDS_IMPCAL_IMP_EXT                         0x0000
    #define     B16LVDS_IMPCAL_IMP_EXT                         0x0000
    #define   LSb32LVDS_IMPCAL_IMP_EXT                            4
    #define   LSb16LVDS_IMPCAL_IMP_EXT                            4
    #define       bLVDS_IMPCAL_IMP_EXT                         6
    #define   MSK32LVDS_IMPCAL_IMP_EXT                            0x000003F0

    #define     BA_LVDS_IMPCAL_IMP_OR                          0x0001
    #define     B16LVDS_IMPCAL_IMP_OR                          0x0000
    #define   LSb32LVDS_IMPCAL_IMP_OR                             10
    #define   LSb16LVDS_IMPCAL_IMP_OR                             10
    #define       bLVDS_IMPCAL_IMP_OR                          1
    #define   MSK32LVDS_IMPCAL_IMP_OR                             0x00000400
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_IMPCAL_RESERVE_IR                      0x0004

    #define     BA_LVDS_IMPCAL_RESERVE_IR_RIR                  0x0004
    #define     B16LVDS_IMPCAL_RESERVE_IR_RIR                  0x0004
    #define   LSb32LVDS_IMPCAL_RESERVE_IR_RIR                     0
    #define   LSb16LVDS_IMPCAL_RESERVE_IR_RIR                     0
    #define       bLVDS_IMPCAL_RESERVE_IR_RIR                  8
    #define   MSK32LVDS_IMPCAL_RESERVE_IR_RIR                     0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_IMPCAL_VCM_SET                         0x0008

    #define     BA_LVDS_IMPCAL_VCM_SET_SET                     0x0008
    #define     B16LVDS_IMPCAL_VCM_SET_SET                     0x0008
    #define   LSb32LVDS_IMPCAL_VCM_SET_SET                        0
    #define   LSb16LVDS_IMPCAL_VCM_SET_SET                        0
    #define       bLVDS_IMPCAL_VCM_SET_SET                     3
    #define   MSK32LVDS_IMPCAL_VCM_SET_SET                        0x00000007
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_IMPCAL_TX_IMP                          0x000C

    #define     BA_LVDS_IMPCAL_TX_IMP_IMP                      0x000C
    #define     B16LVDS_IMPCAL_TX_IMP_IMP                      0x000C
    #define   LSb32LVDS_IMPCAL_TX_IMP_IMP                         0
    #define   LSb16LVDS_IMPCAL_TX_IMP_IMP                         0
    #define       bLVDS_IMPCAL_TX_IMP_IMP                      6
    #define   MSK32LVDS_IMPCAL_TX_IMP_IMP                         0x0000003F
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_IMPCAL_IMP_STATUS                      0x0010

    #define     BA_LVDS_IMPCAL_IMP_STATUS_BUSY                 0x0010
    #define     B16LVDS_IMPCAL_IMP_STATUS_BUSY                 0x0010
    #define   LSb32LVDS_IMPCAL_IMP_STATUS_BUSY                    0
    #define   LSb16LVDS_IMPCAL_IMP_STATUS_BUSY                    0
    #define       bLVDS_IMPCAL_IMP_STATUS_BUSY                 1
    #define   MSK32LVDS_IMPCAL_IMP_STATUS_BUSY                    0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_LVDS_IMPCAL {
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_IMPCAL_IMP_TUNE(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32LVDS_IMPCAL_IMP_TUNE(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_IMPCAL_IMP_TUNE(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16LVDS_IMPCAL_IMP_TUNE(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32LVDS_IMPCAL_IMP_SET(r32)                    _BFGET_(r32, 3, 1)
    #define   SET32LVDS_IMPCAL_IMP_SET(r32,v)                  _BFSET_(r32, 3, 1,v)
    #define   GET16LVDS_IMPCAL_IMP_SET(r16)                    _BFGET_(r16, 3, 1)
    #define   SET16LVDS_IMPCAL_IMP_SET(r16,v)                  _BFSET_(r16, 3, 1,v)

    #define   GET32LVDS_IMPCAL_IMP_EXT(r32)                    _BFGET_(r32, 9, 4)
    #define   SET32LVDS_IMPCAL_IMP_EXT(r32,v)                  _BFSET_(r32, 9, 4,v)
    #define   GET16LVDS_IMPCAL_IMP_EXT(r16)                    _BFGET_(r16, 9, 4)
    #define   SET16LVDS_IMPCAL_IMP_EXT(r16,v)                  _BFSET_(r16, 9, 4,v)

    #define   GET32LVDS_IMPCAL_IMP_OR(r32)                     _BFGET_(r32,10,10)
    #define   SET32LVDS_IMPCAL_IMP_OR(r32,v)                   _BFSET_(r32,10,10,v)
    #define   GET16LVDS_IMPCAL_IMP_OR(r16)                     _BFGET_(r16,10,10)
    #define   SET16LVDS_IMPCAL_IMP_OR(r16,v)                   _BFSET_(r16,10,10,v)

    #define     w32LVDS_IMPCAL_IMP                             {\
            UNSG32 uIMP_TUNE                                   :  1;\
            UNSG32 uIMP_SET                                    :  3;\
            UNSG32 uIMP_EXT                                    :  6;\
            UNSG32 uIMP_OR                                     :  1;\
            UNSG32 RSVDx0_b11                                  : 21;\
          }
    union { UNSG32 u32LVDS_IMPCAL_IMP;
            struct w32LVDS_IMPCAL_IMP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_IMPCAL_RESERVE_IR_RIR(r32)             _BFGET_(r32, 7, 0)
    #define   SET32LVDS_IMPCAL_RESERVE_IR_RIR(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16LVDS_IMPCAL_RESERVE_IR_RIR(r16)             _BFGET_(r16, 7, 0)
    #define   SET16LVDS_IMPCAL_RESERVE_IR_RIR(r16,v)           _BFSET_(r16, 7, 0,v)

    #define     w32LVDS_IMPCAL_RESERVE_IR                      {\
            UNSG32 uRESERVE_IR_RIR                             :  8;\
            UNSG32 RSVDx4_b8                                   : 24;\
          }
    union { UNSG32 u32LVDS_IMPCAL_RESERVE_IR;
            struct w32LVDS_IMPCAL_RESERVE_IR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_IMPCAL_VCM_SET_SET(r32)                _BFGET_(r32, 2, 0)
    #define   SET32LVDS_IMPCAL_VCM_SET_SET(r32,v)              _BFSET_(r32, 2, 0,v)
    #define   GET16LVDS_IMPCAL_VCM_SET_SET(r16)                _BFGET_(r16, 2, 0)
    #define   SET16LVDS_IMPCAL_VCM_SET_SET(r16,v)              _BFSET_(r16, 2, 0,v)

    #define     w32LVDS_IMPCAL_VCM_SET                         {\
            UNSG32 uVCM_SET_SET                                :  3;\
            UNSG32 RSVDx8_b3                                   : 29;\
          }
    union { UNSG32 u32LVDS_IMPCAL_VCM_SET;
            struct w32LVDS_IMPCAL_VCM_SET;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_IMPCAL_TX_IMP_IMP(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32LVDS_IMPCAL_TX_IMP_IMP(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16LVDS_IMPCAL_TX_IMP_IMP(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16LVDS_IMPCAL_TX_IMP_IMP(r16,v)               _BFSET_(r16, 5, 0,v)

    #define     w32LVDS_IMPCAL_TX_IMP                          {\
            UNSG32 uTX_IMP_IMP                                 :  6;\
            UNSG32 RSVDxC_b6                                   : 26;\
          }
    union { UNSG32 u32LVDS_IMPCAL_TX_IMP;
            struct w32LVDS_IMPCAL_TX_IMP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_IMPCAL_IMP_STATUS_BUSY(r32)            _BFGET_(r32, 0, 0)
    #define   SET32LVDS_IMPCAL_IMP_STATUS_BUSY(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_IMPCAL_IMP_STATUS_BUSY(r16)            _BFGET_(r16, 0, 0)
    #define   SET16LVDS_IMPCAL_IMP_STATUS_BUSY(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32LVDS_IMPCAL_IMP_STATUS                      {\
            UNSG32 uIMP_STATUS_BUSY                            :  1;\
            UNSG32 RSVDx10_b1                                  : 31;\
          }
    union { UNSG32 u32LVDS_IMPCAL_IMP_STATUS;
            struct w32LVDS_IMPCAL_IMP_STATUS;
          };
    ///////////////////////////////////////////////////////////
    } SIE_LVDS_IMPCAL;

    typedef union  T32LVDS_IMPCAL_IMP
          { UNSG32 u32;
            struct w32LVDS_IMPCAL_IMP;
                 } T32LVDS_IMPCAL_IMP;
    typedef union  T32LVDS_IMPCAL_RESERVE_IR
          { UNSG32 u32;
            struct w32LVDS_IMPCAL_RESERVE_IR;
                 } T32LVDS_IMPCAL_RESERVE_IR;
    typedef union  T32LVDS_IMPCAL_VCM_SET
          { UNSG32 u32;
            struct w32LVDS_IMPCAL_VCM_SET;
                 } T32LVDS_IMPCAL_VCM_SET;
    typedef union  T32LVDS_IMPCAL_TX_IMP
          { UNSG32 u32;
            struct w32LVDS_IMPCAL_TX_IMP;
                 } T32LVDS_IMPCAL_TX_IMP;
    typedef union  T32LVDS_IMPCAL_IMP_STATUS
          { UNSG32 u32;
            struct w32LVDS_IMPCAL_IMP_STATUS;
                 } T32LVDS_IMPCAL_IMP_STATUS;
    ///////////////////////////////////////////////////////////

    typedef union  TLVDS_IMPCAL_IMP
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_IMPCAL_IMP;
                   };
                 } TLVDS_IMPCAL_IMP;
    typedef union  TLVDS_IMPCAL_RESERVE_IR
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_IMPCAL_RESERVE_IR;
                   };
                 } TLVDS_IMPCAL_RESERVE_IR;
    typedef union  TLVDS_IMPCAL_VCM_SET
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_IMPCAL_VCM_SET;
                   };
                 } TLVDS_IMPCAL_VCM_SET;
    typedef union  TLVDS_IMPCAL_TX_IMP
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_IMPCAL_TX_IMP;
                   };
                 } TLVDS_IMPCAL_TX_IMP;
    typedef union  TLVDS_IMPCAL_IMP_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_IMPCAL_IMP_STATUS;
                   };
                 } TLVDS_IMPCAL_IMP_STATUS;

    ///////////////////////////////////////////////////////////
     SIGN32 LVDS_IMPCAL_drvrd(SIE_LVDS_IMPCAL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 LVDS_IMPCAL_drvwr(SIE_LVDS_IMPCAL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void LVDS_IMPCAL_reset(SIE_LVDS_IMPCAL *p);
     SIGN32 LVDS_IMPCAL_cmp  (SIE_LVDS_IMPCAL *p, SIE_LVDS_IMPCAL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define LVDS_IMPCAL_check(p,pie,pfx,hLOG) LVDS_IMPCAL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define LVDS_IMPCAL_print(p,    pfx,hLOG) LVDS_IMPCAL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: LVDS_IMPCAL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE LVDS_PLL                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CLK_DET_EN           (P)
///               %unsigned 1  EN                        0x1
///                                    ###
///                                    * Enables PI output clock for internal reset circuit
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 CLKOUT_DIV_SEL       (P)
///               %unsigned 2  SEL                       0x0
///                                    ###
///                                    * Post divider for differential output clock
///                                    * 0h:bypass(div1)
///                                    * 1h:div2
///                                    * 2h:div3
///                                    * 3h:div4
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00008 FB                   (P)
///               %unsigned 6  FBCDLY                    0x0
///                                    ###
///                                    * Fine Tune Delay Select Between REFCLK And FBCLK.
///                                    * FBCDLY[5] is the sign bit.
///                                    * 1h = ADD delay into REFCLK.
///                                    * 0h = ADD delay into FBCLK.
///                                    * FBCDLY[4:0] decides the actual amount of delay:
///                                    * 00h = No delay
///                                    * 01h = 15 – 50 ps phase difference
///                                    * 02h = 30 – 100 ps phase difference
///                                    * 03h = 45 – 150 ps phase difference
///                                    * …
///                                    * 3Fh = 945 ps – 3150 ps phase difference.
///                                    ###
///               %unsigned 1  FBCDLY_EN                 0x0
///                                    ###
///                                    * Delay line selection:
///                                    * 0h:Disable the delay line
///                                    * 1h:Enable the delay line
///                                    ###
///               %unsigned 9  FBDIV                     0xE
///                                    ###
///                                    * Feedback clock divider select:
///                                    * 000h:div1
///                                    * 001h:div1
///                                    * 002h:div2
///                                    * 003h:div3
///                                    * 004h:div4
///                                    * …
///                                    * 1FF:div511
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0000C FREQ_OFFSET          (P)
///               %unsigned 17 FREQ_OFFSET               0x0
///                                    ###
///                                    * Frequency offset value.
///                                    * [16]:Sign-Bit
///                                    * 0h:Frequency down
///                                    * 1h:Frequency up
///                                    * [15:0]:1 LSB → 1ppm, up to 5%
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00010 ICP                  (P)
///               %unsigned 4  ICP                       0x9
///                                    ###
///                                    * Charge-pump current control bits.
///                                    * 0h      30uA;       8h       120uA
///                                    * 1h      37.5uA;    9h       150uA
///                                    * 2h      45uA;       Ah      180uA
///                                    * 3h      52.5uA;    Bh      210uA
///                                    * 4h      60uA;       Ch      240uA
///                                    * 5h      75uA;       Dh      300uA
///                                    * 6h      90uA;       Eh      360uA
///                                    * 7h      105uA;     Fh      420uA
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00014 INTP                 (P)
///               %unsigned 4  INTPI                     0x2
///                                    ###
///                                    * Phase Interpolator Bias Current Select.
///                                    * INTPI[1:0] Current(VCO band)
///                                    * 0h      reserved
///                                    * 1h      5uA(1.87~2.75GHz)
///                                    * 2h      7.5uA(2.75~3.25GHz)
///                                    * 3h      10uA(3.25~3.77GHz)
///                                    ###
///               %unsigned 3  INTP_CAP                  0x5
///                                    ###
///                                    * Phase Interpolator Loading cap Select.
///                                    * INTP_CAP[2:0] VCO band
///                                    * 7h      reserved
///                                    * 6h      1.87 ~ 2.75 GHz
///                                    * 5h      2.75 ~ 3.25 GHz
///                                    * 4h      reserved
///                                    * 3h      3.25 ~ 3.77 GHz.
///                                    * 2h,1h,0h reserved
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x00018 KVCO                 (P)
///               %unsigned 4  KVCO                      0x0
///                                    ###
///                                    * KVCO selection for different frequency range (KVCO[3] is reserved]
///                                    * KVCO[2:0] VCO frequency band
///                                    * 0h      1.87G~2.1G
///                                    * 1h      2.1G~2.33G
///                                    * 2h      2.33G~2.55G
///                                    * 3h      2.55G~2.77G
///                                    * 4h      2.77G~2.98G
///                                    * 5h      2.98G~3.19G
///                                    * 6h      3.19G~3.39G
///                                    * 7h      3.39G~3.77G
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x0001C PLL_BW_SEL           (P)
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * 1h: BW/2
///                                    * 0h: Normal PLL Bandwidth
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00020 REFCLK_DIV           (P)
///               %unsigned 9  DIV                       0x2
///                                    ###
///                                    * Reference clock divider select:
///                                    * 000h : div1
///                                    * 001h : div1
///                                    * 002h : div2
///                                    * 003h : div3
///                                    * 004h : div4
///                                    * …
///                                    * 1FF : div511
///                                    ###
///               %%        23         # Stuffing bits...
///     @ 0x00024 RESERVE_IP           (P)
///               %unsigned 16 RESERVE_IP                0x0
///                                    ###
///                                    * [1:0] output signal PLL_LOCK selection control bits:
///                                    * 00: PLL_LOCK controlled by frequency/phase detection (FD OR’ed PD).
///                                    * 01: PLL_LOCK controlled by frequency detection.
///                                    * 10: PLL_LOCK controlled by
///                                    * Phase detection.
///                                    * 11: Reserved.
///                                    * Recommended default reset value.
///                                    * [2] 1: increases the clock frequency for Charge pump regulators.
///                                    * 0: decrease Fin to CP-reg
///                                    * [3] 1: disables the VDDR_DIV4 comparator.
///                                    * 0: enable VDDR_DIV4 comp.
///                                    * [4] 1: disables the VDDVCO comparator.
///                                    * 0: enable VDDVCO comp.
///                                    * [5] 1: Enable IVREF stress test mode
///                                    * 0: disable IVREF stress test mode
///                                    * [6] 0: Enable VG_VDDR0P9V output
///                                    * 1: disable VG_
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00028 RESET                (P)
///               %unsigned 1  RESET_PI                  0x0
///                                    ###
///                                    * External interpolator reset signal
///                                    * 1h: reset
///                                    * 0h: no reset
///                                    ###
///               %unsigned 1  RESET_SSC                 0x0
///                                    ###
///                                    * SSC_reset signal
///                                    * 1h:reset
///                                    * 0h:no reset
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0002C PowerOnReset         (P)
///               %unsigned 1  RESET_PLL                 0x1
///                                    ###
///                                    * Power On Reset signal to reset the PLL and all the logics.
///                                    * 1h:reset.
///                                    * 0h:no reset.
///                                    * The Default value is 1, so firmware should set it to 0 after power-on to make the LVDS_PHY work properly.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00030 SSC                  (P)
///               %unsigned 1  EN                        0x0
///                                    ###
///                                    * Enable SSC
///                                    * 1h: enable
///                                    * 0h: disable
///                                    ###
///               %unsigned 16 FREQ_DIV                  0x0
///                                    ###
///                                    * SSC frequency selection
///                                    ###
///               %unsigned 1  MODE                      0x1
///                                    ###
///                                    * SSC mode selections0h:center spread
///                                    * 1h:down spread
///                                    ###
///               %unsigned 11 RNGE                      0x0
///                                    ###
///                                    * SSC range selectionsSSC_RNGE[10:0] = Desired SSC amplitude/(SSC_FREQ_DIV[14:0]*2^(-28))
///                                    * Need to round to integer
///                                    ###
///               %%        3          # Stuffing bits...
///     @ 0x00034 VCO_CFG              (P)
///               %unsigned 4  VCO_CAL_EXT               0x2
///                                    ###
///                                    * VCO Capacitor Select (bit [3]: reserved)
///                                    * VCO_CAL_EXT[2:0]
///                                    * 0h: No Cap Loading
///                                    * 1h: One Unit Cap Loading
///                                    * …
///                                    * 7h: Seven Unit Cap Loading
///                                    ###
///               %unsigned 1  VCO_CAL_EXT_EN            0x0
///                                    ###
///                                    * VCO loading caps external select
///                                    * 1h: Use the VCO_CAL_EXT [3:0] Valueto set internal VCO loading caps.
///                                    * 0h: Use the Calibrated Value to set internal VCO loading caps.
///                                    ###
///               %unsigned 1  VCO_CAL_START             0x0
///                                    ###
///                                    * VCO calibration circuit enable signal
///                                    ###
///               %unsigned 2  VCO_CAL_VTH               0x1
///                                    ###
///                                    * VCO calibration comparator threshold voltage selection:
///                                    * 0h: 0.85V
///                                    * 1h: 0.90V
///                                    * 2h :0.95V
///                                    * 3h: 1.00V
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00038 VDDCFG               (P)
///               %unsigned 3  VDDL                      0x4
///                                    ###
///                                    * Internal VDD supply control.This supply depends on VDDM[1:0] setting. VDDL[2:0]:VDDM=1;VDDM=2
///                                    * 7h:               1.05V;       1.10V
///                                    * 6h:               1.00V;       1.05V
///                                    * 5h:               0.95V;       1.00V
///                                    * 4h:               0.90V;       0.95V
///                                    * 3h:               0.85V;       0.90V
///                                    * 2h:               0.80V;       0.85V
///                                    * 1h:               0.75V;       0.80V
///                                    * 0h:               0.70V;       0.75V
///                                    ###
///               %unsigned 2  VDDM                      0x1
///                                    ###
///                                    * VCO supply control
///                                    * 3h: 1.5V
///                                    * 2h: 1.45V
///                                    * 1h: 1.4V
///                                    * 0h: 1.35V
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x0003C PLL_LOCK             (R-)
///               %unsigned 1  LOCK                      0x0
///                                    ###
///                                    * Lock Detect Output
///                                    * 1h: PLL locked
///                                    * 0h: PLL not Lock
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00040 VCO_STATUS           (R-)
///               %unsigned 1  VCO_CAL_DONE              0x0
///                                    ###
///                                    * VCO calibration output:
///                                    * 0h: Calibrating or no calibration function
///                                    * 1h: Calibration is done
///                                    ###
///               %unsigned 4  VCO_CAL_CTUNE             0x0
///                                    ###
///                                    * VCO calibration result
///                                    ###
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      68B, bits:     128b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_LVDS_PLL
#define h_LVDS_PLL (){}

    #define     RA_LVDS_PLL_CLK_DET_EN                         0x0000

    #define     BA_LVDS_PLL_CLK_DET_EN_EN                      0x0000
    #define     B16LVDS_PLL_CLK_DET_EN_EN                      0x0000
    #define   LSb32LVDS_PLL_CLK_DET_EN_EN                         0
    #define   LSb16LVDS_PLL_CLK_DET_EN_EN                         0
    #define       bLVDS_PLL_CLK_DET_EN_EN                      1
    #define   MSK32LVDS_PLL_CLK_DET_EN_EN                         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_CLKOUT_DIV_SEL                     0x0004

    #define     BA_LVDS_PLL_CLKOUT_DIV_SEL_SEL                 0x0004
    #define     B16LVDS_PLL_CLKOUT_DIV_SEL_SEL                 0x0004
    #define   LSb32LVDS_PLL_CLKOUT_DIV_SEL_SEL                    0
    #define   LSb16LVDS_PLL_CLKOUT_DIV_SEL_SEL                    0
    #define       bLVDS_PLL_CLKOUT_DIV_SEL_SEL                 2
    #define   MSK32LVDS_PLL_CLKOUT_DIV_SEL_SEL                    0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_FB                                 0x0008

    #define     BA_LVDS_PLL_FB_FBCDLY                          0x0008
    #define     B16LVDS_PLL_FB_FBCDLY                          0x0008
    #define   LSb32LVDS_PLL_FB_FBCDLY                             0
    #define   LSb16LVDS_PLL_FB_FBCDLY                             0
    #define       bLVDS_PLL_FB_FBCDLY                          6
    #define   MSK32LVDS_PLL_FB_FBCDLY                             0x0000003F

    #define     BA_LVDS_PLL_FB_FBCDLY_EN                       0x0008
    #define     B16LVDS_PLL_FB_FBCDLY_EN                       0x0008
    #define   LSb32LVDS_PLL_FB_FBCDLY_EN                          6
    #define   LSb16LVDS_PLL_FB_FBCDLY_EN                          6
    #define       bLVDS_PLL_FB_FBCDLY_EN                       1
    #define   MSK32LVDS_PLL_FB_FBCDLY_EN                          0x00000040

    #define     BA_LVDS_PLL_FB_FBDIV                           0x0008
    #define     B16LVDS_PLL_FB_FBDIV                           0x0008
    #define   LSb32LVDS_PLL_FB_FBDIV                              7
    #define   LSb16LVDS_PLL_FB_FBDIV                              7
    #define       bLVDS_PLL_FB_FBDIV                           9
    #define   MSK32LVDS_PLL_FB_FBDIV                              0x0000FF80
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_FREQ_OFFSET                        0x000C

    #define     BA_LVDS_PLL_FREQ_OFFSET_FREQ_OFFSET            0x000C
    #define     B16LVDS_PLL_FREQ_OFFSET_FREQ_OFFSET            0x000C
    #define   LSb32LVDS_PLL_FREQ_OFFSET_FREQ_OFFSET               0
    #define   LSb16LVDS_PLL_FREQ_OFFSET_FREQ_OFFSET               0
    #define       bLVDS_PLL_FREQ_OFFSET_FREQ_OFFSET            17
    #define   MSK32LVDS_PLL_FREQ_OFFSET_FREQ_OFFSET               0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_ICP                                0x0010

    #define     BA_LVDS_PLL_ICP_ICP                            0x0010
    #define     B16LVDS_PLL_ICP_ICP                            0x0010
    #define   LSb32LVDS_PLL_ICP_ICP                               0
    #define   LSb16LVDS_PLL_ICP_ICP                               0
    #define       bLVDS_PLL_ICP_ICP                            4
    #define   MSK32LVDS_PLL_ICP_ICP                               0x0000000F
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_INTP                               0x0014

    #define     BA_LVDS_PLL_INTP_INTPI                         0x0014
    #define     B16LVDS_PLL_INTP_INTPI                         0x0014
    #define   LSb32LVDS_PLL_INTP_INTPI                            0
    #define   LSb16LVDS_PLL_INTP_INTPI                            0
    #define       bLVDS_PLL_INTP_INTPI                         4
    #define   MSK32LVDS_PLL_INTP_INTPI                            0x0000000F

    #define     BA_LVDS_PLL_INTP_INTP_CAP                      0x0014
    #define     B16LVDS_PLL_INTP_INTP_CAP                      0x0014
    #define   LSb32LVDS_PLL_INTP_INTP_CAP                         4
    #define   LSb16LVDS_PLL_INTP_INTP_CAP                         4
    #define       bLVDS_PLL_INTP_INTP_CAP                      3
    #define   MSK32LVDS_PLL_INTP_INTP_CAP                         0x00000070
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_KVCO                               0x0018

    #define     BA_LVDS_PLL_KVCO_KVCO                          0x0018
    #define     B16LVDS_PLL_KVCO_KVCO                          0x0018
    #define   LSb32LVDS_PLL_KVCO_KVCO                             0
    #define   LSb16LVDS_PLL_KVCO_KVCO                             0
    #define       bLVDS_PLL_KVCO_KVCO                          4
    #define   MSK32LVDS_PLL_KVCO_KVCO                             0x0000000F
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_PLL_BW_SEL                         0x001C

    #define     BA_LVDS_PLL_PLL_BW_SEL_SEL                     0x001C
    #define     B16LVDS_PLL_PLL_BW_SEL_SEL                     0x001C
    #define   LSb32LVDS_PLL_PLL_BW_SEL_SEL                        0
    #define   LSb16LVDS_PLL_PLL_BW_SEL_SEL                        0
    #define       bLVDS_PLL_PLL_BW_SEL_SEL                     1
    #define   MSK32LVDS_PLL_PLL_BW_SEL_SEL                        0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_REFCLK_DIV                         0x0020

    #define     BA_LVDS_PLL_REFCLK_DIV_DIV                     0x0020
    #define     B16LVDS_PLL_REFCLK_DIV_DIV                     0x0020
    #define   LSb32LVDS_PLL_REFCLK_DIV_DIV                        0
    #define   LSb16LVDS_PLL_REFCLK_DIV_DIV                        0
    #define       bLVDS_PLL_REFCLK_DIV_DIV                     9
    #define   MSK32LVDS_PLL_REFCLK_DIV_DIV                        0x000001FF
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_RESERVE_IP                         0x0024

    #define     BA_LVDS_PLL_RESERVE_IP_RESERVE_IP              0x0024
    #define     B16LVDS_PLL_RESERVE_IP_RESERVE_IP              0x0024
    #define   LSb32LVDS_PLL_RESERVE_IP_RESERVE_IP                 0
    #define   LSb16LVDS_PLL_RESERVE_IP_RESERVE_IP                 0
    #define       bLVDS_PLL_RESERVE_IP_RESERVE_IP              16
    #define   MSK32LVDS_PLL_RESERVE_IP_RESERVE_IP                 0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_RESET                              0x0028

    #define     BA_LVDS_PLL_RESET_RESET_PI                     0x0028
    #define     B16LVDS_PLL_RESET_RESET_PI                     0x0028
    #define   LSb32LVDS_PLL_RESET_RESET_PI                        0
    #define   LSb16LVDS_PLL_RESET_RESET_PI                        0
    #define       bLVDS_PLL_RESET_RESET_PI                     1
    #define   MSK32LVDS_PLL_RESET_RESET_PI                        0x00000001

    #define     BA_LVDS_PLL_RESET_RESET_SSC                    0x0028
    #define     B16LVDS_PLL_RESET_RESET_SSC                    0x0028
    #define   LSb32LVDS_PLL_RESET_RESET_SSC                       1
    #define   LSb16LVDS_PLL_RESET_RESET_SSC                       1
    #define       bLVDS_PLL_RESET_RESET_SSC                    1
    #define   MSK32LVDS_PLL_RESET_RESET_SSC                       0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_PowerOnReset                       0x002C

    #define     BA_LVDS_PLL_PowerOnReset_RESET_PLL             0x002C
    #define     B16LVDS_PLL_PowerOnReset_RESET_PLL             0x002C
    #define   LSb32LVDS_PLL_PowerOnReset_RESET_PLL                0
    #define   LSb16LVDS_PLL_PowerOnReset_RESET_PLL                0
    #define       bLVDS_PLL_PowerOnReset_RESET_PLL             1
    #define   MSK32LVDS_PLL_PowerOnReset_RESET_PLL                0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_SSC                                0x0030

    #define     BA_LVDS_PLL_SSC_EN                             0x0030
    #define     B16LVDS_PLL_SSC_EN                             0x0030
    #define   LSb32LVDS_PLL_SSC_EN                                0
    #define   LSb16LVDS_PLL_SSC_EN                                0
    #define       bLVDS_PLL_SSC_EN                             1
    #define   MSK32LVDS_PLL_SSC_EN                                0x00000001

    #define     BA_LVDS_PLL_SSC_FREQ_DIV                       0x0030
    #define     B16LVDS_PLL_SSC_FREQ_DIV                       0x0030
    #define   LSb32LVDS_PLL_SSC_FREQ_DIV                          1
    #define   LSb16LVDS_PLL_SSC_FREQ_DIV                          1
    #define       bLVDS_PLL_SSC_FREQ_DIV                       16
    #define   MSK32LVDS_PLL_SSC_FREQ_DIV                          0x0001FFFE

    #define     BA_LVDS_PLL_SSC_MODE                           0x0032
    #define     B16LVDS_PLL_SSC_MODE                           0x0032
    #define   LSb32LVDS_PLL_SSC_MODE                              17
    #define   LSb16LVDS_PLL_SSC_MODE                              1
    #define       bLVDS_PLL_SSC_MODE                           1
    #define   MSK32LVDS_PLL_SSC_MODE                              0x00020000

    #define     BA_LVDS_PLL_SSC_RNGE                           0x0032
    #define     B16LVDS_PLL_SSC_RNGE                           0x0032
    #define   LSb32LVDS_PLL_SSC_RNGE                              18
    #define   LSb16LVDS_PLL_SSC_RNGE                              2
    #define       bLVDS_PLL_SSC_RNGE                           11
    #define   MSK32LVDS_PLL_SSC_RNGE                              0x1FFC0000
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_VCO_CFG                            0x0034

    #define     BA_LVDS_PLL_VCO_CFG_VCO_CAL_EXT                0x0034
    #define     B16LVDS_PLL_VCO_CFG_VCO_CAL_EXT                0x0034
    #define   LSb32LVDS_PLL_VCO_CFG_VCO_CAL_EXT                   0
    #define   LSb16LVDS_PLL_VCO_CFG_VCO_CAL_EXT                   0
    #define       bLVDS_PLL_VCO_CFG_VCO_CAL_EXT                4
    #define   MSK32LVDS_PLL_VCO_CFG_VCO_CAL_EXT                   0x0000000F

    #define     BA_LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN             0x0034
    #define     B16LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN             0x0034
    #define   LSb32LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN                4
    #define   LSb16LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN                4
    #define       bLVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN             1
    #define   MSK32LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN                0x00000010

    #define     BA_LVDS_PLL_VCO_CFG_VCO_CAL_START              0x0034
    #define     B16LVDS_PLL_VCO_CFG_VCO_CAL_START              0x0034
    #define   LSb32LVDS_PLL_VCO_CFG_VCO_CAL_START                 5
    #define   LSb16LVDS_PLL_VCO_CFG_VCO_CAL_START                 5
    #define       bLVDS_PLL_VCO_CFG_VCO_CAL_START              1
    #define   MSK32LVDS_PLL_VCO_CFG_VCO_CAL_START                 0x00000020

    #define     BA_LVDS_PLL_VCO_CFG_VCO_CAL_VTH                0x0034
    #define     B16LVDS_PLL_VCO_CFG_VCO_CAL_VTH                0x0034
    #define   LSb32LVDS_PLL_VCO_CFG_VCO_CAL_VTH                   6
    #define   LSb16LVDS_PLL_VCO_CFG_VCO_CAL_VTH                   6
    #define       bLVDS_PLL_VCO_CFG_VCO_CAL_VTH                2
    #define   MSK32LVDS_PLL_VCO_CFG_VCO_CAL_VTH                   0x000000C0
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_VDDCFG                             0x0038

    #define     BA_LVDS_PLL_VDDCFG_VDDL                        0x0038
    #define     B16LVDS_PLL_VDDCFG_VDDL                        0x0038
    #define   LSb32LVDS_PLL_VDDCFG_VDDL                           0
    #define   LSb16LVDS_PLL_VDDCFG_VDDL                           0
    #define       bLVDS_PLL_VDDCFG_VDDL                        3
    #define   MSK32LVDS_PLL_VDDCFG_VDDL                           0x00000007

    #define     BA_LVDS_PLL_VDDCFG_VDDM                        0x0038
    #define     B16LVDS_PLL_VDDCFG_VDDM                        0x0038
    #define   LSb32LVDS_PLL_VDDCFG_VDDM                           3
    #define   LSb16LVDS_PLL_VDDCFG_VDDM                           3
    #define       bLVDS_PLL_VDDCFG_VDDM                        2
    #define   MSK32LVDS_PLL_VDDCFG_VDDM                           0x00000018
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_PLL_LOCK                           0x003C

    #define     BA_LVDS_PLL_PLL_LOCK_LOCK                      0x003C
    #define     B16LVDS_PLL_PLL_LOCK_LOCK                      0x003C
    #define   LSb32LVDS_PLL_PLL_LOCK_LOCK                         0
    #define   LSb16LVDS_PLL_PLL_LOCK_LOCK                         0
    #define       bLVDS_PLL_PLL_LOCK_LOCK                      1
    #define   MSK32LVDS_PLL_PLL_LOCK_LOCK                         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PLL_VCO_STATUS                         0x0040

    #define     BA_LVDS_PLL_VCO_STATUS_VCO_CAL_DONE            0x0040
    #define     B16LVDS_PLL_VCO_STATUS_VCO_CAL_DONE            0x0040
    #define   LSb32LVDS_PLL_VCO_STATUS_VCO_CAL_DONE               0
    #define   LSb16LVDS_PLL_VCO_STATUS_VCO_CAL_DONE               0
    #define       bLVDS_PLL_VCO_STATUS_VCO_CAL_DONE            1
    #define   MSK32LVDS_PLL_VCO_STATUS_VCO_CAL_DONE               0x00000001

    #define     BA_LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE           0x0040
    #define     B16LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE           0x0040
    #define   LSb32LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE              1
    #define   LSb16LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE              1
    #define       bLVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE           4
    #define   MSK32LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE              0x0000001E
    ///////////////////////////////////////////////////////////

    typedef struct SIE_LVDS_PLL {
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_CLK_DET_EN_EN(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32LVDS_PLL_CLK_DET_EN_EN(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_PLL_CLK_DET_EN_EN(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16LVDS_PLL_CLK_DET_EN_EN(r16,v)               _BFSET_(r16, 0, 0,v)

    #define     w32LVDS_PLL_CLK_DET_EN                         {\
            UNSG32 uCLK_DET_EN_EN                              :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32LVDS_PLL_CLK_DET_EN;
            struct w32LVDS_PLL_CLK_DET_EN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_CLKOUT_DIV_SEL_SEL(r32)            _BFGET_(r32, 1, 0)
    #define   SET32LVDS_PLL_CLKOUT_DIV_SEL_SEL(r32,v)          _BFSET_(r32, 1, 0,v)
    #define   GET16LVDS_PLL_CLKOUT_DIV_SEL_SEL(r16)            _BFGET_(r16, 1, 0)
    #define   SET16LVDS_PLL_CLKOUT_DIV_SEL_SEL(r16,v)          _BFSET_(r16, 1, 0,v)

    #define     w32LVDS_PLL_CLKOUT_DIV_SEL                     {\
            UNSG32 uCLKOUT_DIV_SEL_SEL                         :  2;\
            UNSG32 RSVDx4_b2                                   : 30;\
          }
    union { UNSG32 u32LVDS_PLL_CLKOUT_DIV_SEL;
            struct w32LVDS_PLL_CLKOUT_DIV_SEL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_FB_FBCDLY(r32)                     _BFGET_(r32, 5, 0)
    #define   SET32LVDS_PLL_FB_FBCDLY(r32,v)                   _BFSET_(r32, 5, 0,v)
    #define   GET16LVDS_PLL_FB_FBCDLY(r16)                     _BFGET_(r16, 5, 0)
    #define   SET16LVDS_PLL_FB_FBCDLY(r16,v)                   _BFSET_(r16, 5, 0,v)

    #define   GET32LVDS_PLL_FB_FBCDLY_EN(r32)                  _BFGET_(r32, 6, 6)
    #define   SET32LVDS_PLL_FB_FBCDLY_EN(r32,v)                _BFSET_(r32, 6, 6,v)
    #define   GET16LVDS_PLL_FB_FBCDLY_EN(r16)                  _BFGET_(r16, 6, 6)
    #define   SET16LVDS_PLL_FB_FBCDLY_EN(r16,v)                _BFSET_(r16, 6, 6,v)

    #define   GET32LVDS_PLL_FB_FBDIV(r32)                      _BFGET_(r32,15, 7)
    #define   SET32LVDS_PLL_FB_FBDIV(r32,v)                    _BFSET_(r32,15, 7,v)
    #define   GET16LVDS_PLL_FB_FBDIV(r16)                      _BFGET_(r16,15, 7)
    #define   SET16LVDS_PLL_FB_FBDIV(r16,v)                    _BFSET_(r16,15, 7,v)

    #define     w32LVDS_PLL_FB                                 {\
            UNSG32 uFB_FBCDLY                                  :  6;\
            UNSG32 uFB_FBCDLY_EN                               :  1;\
            UNSG32 uFB_FBDIV                                   :  9;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32LVDS_PLL_FB;
            struct w32LVDS_PLL_FB;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_FREQ_OFFSET_FREQ_OFFSET(r32)       _BFGET_(r32,16, 0)
    #define   SET32LVDS_PLL_FREQ_OFFSET_FREQ_OFFSET(r32,v)     _BFSET_(r32,16, 0,v)

    #define     w32LVDS_PLL_FREQ_OFFSET                        {\
            UNSG32 uFREQ_OFFSET_FREQ_OFFSET                    : 17;\
            UNSG32 RSVDxC_b17                                  : 15;\
          }
    union { UNSG32 u32LVDS_PLL_FREQ_OFFSET;
            struct w32LVDS_PLL_FREQ_OFFSET;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_ICP_ICP(r32)                       _BFGET_(r32, 3, 0)
    #define   SET32LVDS_PLL_ICP_ICP(r32,v)                     _BFSET_(r32, 3, 0,v)
    #define   GET16LVDS_PLL_ICP_ICP(r16)                       _BFGET_(r16, 3, 0)
    #define   SET16LVDS_PLL_ICP_ICP(r16,v)                     _BFSET_(r16, 3, 0,v)

    #define     w32LVDS_PLL_ICP                                {\
            UNSG32 uICP_ICP                                    :  4;\
            UNSG32 RSVDx10_b4                                  : 28;\
          }
    union { UNSG32 u32LVDS_PLL_ICP;
            struct w32LVDS_PLL_ICP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_INTP_INTPI(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32LVDS_PLL_INTP_INTPI(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16LVDS_PLL_INTP_INTPI(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16LVDS_PLL_INTP_INTPI(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define   GET32LVDS_PLL_INTP_INTP_CAP(r32)                 _BFGET_(r32, 6, 4)
    #define   SET32LVDS_PLL_INTP_INTP_CAP(r32,v)               _BFSET_(r32, 6, 4,v)
    #define   GET16LVDS_PLL_INTP_INTP_CAP(r16)                 _BFGET_(r16, 6, 4)
    #define   SET16LVDS_PLL_INTP_INTP_CAP(r16,v)               _BFSET_(r16, 6, 4,v)

    #define     w32LVDS_PLL_INTP                               {\
            UNSG32 uINTP_INTPI                                 :  4;\
            UNSG32 uINTP_INTP_CAP                              :  3;\
            UNSG32 RSVDx14_b7                                  : 25;\
          }
    union { UNSG32 u32LVDS_PLL_INTP;
            struct w32LVDS_PLL_INTP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_KVCO_KVCO(r32)                     _BFGET_(r32, 3, 0)
    #define   SET32LVDS_PLL_KVCO_KVCO(r32,v)                   _BFSET_(r32, 3, 0,v)
    #define   GET16LVDS_PLL_KVCO_KVCO(r16)                     _BFGET_(r16, 3, 0)
    #define   SET16LVDS_PLL_KVCO_KVCO(r16,v)                   _BFSET_(r16, 3, 0,v)

    #define     w32LVDS_PLL_KVCO                               {\
            UNSG32 uKVCO_KVCO                                  :  4;\
            UNSG32 RSVDx18_b4                                  : 28;\
          }
    union { UNSG32 u32LVDS_PLL_KVCO;
            struct w32LVDS_PLL_KVCO;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_PLL_BW_SEL_SEL(r32)                _BFGET_(r32, 0, 0)
    #define   SET32LVDS_PLL_PLL_BW_SEL_SEL(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_PLL_PLL_BW_SEL_SEL(r16)                _BFGET_(r16, 0, 0)
    #define   SET16LVDS_PLL_PLL_BW_SEL_SEL(r16,v)              _BFSET_(r16, 0, 0,v)

    #define     w32LVDS_PLL_PLL_BW_SEL                         {\
            UNSG32 uPLL_BW_SEL_SEL                             :  1;\
            UNSG32 RSVDx1C_b1                                  : 31;\
          }
    union { UNSG32 u32LVDS_PLL_PLL_BW_SEL;
            struct w32LVDS_PLL_PLL_BW_SEL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_REFCLK_DIV_DIV(r32)                _BFGET_(r32, 8, 0)
    #define   SET32LVDS_PLL_REFCLK_DIV_DIV(r32,v)              _BFSET_(r32, 8, 0,v)
    #define   GET16LVDS_PLL_REFCLK_DIV_DIV(r16)                _BFGET_(r16, 8, 0)
    #define   SET16LVDS_PLL_REFCLK_DIV_DIV(r16,v)              _BFSET_(r16, 8, 0,v)

    #define     w32LVDS_PLL_REFCLK_DIV                         {\
            UNSG32 uREFCLK_DIV_DIV                             :  9;\
            UNSG32 RSVDx20_b9                                  : 23;\
          }
    union { UNSG32 u32LVDS_PLL_REFCLK_DIV;
            struct w32LVDS_PLL_REFCLK_DIV;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_RESERVE_IP_RESERVE_IP(r32)         _BFGET_(r32,15, 0)
    #define   SET32LVDS_PLL_RESERVE_IP_RESERVE_IP(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16LVDS_PLL_RESERVE_IP_RESERVE_IP(r16)         _BFGET_(r16,15, 0)
    #define   SET16LVDS_PLL_RESERVE_IP_RESERVE_IP(r16,v)       _BFSET_(r16,15, 0,v)

    #define     w32LVDS_PLL_RESERVE_IP                         {\
            UNSG32 uRESERVE_IP_RESERVE_IP                      : 16;\
            UNSG32 RSVDx24_b16                                 : 16;\
          }
    union { UNSG32 u32LVDS_PLL_RESERVE_IP;
            struct w32LVDS_PLL_RESERVE_IP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_RESET_RESET_PI(r32)                _BFGET_(r32, 0, 0)
    #define   SET32LVDS_PLL_RESET_RESET_PI(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_PLL_RESET_RESET_PI(r16)                _BFGET_(r16, 0, 0)
    #define   SET16LVDS_PLL_RESET_RESET_PI(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32LVDS_PLL_RESET_RESET_SSC(r32)               _BFGET_(r32, 1, 1)
    #define   SET32LVDS_PLL_RESET_RESET_SSC(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16LVDS_PLL_RESET_RESET_SSC(r16)               _BFGET_(r16, 1, 1)
    #define   SET16LVDS_PLL_RESET_RESET_SSC(r16,v)             _BFSET_(r16, 1, 1,v)

    #define     w32LVDS_PLL_RESET                              {\
            UNSG32 uRESET_RESET_PI                             :  1;\
            UNSG32 uRESET_RESET_SSC                            :  1;\
            UNSG32 RSVDx28_b2                                  : 30;\
          }
    union { UNSG32 u32LVDS_PLL_RESET;
            struct w32LVDS_PLL_RESET;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_PowerOnReset_RESET_PLL(r32)        _BFGET_(r32, 0, 0)
    #define   SET32LVDS_PLL_PowerOnReset_RESET_PLL(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_PLL_PowerOnReset_RESET_PLL(r16)        _BFGET_(r16, 0, 0)
    #define   SET16LVDS_PLL_PowerOnReset_RESET_PLL(r16,v)      _BFSET_(r16, 0, 0,v)

    #define     w32LVDS_PLL_PowerOnReset                       {\
            UNSG32 uPowerOnReset_RESET_PLL                     :  1;\
            UNSG32 RSVDx2C_b1                                  : 31;\
          }
    union { UNSG32 u32LVDS_PLL_PowerOnReset;
            struct w32LVDS_PLL_PowerOnReset;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_SSC_EN(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32LVDS_PLL_SSC_EN(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_PLL_SSC_EN(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16LVDS_PLL_SSC_EN(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32LVDS_PLL_SSC_FREQ_DIV(r32)                  _BFGET_(r32,16, 1)
    #define   SET32LVDS_PLL_SSC_FREQ_DIV(r32,v)                _BFSET_(r32,16, 1,v)

    #define   GET32LVDS_PLL_SSC_MODE(r32)                      _BFGET_(r32,17,17)
    #define   SET32LVDS_PLL_SSC_MODE(r32,v)                    _BFSET_(r32,17,17,v)
    #define   GET16LVDS_PLL_SSC_MODE(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16LVDS_PLL_SSC_MODE(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32LVDS_PLL_SSC_RNGE(r32)                      _BFGET_(r32,28,18)
    #define   SET32LVDS_PLL_SSC_RNGE(r32,v)                    _BFSET_(r32,28,18,v)
    #define   GET16LVDS_PLL_SSC_RNGE(r16)                      _BFGET_(r16,12, 2)
    #define   SET16LVDS_PLL_SSC_RNGE(r16,v)                    _BFSET_(r16,12, 2,v)

    #define     w32LVDS_PLL_SSC                                {\
            UNSG32 uSSC_EN                                     :  1;\
            UNSG32 uSSC_FREQ_DIV                               : 16;\
            UNSG32 uSSC_MODE                                   :  1;\
            UNSG32 uSSC_RNGE                                   : 11;\
            UNSG32 RSVDx30_b29                                 :  3;\
          }
    union { UNSG32 u32LVDS_PLL_SSC;
            struct w32LVDS_PLL_SSC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_VCO_CFG_VCO_CAL_EXT(r32)           _BFGET_(r32, 3, 0)
    #define   SET32LVDS_PLL_VCO_CFG_VCO_CAL_EXT(r32,v)         _BFSET_(r32, 3, 0,v)
    #define   GET16LVDS_PLL_VCO_CFG_VCO_CAL_EXT(r16)           _BFGET_(r16, 3, 0)
    #define   SET16LVDS_PLL_VCO_CFG_VCO_CAL_EXT(r16,v)         _BFSET_(r16, 3, 0,v)

    #define   GET32LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN(r32)        _BFGET_(r32, 4, 4)
    #define   SET32LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN(r32,v)      _BFSET_(r32, 4, 4,v)
    #define   GET16LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN(r16)        _BFGET_(r16, 4, 4)
    #define   SET16LVDS_PLL_VCO_CFG_VCO_CAL_EXT_EN(r16,v)      _BFSET_(r16, 4, 4,v)

    #define   GET32LVDS_PLL_VCO_CFG_VCO_CAL_START(r32)         _BFGET_(r32, 5, 5)
    #define   SET32LVDS_PLL_VCO_CFG_VCO_CAL_START(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16LVDS_PLL_VCO_CFG_VCO_CAL_START(r16)         _BFGET_(r16, 5, 5)
    #define   SET16LVDS_PLL_VCO_CFG_VCO_CAL_START(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32LVDS_PLL_VCO_CFG_VCO_CAL_VTH(r32)           _BFGET_(r32, 7, 6)
    #define   SET32LVDS_PLL_VCO_CFG_VCO_CAL_VTH(r32,v)         _BFSET_(r32, 7, 6,v)
    #define   GET16LVDS_PLL_VCO_CFG_VCO_CAL_VTH(r16)           _BFGET_(r16, 7, 6)
    #define   SET16LVDS_PLL_VCO_CFG_VCO_CAL_VTH(r16,v)         _BFSET_(r16, 7, 6,v)

    #define     w32LVDS_PLL_VCO_CFG                            {\
            UNSG32 uVCO_CFG_VCO_CAL_EXT                        :  4;\
            UNSG32 uVCO_CFG_VCO_CAL_EXT_EN                     :  1;\
            UNSG32 uVCO_CFG_VCO_CAL_START                      :  1;\
            UNSG32 uVCO_CFG_VCO_CAL_VTH                        :  2;\
            UNSG32 RSVDx34_b8                                  : 24;\
          }
    union { UNSG32 u32LVDS_PLL_VCO_CFG;
            struct w32LVDS_PLL_VCO_CFG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_VDDCFG_VDDL(r32)                   _BFGET_(r32, 2, 0)
    #define   SET32LVDS_PLL_VDDCFG_VDDL(r32,v)                 _BFSET_(r32, 2, 0,v)
    #define   GET16LVDS_PLL_VDDCFG_VDDL(r16)                   _BFGET_(r16, 2, 0)
    #define   SET16LVDS_PLL_VDDCFG_VDDL(r16,v)                 _BFSET_(r16, 2, 0,v)

    #define   GET32LVDS_PLL_VDDCFG_VDDM(r32)                   _BFGET_(r32, 4, 3)
    #define   SET32LVDS_PLL_VDDCFG_VDDM(r32,v)                 _BFSET_(r32, 4, 3,v)
    #define   GET16LVDS_PLL_VDDCFG_VDDM(r16)                   _BFGET_(r16, 4, 3)
    #define   SET16LVDS_PLL_VDDCFG_VDDM(r16,v)                 _BFSET_(r16, 4, 3,v)

    #define     w32LVDS_PLL_VDDCFG                             {\
            UNSG32 uVDDCFG_VDDL                                :  3;\
            UNSG32 uVDDCFG_VDDM                                :  2;\
            UNSG32 RSVDx38_b5                                  : 27;\
          }
    union { UNSG32 u32LVDS_PLL_VDDCFG;
            struct w32LVDS_PLL_VDDCFG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_PLL_LOCK_LOCK(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32LVDS_PLL_PLL_LOCK_LOCK(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_PLL_PLL_LOCK_LOCK(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16LVDS_PLL_PLL_LOCK_LOCK(r16,v)               _BFSET_(r16, 0, 0,v)

    #define     w32LVDS_PLL_PLL_LOCK                           {\
            UNSG32 uPLL_LOCK_LOCK                              :  1;\
            UNSG32 RSVDx3C_b1                                  : 31;\
          }
    union { UNSG32 u32LVDS_PLL_PLL_LOCK;
            struct w32LVDS_PLL_PLL_LOCK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32LVDS_PLL_VCO_STATUS_VCO_CAL_DONE(r32)       _BFGET_(r32, 0, 0)
    #define   SET32LVDS_PLL_VCO_STATUS_VCO_CAL_DONE(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16LVDS_PLL_VCO_STATUS_VCO_CAL_DONE(r16)       _BFGET_(r16, 0, 0)
    #define   SET16LVDS_PLL_VCO_STATUS_VCO_CAL_DONE(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE(r32)      _BFGET_(r32, 4, 1)
    #define   SET32LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE(r32,v)    _BFSET_(r32, 4, 1,v)
    #define   GET16LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE(r16)      _BFGET_(r16, 4, 1)
    #define   SET16LVDS_PLL_VCO_STATUS_VCO_CAL_CTUNE(r16,v)    _BFSET_(r16, 4, 1,v)

    #define     w32LVDS_PLL_VCO_STATUS                         {\
            UNSG32 uVCO_STATUS_VCO_CAL_DONE                    :  1;\
            UNSG32 uVCO_STATUS_VCO_CAL_CTUNE                   :  4;\
            UNSG32 RSVDx40_b5                                  : 27;\
          }
    union { UNSG32 u32LVDS_PLL_VCO_STATUS;
            struct w32LVDS_PLL_VCO_STATUS;
          };
    ///////////////////////////////////////////////////////////
    } SIE_LVDS_PLL;

    typedef union  T32LVDS_PLL_CLK_DET_EN
          { UNSG32 u32;
            struct w32LVDS_PLL_CLK_DET_EN;
                 } T32LVDS_PLL_CLK_DET_EN;
    typedef union  T32LVDS_PLL_CLKOUT_DIV_SEL
          { UNSG32 u32;
            struct w32LVDS_PLL_CLKOUT_DIV_SEL;
                 } T32LVDS_PLL_CLKOUT_DIV_SEL;
    typedef union  T32LVDS_PLL_FB
          { UNSG32 u32;
            struct w32LVDS_PLL_FB;
                 } T32LVDS_PLL_FB;
    typedef union  T32LVDS_PLL_FREQ_OFFSET
          { UNSG32 u32;
            struct w32LVDS_PLL_FREQ_OFFSET;
                 } T32LVDS_PLL_FREQ_OFFSET;
    typedef union  T32LVDS_PLL_ICP
          { UNSG32 u32;
            struct w32LVDS_PLL_ICP;
                 } T32LVDS_PLL_ICP;
    typedef union  T32LVDS_PLL_INTP
          { UNSG32 u32;
            struct w32LVDS_PLL_INTP;
                 } T32LVDS_PLL_INTP;
    typedef union  T32LVDS_PLL_KVCO
          { UNSG32 u32;
            struct w32LVDS_PLL_KVCO;
                 } T32LVDS_PLL_KVCO;
    typedef union  T32LVDS_PLL_PLL_BW_SEL
          { UNSG32 u32;
            struct w32LVDS_PLL_PLL_BW_SEL;
                 } T32LVDS_PLL_PLL_BW_SEL;
    typedef union  T32LVDS_PLL_REFCLK_DIV
          { UNSG32 u32;
            struct w32LVDS_PLL_REFCLK_DIV;
                 } T32LVDS_PLL_REFCLK_DIV;
    typedef union  T32LVDS_PLL_RESERVE_IP
          { UNSG32 u32;
            struct w32LVDS_PLL_RESERVE_IP;
                 } T32LVDS_PLL_RESERVE_IP;
    typedef union  T32LVDS_PLL_RESET
          { UNSG32 u32;
            struct w32LVDS_PLL_RESET;
                 } T32LVDS_PLL_RESET;
    typedef union  T32LVDS_PLL_PowerOnReset
          { UNSG32 u32;
            struct w32LVDS_PLL_PowerOnReset;
                 } T32LVDS_PLL_PowerOnReset;
    typedef union  T32LVDS_PLL_SSC
          { UNSG32 u32;
            struct w32LVDS_PLL_SSC;
                 } T32LVDS_PLL_SSC;
    typedef union  T32LVDS_PLL_VCO_CFG
          { UNSG32 u32;
            struct w32LVDS_PLL_VCO_CFG;
                 } T32LVDS_PLL_VCO_CFG;
    typedef union  T32LVDS_PLL_VDDCFG
          { UNSG32 u32;
            struct w32LVDS_PLL_VDDCFG;
                 } T32LVDS_PLL_VDDCFG;
    typedef union  T32LVDS_PLL_PLL_LOCK
          { UNSG32 u32;
            struct w32LVDS_PLL_PLL_LOCK;
                 } T32LVDS_PLL_PLL_LOCK;
    typedef union  T32LVDS_PLL_VCO_STATUS
          { UNSG32 u32;
            struct w32LVDS_PLL_VCO_STATUS;
                 } T32LVDS_PLL_VCO_STATUS;
    ///////////////////////////////////////////////////////////

    typedef union  TLVDS_PLL_CLK_DET_EN
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_CLK_DET_EN;
                   };
                 } TLVDS_PLL_CLK_DET_EN;
    typedef union  TLVDS_PLL_CLKOUT_DIV_SEL
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_CLKOUT_DIV_SEL;
                   };
                 } TLVDS_PLL_CLKOUT_DIV_SEL;
    typedef union  TLVDS_PLL_FB
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_FB;
                   };
                 } TLVDS_PLL_FB;
    typedef union  TLVDS_PLL_FREQ_OFFSET
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_FREQ_OFFSET;
                   };
                 } TLVDS_PLL_FREQ_OFFSET;
    typedef union  TLVDS_PLL_ICP
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_ICP;
                   };
                 } TLVDS_PLL_ICP;
    typedef union  TLVDS_PLL_INTP
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_INTP;
                   };
                 } TLVDS_PLL_INTP;
    typedef union  TLVDS_PLL_KVCO
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_KVCO;
                   };
                 } TLVDS_PLL_KVCO;
    typedef union  TLVDS_PLL_PLL_BW_SEL
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_PLL_BW_SEL;
                   };
                 } TLVDS_PLL_PLL_BW_SEL;
    typedef union  TLVDS_PLL_REFCLK_DIV
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_REFCLK_DIV;
                   };
                 } TLVDS_PLL_REFCLK_DIV;
    typedef union  TLVDS_PLL_RESERVE_IP
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_RESERVE_IP;
                   };
                 } TLVDS_PLL_RESERVE_IP;
    typedef union  TLVDS_PLL_RESET
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_RESET;
                   };
                 } TLVDS_PLL_RESET;
    typedef union  TLVDS_PLL_PowerOnReset
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_PowerOnReset;
                   };
                 } TLVDS_PLL_PowerOnReset;
    typedef union  TLVDS_PLL_SSC
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_SSC;
                   };
                 } TLVDS_PLL_SSC;
    typedef union  TLVDS_PLL_VCO_CFG
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_VCO_CFG;
                   };
                 } TLVDS_PLL_VCO_CFG;
    typedef union  TLVDS_PLL_VDDCFG
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_VDDCFG;
                   };
                 } TLVDS_PLL_VDDCFG;
    typedef union  TLVDS_PLL_PLL_LOCK
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_PLL_LOCK;
                   };
                 } TLVDS_PLL_PLL_LOCK;
    typedef union  TLVDS_PLL_VCO_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32LVDS_PLL_VCO_STATUS;
                   };
                 } TLVDS_PLL_VCO_STATUS;

    ///////////////////////////////////////////////////////////
     SIGN32 LVDS_PLL_drvrd(SIE_LVDS_PLL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 LVDS_PLL_drvwr(SIE_LVDS_PLL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void LVDS_PLL_reset(SIE_LVDS_PLL *p);
     SIGN32 LVDS_PLL_cmp  (SIE_LVDS_PLL *p, SIE_LVDS_PLL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define LVDS_PLL_check(p,pie,pfx,hLOG) LVDS_PLL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define LVDS_PLL_print(p,    pfx,hLOG) LVDS_PLL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: LVDS_PLL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE LVDS_PHY                biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 LVDS_CHANNEL         
///               $LVDS_CH             LVDS_CHANNEL      REG       [4]
///     @ 0x000B0                      (P)
///     # 0x000B0 LVDS_IMPCAL          
///               $LVDS_IMPCAL         LVDS_IMPCAL       REG          
///     @ 0x000C4                      (P)
///     # 0x000C4 LVDS_PLL             
///               $LVDS_PLL            LVDS_PLL          REG          
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     264B, bits:     753b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_LVDS_PHY
#define h_LVDS_PHY (){}

    #define     RA_LVDS_PHY_LVDS_CHANNEL                       0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PHY_LVDS_IMPCAL                        0x00B0
    ///////////////////////////////////////////////////////////
    #define     RA_LVDS_PHY_LVDS_PLL                           0x00C4
    ///////////////////////////////////////////////////////////

    typedef struct SIE_LVDS_PHY {
    ///////////////////////////////////////////////////////////
              SIE_LVDS_CH                                      ie_LVDS_CHANNEL[4];
    ///////////////////////////////////////////////////////////
              SIE_LVDS_IMPCAL                                  ie_LVDS_IMPCAL;
    ///////////////////////////////////////////////////////////
              SIE_LVDS_PLL                                     ie_LVDS_PLL;
    ///////////////////////////////////////////////////////////
    } SIE_LVDS_PHY;

    ///////////////////////////////////////////////////////////
     SIGN32 LVDS_PHY_drvrd(SIE_LVDS_PHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 LVDS_PHY_drvwr(SIE_LVDS_PHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void LVDS_PHY_reset(SIE_LVDS_PHY *p);
     SIGN32 LVDS_PHY_cmp  (SIE_LVDS_PHY *p, SIE_LVDS_PHY *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define LVDS_PHY_check(p,pie,pfx,hLOG) LVDS_PHY_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define LVDS_PHY_print(p,    pfx,hLOG) LVDS_PHY_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: LVDS_PHY
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE GENERAL_REG                              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SYS                  (P)
///               %unsigned 1  RESET                     0x1
///                                    ###
///                                    * AXI Bus Reset
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 LVDS_FMT             (P)
///               %unsigned 1  RST_L                     0x1
///                                    ###
///                                    * LVDS_FORMATTER Reset
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:       2b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_GENERAL_REG
#define h_GENERAL_REG (){}

    #define     RA_GENERAL_REG_SYS                             0x0000

    #define     BA_GENERAL_REG_SYS_RESET                       0x0000
    #define     B16GENERAL_REG_SYS_RESET                       0x0000
    #define   LSb32GENERAL_REG_SYS_RESET                          0
    #define   LSb16GENERAL_REG_SYS_RESET                          0
    #define       bGENERAL_REG_SYS_RESET                       1
    #define   MSK32GENERAL_REG_SYS_RESET                          0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GENERAL_REG_LVDS_FMT                        0x0004

    #define     BA_GENERAL_REG_LVDS_FMT_RST_L                  0x0004
    #define     B16GENERAL_REG_LVDS_FMT_RST_L                  0x0004
    #define   LSb32GENERAL_REG_LVDS_FMT_RST_L                     0
    #define   LSb16GENERAL_REG_LVDS_FMT_RST_L                     0
    #define       bGENERAL_REG_LVDS_FMT_RST_L                  1
    #define   MSK32GENERAL_REG_LVDS_FMT_RST_L                     0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_GENERAL_REG {
    ///////////////////////////////////////////////////////////
    #define   GET32GENERAL_REG_SYS_RESET(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32GENERAL_REG_SYS_RESET(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16GENERAL_REG_SYS_RESET(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16GENERAL_REG_SYS_RESET(r16,v)                _BFSET_(r16, 0, 0,v)

    #define     w32GENERAL_REG_SYS                             {\
            UNSG32 uSYS_RESET                                  :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32GENERAL_REG_SYS;
            struct w32GENERAL_REG_SYS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GENERAL_REG_LVDS_FMT_RST_L(r32)             _BFGET_(r32, 0, 0)
    #define   SET32GENERAL_REG_LVDS_FMT_RST_L(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16GENERAL_REG_LVDS_FMT_RST_L(r16)             _BFGET_(r16, 0, 0)
    #define   SET16GENERAL_REG_LVDS_FMT_RST_L(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32GENERAL_REG_LVDS_FMT                        {\
            UNSG32 uLVDS_FMT_RST_L                             :  1;\
            UNSG32 RSVDx4_b1                                   : 31;\
          }
    union { UNSG32 u32GENERAL_REG_LVDS_FMT;
            struct w32GENERAL_REG_LVDS_FMT;
          };
    ///////////////////////////////////////////////////////////
    } SIE_GENERAL_REG;

    typedef union  T32GENERAL_REG_SYS
          { UNSG32 u32;
            struct w32GENERAL_REG_SYS;
                 } T32GENERAL_REG_SYS;
    typedef union  T32GENERAL_REG_LVDS_FMT
          { UNSG32 u32;
            struct w32GENERAL_REG_LVDS_FMT;
                 } T32GENERAL_REG_LVDS_FMT;
    ///////////////////////////////////////////////////////////

    typedef union  TGENERAL_REG_SYS
          { UNSG32 u32[1];
            struct {
            struct w32GENERAL_REG_SYS;
                   };
                 } TGENERAL_REG_SYS;
    typedef union  TGENERAL_REG_LVDS_FMT
          { UNSG32 u32[1];
            struct {
            struct w32GENERAL_REG_LVDS_FMT;
                   };
                 } TGENERAL_REG_LVDS_FMT;

    ///////////////////////////////////////////////////////////
     SIGN32 GENERAL_REG_drvrd(SIE_GENERAL_REG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 GENERAL_REG_drvwr(SIE_GENERAL_REG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void GENERAL_REG_reset(SIE_GENERAL_REG *p);
     SIGN32 GENERAL_REG_cmp  (SIE_GENERAL_REG *p, SIE_GENERAL_REG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define GENERAL_REG_check(p,pie,pfx,hLOG) GENERAL_REG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define GENERAL_REG_print(p,    pfx,hLOG) GENERAL_REG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: GENERAL_REG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE FRC                     biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 LVDS_FORMAT          
///               $LF                  LVDS_FORMAT       REG          
///     @ 0x002A0                      (P)
///     # 0x002A0 LVDS_PHY             
///               $LVDS_PHY            LVDS_PHY          REG          
///     @ 0x003A8                      (P)
///     # 0x003A8 G_REG                
///               $GENERAL_REG         G_REG             REG          
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     944B, bits:    1967b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_FRC
#define h_FRC (){}

    #define     RA_FRC_LVDS_FORMAT                             0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_FRC_LVDS_PHY                                0x02A0
    ///////////////////////////////////////////////////////////
    #define     RA_FRC_G_REG                                   0x03A8
    ///////////////////////////////////////////////////////////

    typedef struct SIE_FRC {
    ///////////////////////////////////////////////////////////
              SIE_LF                                           ie_LVDS_FORMAT;
    ///////////////////////////////////////////////////////////
              SIE_LVDS_PHY                                     ie_LVDS_PHY;
    ///////////////////////////////////////////////////////////
              SIE_GENERAL_REG                                  ie_G_REG;
    ///////////////////////////////////////////////////////////
    } SIE_FRC;

    ///////////////////////////////////////////////////////////
     SIGN32 FRC_drvrd(SIE_FRC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 FRC_drvwr(SIE_FRC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void FRC_reset(SIE_FRC *p);
     SIGN32 FRC_cmp  (SIE_FRC *p, SIE_FRC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define FRC_check(p,pie,pfx,hLOG) FRC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define FRC_print(p,    pfx,hLOG) FRC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: FRC
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: frc.h
////////////////////////////////////////////////////////////

