//////
/// don't edit! auto-generated by docc: cst.h
////////////////////////////////////////////////////////////
#ifndef cst_h
#define cst_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE oneReg                                   (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (R-)
///               %unsigned 32 0x00000000                
///                                    ###
///                                    * One Register in an external IP block (i.e., CS)
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_oneReg
#define h_oneReg (){}

    #define     BA_oneReg_0x00000000                           0x0000
    #define     B16oneReg_0x00000000                           0x0000
    #define   LSb32oneReg_0x00000000                              0
    #define   LSb16oneReg_0x00000000                              0
    #define       boneReg_0x00000000                           32
    #define   MSK32oneReg_0x00000000                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_oneReg {
    ///////////////////////////////////////////////////////////
    #define   GET32oneReg_0x00000000(r32)                      _BFGET_(r32,31, 0)
    #define   SET32oneReg_0x00000000(r32,v)                    _BFSET_(r32,31, 0,v)

            UNSG32 u_0x00000000                                : 32;
    ///////////////////////////////////////////////////////////
    } SIE_oneReg;

    ///////////////////////////////////////////////////////////
     SIGN32 oneReg_drvrd(SIE_oneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 oneReg_drvwr(SIE_oneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void oneReg_reset(SIE_oneReg *p);
     SIGN32 oneReg_cmp  (SIE_oneReg *p, SIE_oneReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define oneReg_check(p,pie,pfx,hLOG) oneReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define oneReg_print(p,    pfx,hLOG) oneReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: oneReg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CS_REG                                   (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 dummy                
///               $oneReg              dummy             REG   [65536]
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:  262144B, bits: 2097152b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CS_REG
#define h_CS_REG (){}

    #define     RA_CS_REG_dummy                                0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CS_REG {
    ///////////////////////////////////////////////////////////
              SIE_oneReg                                       ie_dummy[65536];
    ///////////////////////////////////////////////////////////
    } SIE_CS_REG;

    ///////////////////////////////////////////////////////////
     SIGN32 CS_REG_drvrd(SIE_CS_REG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CS_REG_drvwr(SIE_CS_REG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CS_REG_reset(SIE_CS_REG *p);
     SIGN32 CS_REG_cmp  (SIE_CS_REG *p, SIE_CS_REG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CS_REG_check(p,pie,pfx,hLOG) CS_REG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CS_REG_print(p,    pfx,hLOG) CS_REG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CS_REG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CS                      biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (R-)
///     # 0x00000 cfgReg               
///               $CS_REG              cfgReg            MEM          
///                                    ###
///                                    * CS Register Space, 256KB. (Hier:3)
///                                    ###
///     @ 0x40000 dummy1               (R-)
///               %unsigned 32 STS                       0x0
///                                    ###
///                                    * Dummy register for ISC to generate the BIU.
///                                    ###
///     @ 0x40004                      (W-)
///     #         # Stuffing bytes...
///               %% 2097120
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:  524288B, bits:      64b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CS
#define h_CS (){}

    #define     RA_CS_cfgReg                                   0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_CS_dummy1                                   0x40000

    #define     BA_CS_dummy1_STS                               0x40000
    #define     B16CS_dummy1_STS                               0x40000
    #define   LSb32CS_dummy1_STS                                  0
    #define   LSb16CS_dummy1_STS                                  0
    #define       bCS_dummy1_STS                               32
    #define   MSK32CS_dummy1_STS                                  0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CS {
    ///////////////////////////////////////////////////////////
              SIE_CS_REG                                       ie_cfgReg;
    ///////////////////////////////////////////////////////////
    #define   GET32CS_dummy1_STS(r32)                          _BFGET_(r32,31, 0)
    #define   SET32CS_dummy1_STS(r32,v)                        _BFSET_(r32,31, 0,v)

    #define     w32CS_dummy1                                   {\
            UNSG32 udummy1_STS                                 : 32;\
          }
    union { UNSG32 u32CS_dummy1;
            struct w32CS_dummy1;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx40004                                  [262140];
    ///////////////////////////////////////////////////////////
    } SIE_CS;

    typedef union  T32CS_dummy1
          { UNSG32 u32;
            struct w32CS_dummy1;
                 } T32CS_dummy1;
    ///////////////////////////////////////////////////////////

    typedef union  TCS_dummy1
          { UNSG32 u32[1];
            struct {
            struct w32CS_dummy1;
                   };
                 } TCS_dummy1;

    ///////////////////////////////////////////////////////////
     SIGN32 CS_drvrd(SIE_CS *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CS_drvwr(SIE_CS *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CS_reset(SIE_CS *p);
     SIGN32 CS_cmp  (SIE_CS *p, SIE_CS *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CS_check(p,pie,pfx,hLOG) CS_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CS_print(p,    pfx,hLOG) CS_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CS
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: cst.h
////////////////////////////////////////////////////////////

